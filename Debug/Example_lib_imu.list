
Example_lib_imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e78  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08007078  08007078  00017078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074c4  080074c4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080074c4  080074c4  000174c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074cc  080074cc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074cc  080074cc  000174cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074d0  080074d0  000174d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080074d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200001dc  080076b0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  080076b0  00020430  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108d7  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002652  00000000  00000000  00030ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00033138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac0  00000000  00000000  00033cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e62  00000000  00000000  000347b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f17a  00000000  00000000  0005d612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f457b  00000000  00000000  0006c78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00160d07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee8  00000000  00000000  00160d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08007060 	.word	0x08007060

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08007060 	.word	0x08007060

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MPU9250_Init>:
extern I2C_HandleTypeDef hi2c1;

static inline float deg2rad(float x);

MPU9250_Result_t MPU9250_Init(MPU9250_t *MPU9250, MPU9250_Device_t dev, MPU9250_Accel_Scale_t accScale, MPU9250_Gyro_Scale_t gyroScale, MPU9250_Mag_Scale_t magScale)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	4608      	mov	r0, r1
 80005f2:	4611      	mov	r1, r2
 80005f4:	461a      	mov	r2, r3
 80005f6:	4603      	mov	r3, r0
 80005f8:	70fb      	strb	r3, [r7, #3]
 80005fa:	460b      	mov	r3, r1
 80005fc:	70bb      	strb	r3, [r7, #2]
 80005fe:	4613      	mov	r3, r2
 8000600:	707b      	strb	r3, [r7, #1]
	uint8_t data;
	MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
 8000602:	78fb      	ldrb	r3, [r7, #3]
 8000604:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8000608:	b2da      	uxtb	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	MPU9250->I2C_Addr_Mag = MPU9250_I2C_ADDR_MAG;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2218      	movs	r2, #24
 8000614:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	/* Gyro & Acc Device Connection Check */
	if (isMPU9250Ready(&hi2c1, MPU9250->I2C_Addr) != MPU9250_RESULT_OK)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800061e:	4619      	mov	r1, r3
 8000620:	48bf      	ldr	r0, [pc, #764]	; (8000920 <MPU9250_Init+0x338>)
 8000622:	f000 fbbc 	bl	8000d9e <isMPU9250Ready>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MPU9250_Init+0x48>
		return MPU9250_RESULT_NC;
 800062c:	2302      	movs	r3, #2
 800062e:	e18d      	b.n	800094c <MPU9250_Init+0x364>

	/* Who Am I Check */
	readByte(&hi2c1, MPU9250->I2C_Addr, WHO_AM_I, &data);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000636:	f107 030f 	add.w	r3, r7, #15
 800063a:	2275      	movs	r2, #117	; 0x75
 800063c:	48b8      	ldr	r0, [pc, #736]	; (8000920 <MPU9250_Init+0x338>)
 800063e:	f000 fb48 	bl	8000cd2 <readByte>
	if (data != 0x71)
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b71      	cmp	r3, #113	; 0x71
 8000646:	d001      	beq.n	800064c <MPU9250_Init+0x64>
		return MPU9250_RESULT_NC;
 8000648:	2302      	movs	r3, #2
 800064a:	e17f      	b.n	800094c <MPU9250_Init+0x364>

	/* Device Wake Up */
	writeByte(&hi2c1, MPU9250->I2C_Addr, PWR_MGMT_1, 0x00);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000652:	2300      	movs	r3, #0
 8000654:	226b      	movs	r2, #107	; 0x6b
 8000656:	48b2      	ldr	r0, [pc, #712]	; (8000920 <MPU9250_Init+0x338>)
 8000658:	f000 fb12 	bl	8000c80 <writeByte>
	HAL_Delay(100);
 800065c:	2064      	movs	r0, #100	; 0x64
 800065e:	f001 f84d 	bl	80016fc <HAL_Delay>

	/* Auto-select best (stable) available clock source */
	writeByte(&hi2c1, MPU9250->I2C_Addr, PWR_MGMT_1, 0x01);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000668:	2301      	movs	r3, #1
 800066a:	226b      	movs	r2, #107	; 0x6b
 800066c:	48ac      	ldr	r0, [pc, #688]	; (8000920 <MPU9250_Init+0x338>)
 800066e:	f000 fb07 	bl	8000c80 <writeByte>
	HAL_Delay(200);
 8000672:	20c8      	movs	r0, #200	; 0xc8
 8000674:	f001 f842 	bl	80016fc <HAL_Delay>


	writeByte(&hi2c1, MPU9250->I2C_Addr, CONFIG, 0x03);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800067e:	2303      	movs	r3, #3
 8000680:	221a      	movs	r2, #26
 8000682:	48a7      	ldr	r0, [pc, #668]	; (8000920 <MPU9250_Init+0x338>)
 8000684:	f000 fafc 	bl	8000c80 <writeByte>


	writeByte(&hi2c1, MPU9250->I2C_Addr, SMPLRT_DIV, 0x04);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800068e:	2304      	movs	r3, #4
 8000690:	2219      	movs	r2, #25
 8000692:	48a3      	ldr	r0, [pc, #652]	; (8000920 <MPU9250_Init+0x338>)
 8000694:	f000 faf4 	bl	8000c80 <writeByte>

	/* Gyro Configuration */
	readByte(&hi2c1, MPU9250->I2C_Addr, GYRO_CONFIG, &data);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800069e:	f107 030f 	add.w	r3, r7, #15
 80006a2:	221b      	movs	r2, #27
 80006a4:	489e      	ldr	r0, [pc, #632]	; (8000920 <MPU9250_Init+0x338>)
 80006a6:	f000 fb14 	bl	8000cd2 <readByte>
	data &= ~0x02;		/* [1:0] - Clear Fchoice_b[1:0] bits */
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	f023 0302 	bic.w	r3, r3, #2
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	73fb      	strb	r3, [r7, #15]
	data &= ~0x18;		/* [4:3] - Clear GYRO_FS_SEL[1:0] bits */
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	f023 0318 	bic.w	r3, r3, #24
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	73fb      	strb	r3, [r7, #15]
	data |= gyroScale;
 80006be:	7bfa      	ldrb	r2, [r7, #15]
 80006c0:	787b      	ldrb	r3, [r7, #1]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	73fb      	strb	r3, [r7, #15]
	writeByte(&hi2c1, MPU9250->I2C_Addr, GYRO_CONFIG, data);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	221b      	movs	r2, #27
 80006d2:	4893      	ldr	r0, [pc, #588]	; (8000920 <MPU9250_Init+0x338>)
 80006d4:	f000 fad4 	bl	8000c80 <writeByte>

	/* Accel Configuraiton */

	readByte(&hi2c1, MPU9250->I2C_Addr, ACCEL_CONFIG, &data);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 80006de:	f107 030f 	add.w	r3, r7, #15
 80006e2:	221c      	movs	r2, #28
 80006e4:	488e      	ldr	r0, [pc, #568]	; (8000920 <MPU9250_Init+0x338>)
 80006e6:	f000 faf4 	bl	8000cd2 <readByte>
	data &= ~0x18;		/* [4:3] - Clear ACCEL_FS_SEL[1:0] bits */
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	f023 0318 	bic.w	r3, r3, #24
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	73fb      	strb	r3, [r7, #15]
	data |= accScale;
 80006f4:	7bfa      	ldrb	r2, [r7, #15]
 80006f6:	78bb      	ldrb	r3, [r7, #2]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	73fb      	strb	r3, [r7, #15]
	writeByte(&hi2c1, MPU9250->I2C_Addr, ACCEL_CONFIG, data);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	221c      	movs	r2, #28
 8000708:	4885      	ldr	r0, [pc, #532]	; (8000920 <MPU9250_Init+0x338>)
 800070a:	f000 fab9 	bl	8000c80 <writeByte>

	/* Accel_2 Configuration

	readByte(&hi2c1, MPU9250->I2C_Addr, ACCEL_CONFIG_2, &data);
	data &= ~0x0F;		/* Clear ACCEL_CONFIG_2[3:0] Bits */
	data |= 0x03;		/* A_DLPFCFG[2:0] bits are set to 011 */
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	f043 0303 	orr.w	r3, r3, #3
 8000714:	b2db      	uxtb	r3, r3
 8000716:	73fb      	strb	r3, [r7, #15]
	writeByte(&hi2c1, MPU9250->I2C_Addr, ACCEL_CONFIG_2, data);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	221d      	movs	r2, #29
 8000722:	487f      	ldr	r0, [pc, #508]	; (8000920 <MPU9250_Init+0x338>)
 8000724:	f000 faac 	bl	8000c80 <writeByte>




	readByte(&hi2c1, MPU9250->I2C_Addr,LP_ACCEL_ODR, &data);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800072e:	f107 030f 	add.w	r3, r7, #15
 8000732:	221e      	movs	r2, #30
 8000734:	487a      	ldr	r0, [pc, #488]	; (8000920 <MPU9250_Init+0x338>)
 8000736:	f000 facc 	bl	8000cd2 <readByte>

	printf( "LP_ACCEL_ODR = %x\r\n", data);
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	4619      	mov	r1, r3
 800073e:	4879      	ldr	r0, [pc, #484]	; (8000924 <MPU9250_Init+0x33c>)
 8000740:	f004 fab4 	bl	8004cac <iprintf>
//	status = HAL_UART_Transmit (&huart4, pTxData, strlen((char *)pTxData), 200);

	writeByte(&hi2c1, MPU9250->I2C_Addr,LP_ACCEL_ODR,0x02);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800074a:	2302      	movs	r3, #2
 800074c:	221e      	movs	r2, #30
 800074e:	4874      	ldr	r0, [pc, #464]	; (8000920 <MPU9250_Init+0x338>)
 8000750:	f000 fa96 	bl	8000c80 <writeByte>


	writeByte(&hi2c1, MPU9250->I2C_Addr, INT_PIN_CFG, 0x22);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800075a:	2322      	movs	r3, #34	; 0x22
 800075c:	2237      	movs	r2, #55	; 0x37
 800075e:	4870      	ldr	r0, [pc, #448]	; (8000920 <MPU9250_Init+0x338>)
 8000760:	f000 fa8e 	bl	8000c80 <writeByte>
	writeByte(&hi2c1, MPU9250->I2C_Addr, INT_ENABLE, 0x01);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800076a:	2301      	movs	r3, #1
 800076c:	2238      	movs	r2, #56	; 0x38
 800076e:	486c      	ldr	r0, [pc, #432]	; (8000920 <MPU9250_Init+0x338>)
 8000770:	f000 fa86 	bl	8000c80 <writeByte>

	/* Magnetometer Device Connection Check */
	if (isMPU9250Ready(&hi2c1, MPU9250->I2C_Addr_Mag) != MPU9250_RESULT_OK)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800077a:	4619      	mov	r1, r3
 800077c:	4868      	ldr	r0, [pc, #416]	; (8000920 <MPU9250_Init+0x338>)
 800077e:	f000 fb0e 	bl	8000d9e <isMPU9250Ready>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MPU9250_Init+0x1a4>
		return MPU9250_RESULT_NC;
 8000788:	2302      	movs	r3, #2
 800078a:	e0df      	b.n	800094c <MPU9250_Init+0x364>

	/* Magnetometer Power Down */
	writeByte(&hi2c1, MPU9250->I2C_Addr_Mag, CNTL, 0x00);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 8000792:	2300      	movs	r3, #0
 8000794:	220a      	movs	r2, #10
 8000796:	4862      	ldr	r0, [pc, #392]	; (8000920 <MPU9250_Init+0x338>)
 8000798:	f000 fa72 	bl	8000c80 <writeByte>
	HAL_Delay(10);
 800079c:	200a      	movs	r0, #10
 800079e:	f000 ffad 	bl	80016fc <HAL_Delay>
	/* Magnetometer Fuse ROM Access Mode ON */
	writeByte(&hi2c1, MPU9250->I2C_Addr_Mag, CNTL, 0x0F);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 80007a8:	230f      	movs	r3, #15
 80007aa:	220a      	movs	r2, #10
 80007ac:	485c      	ldr	r0, [pc, #368]	; (8000920 <MPU9250_Init+0x338>)
 80007ae:	f000 fa67 	bl	8000c80 <writeByte>
	HAL_Delay(10);
 80007b2:	200a      	movs	r0, #10
 80007b4:	f000 ffa2 	bl	80016fc <HAL_Delay>
	/* Magnetometer Power Down */
	writeByte(&hi2c1, MPU9250->I2C_Addr_Mag, CNTL, 0x00);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 80007be:	2300      	movs	r3, #0
 80007c0:	220a      	movs	r2, #10
 80007c2:	4857      	ldr	r0, [pc, #348]	; (8000920 <MPU9250_Init+0x338>)
 80007c4:	f000 fa5c 	bl	8000c80 <writeByte>
	HAL_Delay(10);
 80007c8:	200a      	movs	r0, #10
 80007ca:	f000 ff97 	bl	80016fc <HAL_Delay>

	writeByte(&hi2c1, MPU9250->I2C_Addr_Mag, CNTL, (1 << 4) | 2);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 80007d4:	2312      	movs	r3, #18
 80007d6:	220a      	movs	r2, #10
 80007d8:	4851      	ldr	r0, [pc, #324]	; (8000920 <MPU9250_Init+0x338>)
 80007da:	f000 fa51 	bl	8000c80 <writeByte>
	HAL_Delay(10);
 80007de:	200a      	movs	r0, #10
 80007e0:	f000 ff8c 	bl	80016fc <HAL_Delay>
	 * Gyroscope Full Scale:		±2000 degree/s
	 * Magnetometer Full Scale:		±4912 uT
	 */

	/* Accelerometer Resolution Multiplicator: LSB / g 			*/
	switch (accScale) {
 80007e4:	78bb      	ldrb	r3, [r7, #2]
 80007e6:	2b18      	cmp	r3, #24
 80007e8:	d848      	bhi.n	800087c <MPU9250_Init+0x294>
 80007ea:	a201      	add	r2, pc, #4	; (adr r2, 80007f0 <MPU9250_Init+0x208>)
 80007ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f0:	08000855 	.word	0x08000855
 80007f4:	0800087d 	.word	0x0800087d
 80007f8:	0800087d 	.word	0x0800087d
 80007fc:	0800087d 	.word	0x0800087d
 8000800:	0800087d 	.word	0x0800087d
 8000804:	0800087d 	.word	0x0800087d
 8000808:	0800087d 	.word	0x0800087d
 800080c:	0800087d 	.word	0x0800087d
 8000810:	0800085f 	.word	0x0800085f
 8000814:	0800087d 	.word	0x0800087d
 8000818:	0800087d 	.word	0x0800087d
 800081c:	0800087d 	.word	0x0800087d
 8000820:	0800087d 	.word	0x0800087d
 8000824:	0800087d 	.word	0x0800087d
 8000828:	0800087d 	.word	0x0800087d
 800082c:	0800087d 	.word	0x0800087d
 8000830:	08000869 	.word	0x08000869
 8000834:	0800087d 	.word	0x0800087d
 8000838:	0800087d 	.word	0x0800087d
 800083c:	0800087d 	.word	0x0800087d
 8000840:	0800087d 	.word	0x0800087d
 8000844:	0800087d 	.word	0x0800087d
 8000848:	0800087d 	.word	0x0800087d
 800084c:	0800087d 	.word	0x0800087d
 8000850:	08000873 	.word	0x08000873
		case ACCEL_SCALE_2G:
			MPU9250->accMult = 2.0f / 32768.0f;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800085a:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800085c:	e00e      	b.n	800087c <MPU9250_Init+0x294>
		case ACCEL_SCALE_4G:
			MPU9250->accMult = 4.0f / 32768.0f;;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8000864:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000866:	e009      	b.n	800087c <MPU9250_Init+0x294>
		case ACCEL_SCALE_8G:
			MPU9250->accMult = 8.0f / 32768.0f;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800086e:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000870:	e004      	b.n	800087c <MPU9250_Init+0x294>
		case ACCEL_SCALE_16G:
			MPU9250->accMult = 16.0f / 32768.0f;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8000878:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800087a:	bf00      	nop
	}

	/* Gyroscope Resolution Multiplicator: LSB / (degree/s) 	*/
	switch (gyroScale) {
 800087c:	787b      	ldrb	r3, [r7, #1]
 800087e:	2b18      	cmp	r3, #24
 8000880:	d844      	bhi.n	800090c <MPU9250_Init+0x324>
 8000882:	a201      	add	r2, pc, #4	; (adr r2, 8000888 <MPU9250_Init+0x2a0>)
 8000884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000888:	080008ed 	.word	0x080008ed
 800088c:	0800090d 	.word	0x0800090d
 8000890:	0800090d 	.word	0x0800090d
 8000894:	0800090d 	.word	0x0800090d
 8000898:	0800090d 	.word	0x0800090d
 800089c:	0800090d 	.word	0x0800090d
 80008a0:	0800090d 	.word	0x0800090d
 80008a4:	0800090d 	.word	0x0800090d
 80008a8:	080008f5 	.word	0x080008f5
 80008ac:	0800090d 	.word	0x0800090d
 80008b0:	0800090d 	.word	0x0800090d
 80008b4:	0800090d 	.word	0x0800090d
 80008b8:	0800090d 	.word	0x0800090d
 80008bc:	0800090d 	.word	0x0800090d
 80008c0:	0800090d 	.word	0x0800090d
 80008c4:	0800090d 	.word	0x0800090d
 80008c8:	080008fd 	.word	0x080008fd
 80008cc:	0800090d 	.word	0x0800090d
 80008d0:	0800090d 	.word	0x0800090d
 80008d4:	0800090d 	.word	0x0800090d
 80008d8:	0800090d 	.word	0x0800090d
 80008dc:	0800090d 	.word	0x0800090d
 80008e0:	0800090d 	.word	0x0800090d
 80008e4:	0800090d 	.word	0x0800090d
 80008e8:	08000905 	.word	0x08000905
		case GYRO_SCALE_250dps:
			MPU9250->gyroMult = 250.0f / 32768.0f;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <MPU9250_Init+0x340>)
 80008f0:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80008f2:	e00b      	b.n	800090c <MPU9250_Init+0x324>
		case GYRO_SCALE_500dps:
			MPU9250->gyroMult = 500.0f / 32768.0f;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a0d      	ldr	r2, [pc, #52]	; (800092c <MPU9250_Init+0x344>)
 80008f8:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80008fa:	e007      	b.n	800090c <MPU9250_Init+0x324>
		case GYRO_SCALE_1000dps:
			MPU9250->gyroMult = 1000.0f / 32768.0f;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <MPU9250_Init+0x348>)
 8000900:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000902:	e003      	b.n	800090c <MPU9250_Init+0x324>
		case GYRO_SCALE_2000dps:
			MPU9250->gyroMult = 2000.0f / 32768.0f;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <MPU9250_Init+0x34c>)
 8000908:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800090a:	bf00      	nop
	}

	/* Magnetometer Resolution Multiplicator: LSB / 0.15uT 		*/
	switch (magScale) {
 800090c:	7e3b      	ldrb	r3, [r7, #24]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d002      	beq.n	8000918 <MPU9250_Init+0x330>
 8000912:	2b01      	cmp	r3, #1
 8000914:	d012      	beq.n	800093c <MPU9250_Init+0x354>
 8000916:	e015      	b.n	8000944 <MPU9250_Init+0x35c>
		case MAG_SCALE_14bit:
			MPU9250->magMult = 10.0 * 4219.0 / 8190.0;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a07      	ldr	r2, [pc, #28]	; (8000938 <MPU9250_Init+0x350>)
 800091c:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 800091e:	e011      	b.n	8000944 <MPU9250_Init+0x35c>
 8000920:	20000258 	.word	0x20000258
 8000924:	08007078 	.word	0x08007078
 8000928:	3bfa0000 	.word	0x3bfa0000
 800092c:	3c7a0000 	.word	0x3c7a0000
 8000930:	3cfa0000 	.word	0x3cfa0000
 8000934:	3d7a0000 	.word	0x3d7a0000
 8000938:	40a4d84e 	.word	0x40a4d84e
		case MAG_SCALE_16bit:
			MPU9250->magMult = 10.0 * 4219.0 / 32760.0;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <MPU9250_Init+0x36c>)
 8000940:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8000942:	bf00      	nop
	}

	/* Temperature Resolution Multiplicator: LSB / degreeC		*/
	MPU9250->tempMult = 333.87f;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a04      	ldr	r2, [pc, #16]	; (8000958 <MPU9250_Init+0x370>)
 8000948:	649a      	str	r2, [r3, #72]	; 0x48

	return MPU9250_RESULT_OK;
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	3fa4d84e 	.word	0x3fa4d84e
 8000958:	43a6ef5c 	.word	0x43a6ef5c

0800095c <MPU9250_ReadAcc>:

MPU9250_Result_t MPU9250_ReadAcc(MPU9250_t *MPU9250)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af02      	add	r7, sp, #8
 8000962:	6078      	str	r0, [r7, #4]
	uint8_t data[6];

	readMultiBytes(&hi2c1, MPU9250->I2C_Addr, ACCEL_XOUT_H, data, 6);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	2206      	movs	r2, #6
 8000970:	9200      	str	r2, [sp, #0]
 8000972:	223b      	movs	r2, #59	; 0x3b
 8000974:	4827      	ldr	r0, [pc, #156]	; (8000a14 <MPU9250_ReadAcc+0xb8>)
 8000976:	f000 f9df 	bl	8000d38 <readMultiBytes>

	MPU9250->acc_raw[0] = (int16_t)(((int16_t)data[0] << 8) |  data[1]); // Turn the MSB and LSB into a signed 16-bit value
 800097a:	7a3b      	ldrb	r3, [r7, #8]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	7a7b      	ldrb	r3, [r7, #9]
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	851a      	strh	r2, [r3, #40]	; 0x28
	MPU9250->acc_raw[1] = (int16_t)(((int16_t)data[2] << 8) |  data[3]);
 800098c:	7abb      	ldrb	r3, [r7, #10]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	7afb      	ldrb	r3, [r7, #11]
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b21a      	sxth	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	855a      	strh	r2, [r3, #42]	; 0x2a
	MPU9250->acc_raw[2] = (int16_t)(((int16_t)data[4] << 8) |  data[5]);
 800099e:	7b3b      	ldrb	r3, [r7, #12]
 80009a0:	021b      	lsls	r3, r3, #8
 80009a2:	b21a      	sxth	r2, r3
 80009a4:	7b7b      	ldrb	r3, [r7, #13]
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	4313      	orrs	r3, r2
 80009aa:	b21a      	sxth	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	859a      	strh	r2, [r3, #44]	; 0x2c
//
//	MPU9250->acc_raw[0] = (int16_t)((int16_t)data[0] << 8) | data[1];
//	MPU9250->acc_raw[1] = ((int16_t)data[2] << 8) | data[3];
//	MPU9250->acc_raw[2] = ((int16_t)data[4] << 8) | data[5];

	MPU9250->acc[0] = (float)MPU9250->acc_raw[0] * MPU9250->accMult;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80009b6:	ee07 3a90 	vmov	s15, r3
 80009ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80009c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	edc3 7a00 	vstr	s15, [r3]
	MPU9250->acc[1] = (float)MPU9250->acc_raw[1] * MPU9250->accMult;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80009d4:	ee07 3a90 	vmov	s15, r3
 80009d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80009e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	edc3 7a01 	vstr	s15, [r3, #4]
	MPU9250->acc[2] = (float)MPU9250->acc_raw[2] * MPU9250->accMult;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80009f2:	ee07 3a90 	vmov	s15, r3
 80009f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8000a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	edc3 7a02 	vstr	s15, [r3, #8]

	return MPU9250_RESULT_OK;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000258 	.word	0x20000258

08000a18 <MPU9250_ReadGyro>:

MPU9250_Result_t MPU9250_ReadGyro(MPU9250_t *MPU9250)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	6078      	str	r0, [r7, #4]
	uint8_t data[6];

	readMultiBytes(&hi2c1, MPU9250->I2C_Addr, GYRO_XOUT_H, data, 6);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	2206      	movs	r2, #6
 8000a2c:	9200      	str	r2, [sp, #0]
 8000a2e:	2243      	movs	r2, #67	; 0x43
 8000a30:	4827      	ldr	r0, [pc, #156]	; (8000ad0 <MPU9250_ReadGyro+0xb8>)
 8000a32:	f000 f981 	bl	8000d38 <readMultiBytes>

	MPU9250->gyro_raw[0] = ((int16_t)data[0] << 8) | data[1];
 8000a36:	7a3b      	ldrb	r3, [r7, #8]
 8000a38:	021b      	lsls	r3, r3, #8
 8000a3a:	b21a      	sxth	r2, r3
 8000a3c:	7a7b      	ldrb	r3, [r7, #9]
 8000a3e:	b21b      	sxth	r3, r3
 8000a40:	4313      	orrs	r3, r2
 8000a42:	b21a      	sxth	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	85da      	strh	r2, [r3, #46]	; 0x2e
	MPU9250->gyro_raw[1] = ((int16_t)data[2] << 8) | data[3];
 8000a48:	7abb      	ldrb	r3, [r7, #10]
 8000a4a:	021b      	lsls	r3, r3, #8
 8000a4c:	b21a      	sxth	r2, r3
 8000a4e:	7afb      	ldrb	r3, [r7, #11]
 8000a50:	b21b      	sxth	r3, r3
 8000a52:	4313      	orrs	r3, r2
 8000a54:	b21a      	sxth	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	861a      	strh	r2, [r3, #48]	; 0x30
	MPU9250->gyro_raw[2] = ((int16_t)data[4] << 8) | data[5];
 8000a5a:	7b3b      	ldrb	r3, [r7, #12]
 8000a5c:	021b      	lsls	r3, r3, #8
 8000a5e:	b21a      	sxth	r2, r3
 8000a60:	7b7b      	ldrb	r3, [r7, #13]
 8000a62:	b21b      	sxth	r3, r3
 8000a64:	4313      	orrs	r3, r2
 8000a66:	b21a      	sxth	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	865a      	strh	r2, [r3, #50]	; 0x32

	MPU9250->gyro[0] = (float)MPU9250->gyro_raw[0] * MPU9250->gyroMult;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000a72:	ee07 3a90 	vmov	s15, r3
 8000a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	edc3 7a03 	vstr	s15, [r3, #12]
	MPU9250->gyro[1] = (float)MPU9250->gyro_raw[1] * MPU9250->gyroMult;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8000a90:	ee07 3a90 	vmov	s15, r3
 8000a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	edc3 7a04 	vstr	s15, [r3, #16]
	MPU9250->gyro[2] = (float)MPU9250->gyro_raw[2] * MPU9250->gyroMult;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8000aae:	ee07 3a90 	vmov	s15, r3
 8000ab2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	edc3 7a05 	vstr	s15, [r3, #20]

	return MPU9250_RESULT_OK;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000258 	.word	0x20000258

08000ad4 <MPU9250_ReadMag>:

MPU9250_Result_t MPU9250_ReadMag(MPU9250_t *MPU9250)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af02      	add	r7, sp, #8
 8000ada:	6078      	str	r0, [r7, #4]
	uint8_t data[7];
	uint8_t check;

	/* Check Mag Data Ready Status */
	readByte(&hi2c1, MPU9250->I2C_Addr_Mag, ST1, &check);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 8000ae2:	f107 030f 	add.w	r3, r7, #15
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	483d      	ldr	r0, [pc, #244]	; (8000be0 <MPU9250_ReadMag+0x10c>)
 8000aea:	f000 f8f2 	bl	8000cd2 <readByte>

	if (check & 0x01)
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d06d      	beq.n	8000bd4 <MPU9250_ReadMag+0x100>
	{
		readMultiBytes(&hi2c1, MPU9250->I2C_Addr_Mag, HXL, data, 7);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	2207      	movs	r2, #7
 8000b04:	9200      	str	r2, [sp, #0]
 8000b06:	2203      	movs	r2, #3
 8000b08:	4835      	ldr	r0, [pc, #212]	; (8000be0 <MPU9250_ReadMag+0x10c>)
 8000b0a:	f000 f915 	bl	8000d38 <readMultiBytes>
		/* Check (ST2 Register) If Magnetic Sensor Overflow Occured */
		if (!(data[6] & 0x08))
 8000b0e:	7dbb      	ldrb	r3, [r7, #22]
 8000b10:	f003 0308 	and.w	r3, r3, #8
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d15b      	bne.n	8000bd0 <MPU9250_ReadMag+0xfc>
		{
			MPU9250->mag_raw[0] = ((int16_t)data[1] << 8) | data[0];
 8000b18:	7c7b      	ldrb	r3, [r7, #17]
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	b21a      	sxth	r2, r3
 8000b1e:	7c3b      	ldrb	r3, [r7, #16]
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	4313      	orrs	r3, r2
 8000b24:	b21a      	sxth	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	869a      	strh	r2, [r3, #52]	; 0x34
			MPU9250->mag_raw[1] = ((int16_t)data[3] << 8) | data[2];
 8000b2a:	7cfb      	ldrb	r3, [r7, #19]
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	b21a      	sxth	r2, r3
 8000b30:	7cbb      	ldrb	r3, [r7, #18]
 8000b32:	b21b      	sxth	r3, r3
 8000b34:	4313      	orrs	r3, r2
 8000b36:	b21a      	sxth	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	86da      	strh	r2, [r3, #54]	; 0x36
			MPU9250->mag_raw[2] = ((int16_t)data[5] << 8) | data[4];
 8000b3c:	7d7b      	ldrb	r3, [r7, #21]
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	b21a      	sxth	r2, r3
 8000b42:	7d3b      	ldrb	r3, [r7, #20]
 8000b44:	b21b      	sxth	r3, r3
 8000b46:	4313      	orrs	r3, r2
 8000b48:	b21a      	sxth	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	871a      	strh	r2, [r3, #56]	; 0x38

			MPU9250->mag[0] = deg2rad((float)MPU9250->mag_raw[0] * MPU9250->magMult);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8000b54:	ee07 3a90 	vmov	s15, r3
 8000b58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b66:	eeb0 0a67 	vmov.f32	s0, s15
 8000b6a:	f000 f92f 	bl	8000dcc <deg2rad>
 8000b6e:	eef0 7a40 	vmov.f32	s15, s0
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	edc3 7a06 	vstr	s15, [r3, #24]
			MPU9250->mag[1] = deg2rad((float)MPU9250->mag_raw[1] * MPU9250->magMult);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8000b7e:	ee07 3a90 	vmov	s15, r3
 8000b82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b90:	eeb0 0a67 	vmov.f32	s0, s15
 8000b94:	f000 f91a 	bl	8000dcc <deg2rad>
 8000b98:	eef0 7a40 	vmov.f32	s15, s0
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	edc3 7a07 	vstr	s15, [r3, #28]
			MPU9250->mag[2] = deg2rad((float)MPU9250->mag_raw[2] * MPU9250->magMult);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000ba8:	ee07 3a90 	vmov	s15, r3
 8000bac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bba:	eeb0 0a67 	vmov.f32	s0, s15
 8000bbe:	f000 f905 	bl	8000dcc <deg2rad>
 8000bc2:	eef0 7a40 	vmov.f32	s15, s0
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	edc3 7a08 	vstr	s15, [r3, #32]

			return MPU9250_RESULT_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e002      	b.n	8000bd6 <MPU9250_ReadMag+0x102>
		}
		return MPU9250_RESULT_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e000      	b.n	8000bd6 <MPU9250_ReadMag+0x102>
	}
	return MPU9250_RESULT_OK;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000258 	.word	0x20000258

08000be4 <MPU9250_ReadTemperature>:

MPU9250_Result_t MPU9250_ReadTemperature(MPU9250_t *MPU9250)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	6078      	str	r0, [r7, #4]
	uint8_t data[2];

	readMultiBytes(&hi2c1, MPU9250->I2C_Addr, TEMP_OUT_H, data, 2);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	9200      	str	r2, [sp, #0]
 8000bfa:	2241      	movs	r2, #65	; 0x41
 8000bfc:	4811      	ldr	r0, [pc, #68]	; (8000c44 <MPU9250_ReadTemperature+0x60>)
 8000bfe:	f000 f89b 	bl	8000d38 <readMultiBytes>

	MPU9250->temp_raw = ((int16_t)data[0] << 8) | data [1];
 8000c02:	7b3b      	ldrb	r3, [r7, #12]
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	7b7b      	ldrb	r3, [r7, #13]
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b21a      	sxth	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	875a      	strh	r2, [r3, #58]	; 0x3a

	MPU9250->temp = ((float)MPU9250->temp_raw / MPU9250->tempMult) + 21.0f;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000c1a:	ee07 3a90 	vmov	s15, r3
 8000c1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8000c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c2c:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8000c30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return MPU9250_RESULT_OK;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000258 	.word	0x20000258

08000c48 <MPU9250_DataReady>:

MPU9250_Result_t MPU9250_DataReady(MPU9250_t *MPU9250)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	uint8_t data;
	readByte(&hi2c1, MPU9250->I2C_Addr, INT_STATUS, &data);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000c56:	f107 030f 	add.w	r3, r7, #15
 8000c5a:	2239      	movs	r2, #57	; 0x39
 8000c5c:	4807      	ldr	r0, [pc, #28]	; (8000c7c <MPU9250_DataReady+0x34>)
 8000c5e:	f000 f838 	bl	8000cd2 <readByte>
	if (data & 0x01)
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MPU9250_DataReady+0x28>
		return MPU9250_RESULT_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e000      	b.n	8000c72 <MPU9250_DataReady+0x2a>

	return MPU9250_RESULT_ERROR;
 8000c70:	2301      	movs	r3, #1
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000258 	.word	0x20000258

08000c80 <writeByte>:

HAL_StatusTypeDef writeByte(I2C_HandleTypeDef *hi2c1, uint8_t device_addr, uint8_t register_addr, uint8_t data)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af02      	add	r7, sp, #8
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	4608      	mov	r0, r1
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4603      	mov	r3, r0
 8000c90:	70fb      	strb	r3, [r7, #3]
 8000c92:	460b      	mov	r3, r1
 8000c94:	70bb      	strb	r3, [r7, #2]
 8000c96:	4613      	mov	r3, r2
 8000c98:	707b      	strb	r3, [r7, #1]
	uint8_t buffer[2];
	buffer[0] = register_addr;
 8000c9a:	78bb      	ldrb	r3, [r7, #2]
 8000c9c:	733b      	strb	r3, [r7, #12]
	buffer[1] = data;
 8000c9e:	787b      	ldrb	r3, [r7, #1]
 8000ca0:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(hi2c1, (uint16_t)device_addr, (uint8_t *)buffer, 2, 1000) != HAL_OK)
 8000ca2:	78fb      	ldrb	r3, [r7, #3]
 8000ca4:	b299      	uxth	r1, r3
 8000ca6:	f107 020c 	add.w	r2, r7, #12
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f001 f868 	bl	8001d88 <HAL_I2C_Master_Transmit>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d004      	beq.n	8000cc8 <writeByte+0x48>
	{
		if (HAL_I2C_GetError(hi2c1) != HAL_I2C_ERROR_AF) {}
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f001 fb54 	bl	800236c <HAL_I2C_GetError>
		return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e000      	b.n	8000cca <writeByte+0x4a>
	}
	return HAL_OK;
 8000cc8:	2300      	movs	r3, #0

}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <readByte>:

HAL_StatusTypeDef readByte(I2C_HandleTypeDef *hi2c1, uint8_t device_addr, uint8_t register_addr, uint8_t *data)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af02      	add	r7, sp, #8
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	72fb      	strb	r3, [r7, #11]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	72bb      	strb	r3, [r7, #10]
	/* Transmit Register Address */
	if (HAL_I2C_Master_Transmit(hi2c1, (uint16_t)device_addr, &register_addr, 1, 1000) != HAL_OK)
 8000ce4:	7afb      	ldrb	r3, [r7, #11]
 8000ce6:	b299      	uxth	r1, r3
 8000ce8:	f107 020a 	add.w	r2, r7, #10
 8000cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	68f8      	ldr	r0, [r7, #12]
 8000cf6:	f001 f847 	bl	8001d88 <HAL_I2C_Master_Transmit>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d004      	beq.n	8000d0a <readByte+0x38>
	{
		{
			if (HAL_I2C_GetError(hi2c1) != HAL_I2C_ERROR_AF) {}
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f001 fb33 	bl	800236c <HAL_I2C_GetError>
			return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e012      	b.n	8000d30 <readByte+0x5e>
		}
	}

	/* Receive Register Data */
	if (HAL_I2C_Master_Receive(hi2c1, (uint16_t)device_addr, data, 1, 1000) != HAL_OK)
 8000d0a:	7afb      	ldrb	r3, [r7, #11]
 8000d0c:	b299      	uxth	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f001 f929 	bl	8001f70 <HAL_I2C_Master_Receive>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d004      	beq.n	8000d2e <readByte+0x5c>
	{
		{
			if (HAL_I2C_GetError(hi2c1) != HAL_I2C_ERROR_AF) {}
 8000d24:	68f8      	ldr	r0, [r7, #12]
 8000d26:	f001 fb21 	bl	800236c <HAL_I2C_GetError>
			return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e000      	b.n	8000d30 <readByte+0x5e>
		}
	}
	return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <readMultiBytes>:
	}
	return HAL_OK;
}

HAL_StatusTypeDef readMultiBytes(I2C_HandleTypeDef *hi2c1, uint8_t device_addr, uint8_t register_addr, uint8_t *data, uint16_t count)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af02      	add	r7, sp, #8
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	460b      	mov	r3, r1
 8000d44:	72fb      	strb	r3, [r7, #11]
 8000d46:	4613      	mov	r3, r2
 8000d48:	72bb      	strb	r3, [r7, #10]
	/* Transmit Register Address */
	if (HAL_I2C_Master_Transmit(hi2c1, (uint16_t)device_addr, &register_addr, 1, 1000) != HAL_OK)
 8000d4a:	7afb      	ldrb	r3, [r7, #11]
 8000d4c:	b299      	uxth	r1, r3
 8000d4e:	f107 020a 	add.w	r2, r7, #10
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2301      	movs	r3, #1
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	f001 f814 	bl	8001d88 <HAL_I2C_Master_Transmit>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d004      	beq.n	8000d70 <readMultiBytes+0x38>
	{
		if (HAL_I2C_GetError(hi2c1) != HAL_I2C_ERROR_AF) {}
 8000d66:	68f8      	ldr	r0, [r7, #12]
 8000d68:	f001 fb00 	bl	800236c <HAL_I2C_GetError>
		return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e012      	b.n	8000d96 <readMultiBytes+0x5e>
	}

	/* Receive Multiple Register Data */
	if (HAL_I2C_Master_Receive(hi2c1, (uint16_t)device_addr, data, count, 1000) != HAL_OK)
 8000d70:	7afb      	ldrb	r3, [r7, #11]
 8000d72:	b299      	uxth	r1, r3
 8000d74:	8b3b      	ldrh	r3, [r7, #24]
 8000d76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d7a:	9200      	str	r2, [sp, #0]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	68f8      	ldr	r0, [r7, #12]
 8000d80:	f001 f8f6 	bl	8001f70 <HAL_I2C_Master_Receive>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d004      	beq.n	8000d94 <readMultiBytes+0x5c>
	{
		if (HAL_I2C_GetError(hi2c1) != HAL_I2C_ERROR_AF) {}
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f001 faee 	bl	800236c <HAL_I2C_GetError>
		return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <readMultiBytes+0x5e>
	}
	return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <isMPU9250Ready>:

MPU9250_Result_t isMPU9250Ready(I2C_HandleTypeDef *hi2c1, uint8_t device_addr)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	460b      	mov	r3, r1
 8000da8:	70fb      	strb	r3, [r7, #3]
	/* Checks if device is ready to communicate */
	if (HAL_I2C_IsDeviceReady(hi2c1, (uint16_t)device_addr, 2, 5) != HAL_OK)
 8000daa:	78fb      	ldrb	r3, [r7, #3]
 8000dac:	b299      	uxth	r1, r3
 8000dae:	2305      	movs	r3, #5
 8000db0:	2202      	movs	r2, #2
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f001 f9d2 	bl	800215c <HAL_I2C_IsDeviceReady>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <isMPU9250Ready+0x24>
		return MPU9250_RESULT_NC;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e000      	b.n	8000dc4 <isMPU9250Ready+0x26>

	return MPU9250_RESULT_OK;
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <deg2rad>:

static inline float deg2rad(float x)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	ed87 0a01 	vstr	s0, [r7, #4]
	return ((PI / 180.0f) * x);
 8000dd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dda:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000df0 <deg2rad+0x24>
 8000dde:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000de2:	eeb0 0a67 	vmov.f32	s0, s15
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	3c8efa35 	.word	0x3c8efa35

08000df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfa:	f000 fc22 	bl	8001642 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfe:	f000 f88b 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e02:	f000 f98b 	bl	800111c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e06:	f000 f919 	bl	800103c <MX_I2C1_Init>
  MX_UART4_Init();
 8000e0a:	f000 f957 	bl	80010bc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


	sprintf((char*) pTxData, "UART IS WORKS 0000\r\n");
 8000e0e:	4938      	ldr	r1, [pc, #224]	; (8000ef0 <main+0xfc>)
 8000e10:	4838      	ldr	r0, [pc, #224]	; (8000ef4 <main+0x100>)
 8000e12:	f003 ff63 	bl	8004cdc <siprintf>
	status = HAL_UART_Transmit(&huart4, pTxData, strlen((char*) pTxData), 200);
 8000e16:	4837      	ldr	r0, [pc, #220]	; (8000ef4 <main+0x100>)
 8000e18:	f7ff fa12 	bl	8000240 <strlen>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	23c8      	movs	r3, #200	; 0xc8
 8000e22:	4934      	ldr	r1, [pc, #208]	; (8000ef4 <main+0x100>)
 8000e24:	4834      	ldr	r0, [pc, #208]	; (8000ef8 <main+0x104>)
 8000e26:	f002 fe6f 	bl	8003b08 <HAL_UART_Transmit>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b33      	ldr	r3, [pc, #204]	; (8000efc <main+0x108>)
 8000e30:	701a      	strb	r2, [r3, #0]
//	I2C_Scan();

	MPU9250_Init(&mpu9250, MPU9250_Device_0, ACCEL_SCALE_2G, GYRO_SCALE_250dps, MAG_SCALE_16bit);
 8000e32:	2301      	movs	r3, #1
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2300      	movs	r3, #0
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4830      	ldr	r0, [pc, #192]	; (8000f00 <main+0x10c>)
 8000e3e:	f7ff fbd3 	bl	80005e8 <MPU9250_Init>

	if (whoAmI_Check(&mpu9250) != HAL_ERROR)
 8000e42:	482f      	ldr	r0, [pc, #188]	; (8000f00 <main+0x10c>)
 8000e44:	f000 f99a 	bl	800117c <whoAmI_Check>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d003      	beq.n	8000e56 <main+0x62>
			isDeviceConnected = 1;
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <main+0x110>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	e002      	b.n	8000e5c <main+0x68>
		else
			isDeviceConnected = 0;
 8000e56:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <main+0x110>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]




    //
    TM_AHRSIMU_Init(&IMU, 1000, 0.5, 0);
 8000e5c:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8000f08 <main+0x114>
 8000e60:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000e64:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8000f0c <main+0x118>
 8000e68:	4829      	ldr	r0, [pc, #164]	; (8000f10 <main+0x11c>)
 8000e6a:	f000 fb91 	bl	8001590 <TM_AHRSIMU_Init>
//		MPU9250_ReadTemperature(&mpu9250);


//		 sprintf((char *)pTxData, "Is data ready ? = %x\r ", MPU9250_DataReady(&mpu9250));
//		 status = HAL_UART_Transmit (&huart4, pTxData, strlen((char *)pTxData), 200);
		 if (MPU9250_DataReady(&mpu9250))
 8000e6e:	4824      	ldr	r0, [pc, #144]	; (8000f00 <main+0x10c>)
 8000e70:	f7ff feea 	bl	8000c48 <MPU9250_DataReady>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0f9      	beq.n	8000e6e <main+0x7a>
		 {
			MPU9250_ReadAcc(&mpu9250);
 8000e7a:	4821      	ldr	r0, [pc, #132]	; (8000f00 <main+0x10c>)
 8000e7c:	f7ff fd6e 	bl	800095c <MPU9250_ReadAcc>
			MPU9250_ReadGyro(&mpu9250);
 8000e80:	481f      	ldr	r0, [pc, #124]	; (8000f00 <main+0x10c>)
 8000e82:	f7ff fdc9 	bl	8000a18 <MPU9250_ReadGyro>
			MPU9250_ReadMag(&mpu9250);
 8000e86:	481e      	ldr	r0, [pc, #120]	; (8000f00 <main+0x10c>)
 8000e88:	f7ff fe24 	bl	8000ad4 <MPU9250_ReadMag>

			MPU9250_ReadTemperature(&mpu9250);
 8000e8c:	481c      	ldr	r0, [pc, #112]	; (8000f00 <main+0x10c>)
 8000e8e:	f7ff fea9 	bl	8000be4 <MPU9250_ReadTemperature>

			sprintf((char *)pTxData, "x= %f, 	y = %f,	 z = %f	 	temp = %f\r\n", mpu9250.acc[0],mpu9250.acc[1],mpu9250.acc[2],mpu9250.temp);
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <main+0x10c>)
 8000e94:	edd3 7a00 	vldr	s15, [r3]
 8000e98:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <main+0x10c>)
 8000e9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ea2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <main+0x10c>)
 8000ea8:	edd3 6a02 	vldr	s13, [r3, #8]
 8000eac:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <main+0x10c>)
 8000eb2:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 8000eb6:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000eba:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000ebe:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000ec2:	ed8d 7b00 	vstr	d7, [sp]
 8000ec6:	ec53 2b14 	vmov	r2, r3, d4
 8000eca:	4912      	ldr	r1, [pc, #72]	; (8000f14 <main+0x120>)
 8000ecc:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <main+0x100>)
 8000ece:	f003 ff05 	bl	8004cdc <siprintf>
			status = HAL_UART_Transmit (&huart4, pTxData, strlen((char *)pTxData), 200);
 8000ed2:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <main+0x100>)
 8000ed4:	f7ff f9b4 	bl	8000240 <strlen>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	23c8      	movs	r3, #200	; 0xc8
 8000ede:	4905      	ldr	r1, [pc, #20]	; (8000ef4 <main+0x100>)
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <main+0x104>)
 8000ee2:	f002 fe11 	bl	8003b08 <HAL_UART_Transmit>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <main+0x108>)
 8000eec:	701a      	strb	r2, [r3, #0]
		 if (MPU9250_DataReady(&mpu9250))
 8000eee:	e7be      	b.n	8000e6e <main+0x7a>
 8000ef0:	0800708c 	.word	0x0800708c
 8000ef4:	20000350 	.word	0x20000350
 8000ef8:	200002cc 	.word	0x200002cc
 8000efc:	20000418 	.word	0x20000418
 8000f00:	20000208 	.word	0x20000208
 8000f04:	200001f8 	.word	0x200001f8
 8000f08:	00000000 	.word	0x00000000
 8000f0c:	447a0000 	.word	0x447a0000
 8000f10:	200002a4 	.word	0x200002a4
 8000f14:	080070a4 	.word	0x080070a4

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0b8      	sub	sp, #224	; 0xe0
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f22:	2234      	movs	r2, #52	; 0x34
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 fa76 	bl	8004418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	2290      	movs	r2, #144	; 0x90
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f003 fa67 	bl	8004418 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b3a      	ldr	r3, [pc, #232]	; (8001034 <SystemClock_Config+0x11c>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4a39      	ldr	r2, [pc, #228]	; (8001034 <SystemClock_Config+0x11c>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
 8000f56:	4b37      	ldr	r3, [pc, #220]	; (8001034 <SystemClock_Config+0x11c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f62:	4b35      	ldr	r3, [pc, #212]	; (8001038 <SystemClock_Config+0x120>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a34      	ldr	r2, [pc, #208]	; (8001038 <SystemClock_Config+0x120>)
 8000f68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	4b32      	ldr	r3, [pc, #200]	; (8001038 <SystemClock_Config+0x120>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f80:	2301      	movs	r3, #1
 8000f82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f86:	2310      	movs	r3, #16
 8000f88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000f9e:	23d8      	movs	r3, #216	; 0xd8
 8000fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 fcad 	bl	8002914 <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000fc0:	f000 f90a 	bl	80011d8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fc4:	f001 fc56 	bl	8002874 <HAL_PWREx_EnableOverDrive>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000fce:	f000 f903 	bl	80011d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fe8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ff4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ff8:	2107      	movs	r1, #7
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 ff38 	bl	8002e70 <HAL_RCC_ClockConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001006:	f000 f8e7 	bl	80011d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1;
 800100a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800100e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001010:	2300      	movs	r3, #0
 8001012:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001014:	2300      	movs	r3, #0
 8001016:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	4618      	mov	r0, r3
 800101e:	f002 f8fd 	bl	800321c <HAL_RCCEx_PeriphCLKConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x114>
  {
    Error_Handler();
 8001028:	f000 f8d6 	bl	80011d8 <Error_Handler>
  }
}
 800102c:	bf00      	nop
 800102e:	37e0      	adds	r7, #224	; 0xe0
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	40007000 	.word	0x40007000

0800103c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001042:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <MX_I2C1_Init+0x78>)
 8001044:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001048:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <MX_I2C1_Init+0x7c>)
 800104a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <MX_I2C1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001054:	2201      	movs	r2, #1
 8001056:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <MX_I2C1_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_I2C1_Init+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001076:	480e      	ldr	r0, [pc, #56]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001078:	f000 fdf6 	bl	8001c68 <HAL_I2C_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001082:	f000 f8a9 	bl	80011d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001086:	2100      	movs	r1, #0
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <MX_I2C1_Init+0x74>)
 800108a:	f001 fb5b 	bl	8002744 <HAL_I2CEx_ConfigAnalogFilter>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001094:	f000 f8a0 	bl	80011d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001098:	2100      	movs	r1, #0
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_I2C1_Init+0x74>)
 800109c:	f001 fb9d 	bl	80027da <HAL_I2CEx_ConfigDigitalFilter>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010a6:	f000 f897 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000258 	.word	0x20000258
 80010b4:	40005400 	.word	0x40005400
 80010b8:	20404768 	.word	0x20404768

080010bc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_UART4_Init+0x58>)
 80010c2:	4a15      	ldr	r2, [pc, #84]	; (8001118 <MX_UART4_Init+0x5c>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_UART4_Init+0x58>)
 80010c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010cc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_UART4_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_UART4_Init+0x58>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_UART4_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_UART4_Init+0x58>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <MX_UART4_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_UART4_Init+0x58>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <MX_UART4_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_UART4_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_UART4_Init+0x58>)
 8001100:	f002 fcb4 	bl	8003a6c <HAL_UART_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800110a:	f000 f865 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200002cc 	.word	0x200002cc
 8001118:	40004c00 	.word	0x40004c00

0800111c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_GPIO_Init+0x5c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a14      	ldr	r2, [pc, #80]	; (8001178 <MX_GPIO_Init+0x5c>)
 8001128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_GPIO_Init+0x5c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_GPIO_Init+0x5c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <MX_GPIO_Init+0x5c>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_GPIO_Init+0x5c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_GPIO_Init+0x5c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a08      	ldr	r2, [pc, #32]	; (8001178 <MX_GPIO_Init+0x5c>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_GPIO_Init+0x5c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800

0800117c <whoAmI_Check>:
//}



HAL_StatusTypeDef whoAmI_Check(MPU9250_t *mpu9250)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

	uint8_t data;
	/* MPU9250 Who Am I Register Check */
	if (readByte(&hi2c1, mpu9250->I2C_Addr, WHO_AM_I, &data) != HAL_OK)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800118a:	f107 030f 	add.w	r3, r7, #15
 800118e:	2275      	movs	r2, #117	; 0x75
 8001190:	4810      	ldr	r0, [pc, #64]	; (80011d4 <whoAmI_Check+0x58>)
 8001192:	f7ff fd9e 	bl	8000cd2 <readByte>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d004      	beq.n	80011a6 <whoAmI_Check+0x2a>
	{

		if (data != 0x71)
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	2b71      	cmp	r3, #113	; 0x71
 80011a0:	d001      	beq.n	80011a6 <whoAmI_Check+0x2a>
			return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e011      	b.n	80011ca <whoAmI_Check+0x4e>
	}
//	sprintf((char *)pTxData, "status = %x\r\n", data);
//	status = HAL_UART_Transmit (&huart4, pTxData, strlen((char *)pTxData), 200);

	/* AK8963 Who Am I Register Check */
	if (readByte(&hi2c1, mpu9250->I2C_Addr_Mag, WIA, &data) != HAL_OK)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 80011ac:	f107 030f 	add.w	r3, r7, #15
 80011b0:	2200      	movs	r2, #0
 80011b2:	4808      	ldr	r0, [pc, #32]	; (80011d4 <whoAmI_Check+0x58>)
 80011b4:	f7ff fd8d 	bl	8000cd2 <readByte>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d004      	beq.n	80011c8 <whoAmI_Check+0x4c>
	{
		if (data != 0x48)
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	2b48      	cmp	r3, #72	; 0x48
 80011c2:	d001      	beq.n	80011c8 <whoAmI_Check+0x4c>
			return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e000      	b.n	80011ca <whoAmI_Check+0x4e>
	}

	return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000258 	.word	0x20000258

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011e0:	e7fe      	b.n	80011e0 <Error_Handler+0x8>

080011e2 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011ee:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d013      	beq.n	8001222 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011fe:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001202:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00b      	beq.n	8001222 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800120a:	e000      	b.n	800120e <ITM_SendChar+0x2c>
    {
      __NOP();
 800120c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800120e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f9      	beq.n	800120c <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001218:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001222:	687b      	ldr	r3, [r7, #4]
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <_write>:
#include "printf_SWO.h"

char test_msg[300];

int _write(int file, char *ptr, int len)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
    //return usart_write(platform_get_console(), (u8 *)ptr, len);
      int i=0;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
      for(i=0 ; i<len ; i++)
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	e009      	b.n	800125a <_write+0x2a>
        ITM_SendChar((*ptr++));
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	60ba      	str	r2, [r7, #8]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ffc7 	bl	80011e2 <ITM_SendChar>
      for(i=0 ; i<len ; i++)
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	3301      	adds	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	429a      	cmp	r2, r3
 8001260:	dbf1      	blt.n	8001246 <_write+0x16>
      return len;
 8001262:	687b      	ldr	r3, [r7, #4]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_MspInit+0x44>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <HAL_MspInit+0x44>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <HAL_MspInit+0x44>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_MspInit+0x44>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_MspInit+0x44>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_MspInit+0x44>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a17      	ldr	r2, [pc, #92]	; (8001330 <HAL_I2C_MspInit+0x7c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d128      	bne.n	8001328 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <HAL_I2C_MspInit+0x80>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a16      	ldr	r2, [pc, #88]	; (8001334 <HAL_I2C_MspInit+0x80>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_I2C_MspInit+0x80>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f4:	2312      	movs	r3, #18
 80012f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001300:	2304      	movs	r3, #4
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	480b      	ldr	r0, [pc, #44]	; (8001338 <HAL_I2C_MspInit+0x84>)
 800130c:	f000 fb00 	bl	8001910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_I2C_MspInit+0x80>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_I2C_MspInit+0x80>)
 8001316:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_I2C_MspInit+0x80>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	; 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40005400 	.word	0x40005400
 8001334:	40023800 	.word	0x40023800
 8001338:	40020400 	.word	0x40020400

0800133c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <HAL_UART_MspInit+0x7c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d127      	bne.n	80013ae <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <HAL_UART_MspInit+0x80>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a16      	ldr	r2, [pc, #88]	; (80013bc <HAL_UART_MspInit+0x80>)
 8001364:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <HAL_UART_MspInit+0x80>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_UART_MspInit+0x80>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a10      	ldr	r2, [pc, #64]	; (80013bc <HAL_UART_MspInit+0x80>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_UART_MspInit+0x80>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800138e:	2303      	movs	r3, #3
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800139e:	2308      	movs	r3, #8
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <HAL_UART_MspInit+0x84>)
 80013aa:	f000 fab1 	bl	8001910 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	; 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40004c00 	.word	0x40004c00
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020000 	.word	0x40020000

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <NMI_Handler+0x4>

080013ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <HardFault_Handler+0x4>

080013d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <MemManage_Handler+0x4>

080013d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001410:	f000 f954 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
	return 1;
 800141c:	2301      	movs	r3, #1
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <_kill>:

int _kill(int pid, int sig)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001432:	f002 ffc7 	bl	80043c4 <__errno>
 8001436:	4603      	mov	r3, r0
 8001438:	2216      	movs	r2, #22
 800143a:	601a      	str	r2, [r3, #0]
	return -1;
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <_exit>:

void _exit (int status)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ffe7 	bl	8001428 <_kill>
	while (1) {}		/* Make sure we hang here */
 800145a:	e7fe      	b.n	800145a <_exit+0x12>

0800145c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	e00a      	b.n	8001484 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800146e:	f3af 8000 	nop.w
 8001472:	4601      	mov	r1, r0
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	60ba      	str	r2, [r7, #8]
 800147a:	b2ca      	uxtb	r2, r1
 800147c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	429a      	cmp	r2, r3
 800148a:	dbf0      	blt.n	800146e <_read+0x12>
	}

return len;
 800148c:	687b      	ldr	r3, [r7, #4]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
	return -1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014be:	605a      	str	r2, [r3, #4]
	return 0;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <_isatty>:

int _isatty(int file)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
	return 1;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
	return 0;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <_sbrk+0x5c>)
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <_sbrk+0x60>)
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <_sbrk+0x64>)
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <_sbrk+0x68>)
 8001520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	429a      	cmp	r2, r3
 800152e:	d207      	bcs.n	8001540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001530:	f002 ff48 	bl	80043c4 <__errno>
 8001534:	4603      	mov	r3, r0
 8001536:	220c      	movs	r2, #12
 8001538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
 800153e:	e009      	b.n	8001554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001546:	4b07      	ldr	r3, [pc, #28]	; (8001564 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <_sbrk+0x64>)
 8001550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20080000 	.word	0x20080000
 8001560:	00000400 	.word	0x00000400
 8001564:	200001fc 	.word	0x200001fc
 8001568:	20000430 	.word	0x20000430

0800156c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <SystemInit+0x20>)
 8001572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <SystemInit+0x20>)
 8001578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800157c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <TM_AHRSIMU_Init>:
    } else if (AHRSIMU->Yaw > 180) {
        AHRSIMU->Yaw = -180.0f - (180.0f - AHRSIMU->Yaw);
    }
}

void TM_AHRSIMU_Init(TM_AHRSIMU_t* AHRSIMU, float beta, float sampleRate, float inclination) {
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	ed87 0a02 	vstr	s0, [r7, #8]
 800159c:	edc7 0a01 	vstr	s1, [r7, #4]
 80015a0:	ed87 1a00 	vstr	s2, [r7]
    AHRSIMU->_beta = beta;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	611a      	str	r2, [r3, #16]
    AHRSIMU->_sampleRate = 1 / sampleRate;
 80015aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80015b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    AHRSIMU->Inclination = inclination;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	60da      	str	r2, [r3, #12]
    
    AHRSIMU->_q0 = 1.0f;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015c8:	615a      	str	r2, [r3, #20]
    AHRSIMU->_q1 = 0.0f;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
    AHRSIMU->_q2 = 0.0f;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
    AHRSIMU->_q3 = 0.0f;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	621a      	str	r2, [r3, #32]
}
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001628 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f4:	480d      	ldr	r0, [pc, #52]	; (800162c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015f6:	490e      	ldr	r1, [pc, #56]	; (8001630 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015f8:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160a:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800160c:	4c0b      	ldr	r4, [pc, #44]	; (800163c <LoopFillZerobss+0x26>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800161a:	f7ff ffa7 	bl	800156c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161e:	f002 fed7 	bl	80043d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001622:	f7ff fbe7 	bl	8000df4 <main>
  bx  lr    
 8001626:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001628:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800162c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001630:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001634:	080074d4 	.word	0x080074d4
  ldr r2, =_sbss
 8001638:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800163c:	20000430 	.word	0x20000430

08001640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001640:	e7fe      	b.n	8001640 <ADC_IRQHandler>

08001642 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001646:	2003      	movs	r0, #3
 8001648:	f000 f92e 	bl	80018a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164c:	2000      	movs	r0, #0
 800164e:	f000 f805 	bl	800165c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001652:	f7ff fe0b 	bl	800126c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x54>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x58>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f93b 	bl	80018f6 <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e00e      	b.n	80016a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d80a      	bhi.n	80016a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f000 f911 	bl	80018be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <HAL_InitTick+0x5c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000000 	.word	0x20000000
 80016b4:	20000008 	.word	0x20000008
 80016b8:	20000004 	.word	0x20000004

080016bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008
 80016e0:	2000041c 	.word	0x2000041c

080016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	2000041c 	.word	0x2000041c

080016fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff ffee 	bl	80016e4 <HAL_GetTick>
 8001708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d005      	beq.n	8001722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_Delay+0x44>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001722:	bf00      	nop
 8001724:	f7ff ffde 	bl	80016e4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8f7      	bhi.n	8001724 <HAL_Delay+0x28>
  {
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <__NVIC_SetPriorityGrouping+0x40>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	4313      	orrs	r3, r2
 8001770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001772:	4a04      	ldr	r2, [pc, #16]	; (8001784 <__NVIC_SetPriorityGrouping+0x40>)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	60d3      	str	r3, [r2, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00
 8001788:	05fa0000 	.word	0x05fa0000

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	db0a      	blt.n	80017d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	490c      	ldr	r1, [pc, #48]	; (80017f4 <__NVIC_SetPriority+0x4c>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	0112      	lsls	r2, r2, #4
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	440b      	add	r3, r1
 80017cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d0:	e00a      	b.n	80017e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4908      	ldr	r1, [pc, #32]	; (80017f8 <__NVIC_SetPriority+0x50>)
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	3b04      	subs	r3, #4
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	440b      	add	r3, r1
 80017e6:	761a      	strb	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f1c3 0307 	rsb	r3, r3, #7
 8001816:	2b04      	cmp	r3, #4
 8001818:	bf28      	it	cs
 800181a:	2304      	movcs	r3, #4
 800181c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3304      	adds	r3, #4
 8001822:	2b06      	cmp	r3, #6
 8001824:	d902      	bls.n	800182c <NVIC_EncodePriority+0x30>
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3b03      	subs	r3, #3
 800182a:	e000      	b.n	800182e <NVIC_EncodePriority+0x32>
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	f04f 32ff 	mov.w	r2, #4294967295
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	401a      	ands	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001844:	f04f 31ff 	mov.w	r1, #4294967295
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	43d9      	mvns	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	4313      	orrs	r3, r2
         );
}
 8001856:	4618      	mov	r0, r3
 8001858:	3724      	adds	r7, #36	; 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001874:	d301      	bcc.n	800187a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001876:	2301      	movs	r3, #1
 8001878:	e00f      	b.n	800189a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <SysTick_Config+0x40>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001882:	210f      	movs	r1, #15
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f7ff ff8e 	bl	80017a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <SysTick_Config+0x40>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <SysTick_Config+0x40>)
 8001894:	2207      	movs	r2, #7
 8001896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	e000e010 	.word	0xe000e010

080018a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff47 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d0:	f7ff ff5c 	bl	800178c <__NVIC_GetPriorityGrouping>
 80018d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	6978      	ldr	r0, [r7, #20]
 80018dc:	f7ff ff8e 	bl	80017fc <NVIC_EncodePriority>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff5d 	bl	80017a8 <__NVIC_SetPriority>
}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffb0 	bl	8001864 <SysTick_Config>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001926:	2300      	movs	r3, #0
 8001928:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	e175      	b.n	8001c1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001930:	2201      	movs	r2, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	429a      	cmp	r2, r3
 800194a:	f040 8164 	bne.w	8001c16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d00b      	beq.n	800196e <HAL_GPIO_Init+0x5e>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d007      	beq.n	800196e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001962:	2b11      	cmp	r3, #17
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b12      	cmp	r3, #18
 800196c:	d130      	bne.n	80019d0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	2203      	movs	r2, #3
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a4:	2201      	movs	r2, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 0201 	and.w	r2, r3, #1
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x100>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b12      	cmp	r3, #18
 8001a0e:	d123      	bne.n	8001a58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	08da      	lsrs	r2, r3, #3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3208      	adds	r2, #8
 8001a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	220f      	movs	r2, #15
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	08da      	lsrs	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3208      	adds	r2, #8
 8001a52:	69b9      	ldr	r1, [r7, #24]
 8001a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2203      	movs	r2, #3
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0203 	and.w	r2, r3, #3
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80be 	beq.w	8001c16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	4b66      	ldr	r3, [pc, #408]	; (8001c34 <HAL_GPIO_Init+0x324>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	4a65      	ldr	r2, [pc, #404]	; (8001c34 <HAL_GPIO_Init+0x324>)
 8001aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <HAL_GPIO_Init+0x324>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ab2:	4a61      	ldr	r2, [pc, #388]	; (8001c38 <HAL_GPIO_Init+0x328>)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	220f      	movs	r2, #15
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a58      	ldr	r2, [pc, #352]	; (8001c3c <HAL_GPIO_Init+0x32c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d037      	beq.n	8001b4e <HAL_GPIO_Init+0x23e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a57      	ldr	r2, [pc, #348]	; (8001c40 <HAL_GPIO_Init+0x330>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d031      	beq.n	8001b4a <HAL_GPIO_Init+0x23a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a56      	ldr	r2, [pc, #344]	; (8001c44 <HAL_GPIO_Init+0x334>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d02b      	beq.n	8001b46 <HAL_GPIO_Init+0x236>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a55      	ldr	r2, [pc, #340]	; (8001c48 <HAL_GPIO_Init+0x338>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d025      	beq.n	8001b42 <HAL_GPIO_Init+0x232>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a54      	ldr	r2, [pc, #336]	; (8001c4c <HAL_GPIO_Init+0x33c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01f      	beq.n	8001b3e <HAL_GPIO_Init+0x22e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a53      	ldr	r2, [pc, #332]	; (8001c50 <HAL_GPIO_Init+0x340>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d019      	beq.n	8001b3a <HAL_GPIO_Init+0x22a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a52      	ldr	r2, [pc, #328]	; (8001c54 <HAL_GPIO_Init+0x344>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0x226>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a51      	ldr	r2, [pc, #324]	; (8001c58 <HAL_GPIO_Init+0x348>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00d      	beq.n	8001b32 <HAL_GPIO_Init+0x222>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a50      	ldr	r2, [pc, #320]	; (8001c5c <HAL_GPIO_Init+0x34c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d007      	beq.n	8001b2e <HAL_GPIO_Init+0x21e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4f      	ldr	r2, [pc, #316]	; (8001c60 <HAL_GPIO_Init+0x350>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d101      	bne.n	8001b2a <HAL_GPIO_Init+0x21a>
 8001b26:	2309      	movs	r3, #9
 8001b28:	e012      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b2a:	230a      	movs	r3, #10
 8001b2c:	e010      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b2e:	2308      	movs	r3, #8
 8001b30:	e00e      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b32:	2307      	movs	r3, #7
 8001b34:	e00c      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b36:	2306      	movs	r3, #6
 8001b38:	e00a      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	e008      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	e006      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b42:	2303      	movs	r3, #3
 8001b44:	e004      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e002      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	f002 0203 	and.w	r2, r2, #3
 8001b56:	0092      	lsls	r2, r2, #2
 8001b58:	4093      	lsls	r3, r2
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b60:	4935      	ldr	r1, [pc, #212]	; (8001c38 <HAL_GPIO_Init+0x328>)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	3302      	adds	r3, #2
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b6e:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <HAL_GPIO_Init+0x354>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b92:	4a34      	ldr	r2, [pc, #208]	; (8001c64 <HAL_GPIO_Init+0x354>)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b98:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <HAL_GPIO_Init+0x354>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bbc:	4a29      	ldr	r2, [pc, #164]	; (8001c64 <HAL_GPIO_Init+0x354>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc2:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <HAL_GPIO_Init+0x354>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001be6:	4a1f      	ldr	r2, [pc, #124]	; (8001c64 <HAL_GPIO_Init+0x354>)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bec:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_GPIO_Init+0x354>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c10:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <HAL_GPIO_Init+0x354>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	61fb      	str	r3, [r7, #28]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	2b0f      	cmp	r3, #15
 8001c20:	f67f ae86 	bls.w	8001930 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40013800 	.word	0x40013800
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40020c00 	.word	0x40020c00
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40021400 	.word	0x40021400
 8001c54:	40021800 	.word	0x40021800
 8001c58:	40021c00 	.word	0x40021c00
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	40022400 	.word	0x40022400
 8001c64:	40013c00 	.word	0x40013c00

08001c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e07f      	b.n	8001d7a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fb10 	bl	80012b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2224      	movs	r2, #36	; 0x24
 8001c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d107      	bne.n	8001ce2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	e006      	b.n	8001cf0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d104      	bne.n	8001d02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_I2C_Init+0x11c>)
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	ea42 0103 	orr.w	r1, r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	021a      	lsls	r2, r3, #8
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69d9      	ldr	r1, [r3, #28]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1a      	ldr	r2, [r3, #32]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2220      	movs	r2, #32
 8001d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	02008000 	.word	0x02008000

08001d88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	461a      	mov	r2, r3
 8001d94:	460b      	mov	r3, r1
 8001d96:	817b      	strh	r3, [r7, #10]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b20      	cmp	r3, #32
 8001da6:	f040 80da 	bne.w	8001f5e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_I2C_Master_Transmit+0x30>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e0d3      	b.n	8001f60 <HAL_I2C_Master_Transmit+0x1d8>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dc0:	f7ff fc90 	bl	80016e4 <HAL_GetTick>
 8001dc4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	2319      	movs	r3, #25
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 fafa 	bl	80023cc <I2C_WaitOnFlagUntilTimeout>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0be      	b.n	8001f60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2221      	movs	r2, #33	; 0x21
 8001de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2210      	movs	r2, #16
 8001dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	893a      	ldrh	r2, [r7, #8]
 8001e02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2bff      	cmp	r3, #255	; 0xff
 8001e12:	d90e      	bls.n	8001e32 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	22ff      	movs	r2, #255	; 0xff
 8001e18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	8979      	ldrh	r1, [r7, #10]
 8001e22:	4b51      	ldr	r3, [pc, #324]	; (8001f68 <HAL_I2C_Master_Transmit+0x1e0>)
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 fc5c 	bl	80026e8 <I2C_TransferConfig>
 8001e30:	e06c      	b.n	8001f0c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	8979      	ldrh	r1, [r7, #10]
 8001e44:	4b48      	ldr	r3, [pc, #288]	; (8001f68 <HAL_I2C_Master_Transmit+0x1e0>)
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 fc4b 	bl	80026e8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001e52:	e05b      	b.n	8001f0c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	6a39      	ldr	r1, [r7, #32]
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 faf7 	bl	800244c <I2C_WaitOnTXISFlagUntilTimeout>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e07b      	b.n	8001f60 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	781a      	ldrb	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d034      	beq.n	8001f0c <HAL_I2C_Master_Transmit+0x184>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d130      	bne.n	8001f0c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2180      	movs	r1, #128	; 0x80
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 fa89 	bl	80023cc <I2C_WaitOnFlagUntilTimeout>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e04d      	b.n	8001f60 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2bff      	cmp	r3, #255	; 0xff
 8001ecc:	d90e      	bls.n	8001eec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	22ff      	movs	r2, #255	; 0xff
 8001ed2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	8979      	ldrh	r1, [r7, #10]
 8001edc:	2300      	movs	r3, #0
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 fbff 	bl	80026e8 <I2C_TransferConfig>
 8001eea:	e00f      	b.n	8001f0c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	8979      	ldrh	r1, [r7, #10]
 8001efe:	2300      	movs	r3, #0
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 fbee 	bl	80026e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d19e      	bne.n	8001e54 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	6a39      	ldr	r1, [r7, #32]
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 fad6 	bl	80024cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e01a      	b.n	8001f60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_I2C_Master_Transmit+0x1e4>)
 8001f3e:	400b      	ands	r3, r1
 8001f40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2220      	movs	r2, #32
 8001f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e000      	b.n	8001f60 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001f5e:	2302      	movs	r3, #2
  }
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	80002000 	.word	0x80002000
 8001f6c:	fe00e800 	.word	0xfe00e800

08001f70 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af02      	add	r7, sp, #8
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	817b      	strh	r3, [r7, #10]
 8001f80:	4613      	mov	r3, r2
 8001f82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b20      	cmp	r3, #32
 8001f8e:	f040 80db 	bne.w	8002148 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_I2C_Master_Receive+0x30>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e0d4      	b.n	800214a <HAL_I2C_Master_Receive+0x1da>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fa8:	f7ff fb9c 	bl	80016e4 <HAL_GetTick>
 8001fac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	2319      	movs	r3, #25
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fa06 	bl	80023cc <I2C_WaitOnFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e0bf      	b.n	800214a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2222      	movs	r2, #34	; 0x22
 8001fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	893a      	ldrh	r2, [r7, #8]
 8001fea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	2bff      	cmp	r3, #255	; 0xff
 8001ffa:	d90e      	bls.n	800201a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	22ff      	movs	r2, #255	; 0xff
 8002000:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002006:	b2da      	uxtb	r2, r3
 8002008:	8979      	ldrh	r1, [r7, #10]
 800200a:	4b52      	ldr	r3, [pc, #328]	; (8002154 <HAL_I2C_Master_Receive+0x1e4>)
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 fb68 	bl	80026e8 <I2C_TransferConfig>
 8002018:	e06d      	b.n	80020f6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002028:	b2da      	uxtb	r2, r3
 800202a:	8979      	ldrh	r1, [r7, #10]
 800202c:	4b49      	ldr	r3, [pc, #292]	; (8002154 <HAL_I2C_Master_Receive+0x1e4>)
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 fb57 	bl	80026e8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800203a:	e05c      	b.n	80020f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	6a39      	ldr	r1, [r7, #32]
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 fa7f 	bl	8002544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e07c      	b.n	800214a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002078:	b29b      	uxth	r3, r3
 800207a:	3b01      	subs	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29b      	uxth	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d034      	beq.n	80020f6 <HAL_I2C_Master_Receive+0x186>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002090:	2b00      	cmp	r3, #0
 8002092:	d130      	bne.n	80020f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	2200      	movs	r2, #0
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f994 	bl	80023cc <I2C_WaitOnFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e04d      	b.n	800214a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2bff      	cmp	r3, #255	; 0xff
 80020b6:	d90e      	bls.n	80020d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	22ff      	movs	r2, #255	; 0xff
 80020bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	8979      	ldrh	r1, [r7, #10]
 80020c6:	2300      	movs	r3, #0
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 fb0a 	bl	80026e8 <I2C_TransferConfig>
 80020d4:	e00f      	b.n	80020f6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020da:	b29a      	uxth	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	8979      	ldrh	r1, [r7, #10]
 80020e8:	2300      	movs	r3, #0
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 faf9 	bl	80026e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d19d      	bne.n	800203c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	6a39      	ldr	r1, [r7, #32]
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 f9e1 	bl	80024cc <I2C_WaitOnSTOPFlagUntilTimeout>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e01a      	b.n	800214a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2220      	movs	r2, #32
 800211a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <HAL_I2C_Master_Receive+0x1e8>)
 8002128:	400b      	ands	r3, r1
 800212a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	e000      	b.n	800214a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002148:	2302      	movs	r3, #2
  }
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	80002400 	.word	0x80002400
 8002158:	fe00e800 	.word	0xfe00e800

0800215c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af02      	add	r7, sp, #8
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	460b      	mov	r3, r1
 800216a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b20      	cmp	r3, #32
 800217a:	f040 80ef 	bne.w	800235c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800218c:	d101      	bne.n	8002192 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800218e:	2302      	movs	r3, #2
 8002190:	e0e5      	b.n	800235e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_I2C_IsDeviceReady+0x44>
 800219c:	2302      	movs	r3, #2
 800219e:	e0de      	b.n	800235e <HAL_I2C_IsDeviceReady+0x202>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2224      	movs	r2, #36	; 0x24
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d105      	bne.n	80021ca <HAL_I2C_IsDeviceReady+0x6e>
 80021be:	897b      	ldrh	r3, [r7, #10]
 80021c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021c4:	4b68      	ldr	r3, [pc, #416]	; (8002368 <HAL_I2C_IsDeviceReady+0x20c>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	e004      	b.n	80021d4 <HAL_I2C_IsDeviceReady+0x78>
 80021ca:	897b      	ldrh	r3, [r7, #10]
 80021cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021d0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80021da:	f7ff fa83 	bl	80016e4 <HAL_GetTick>
 80021de:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f003 0320 	and.w	r3, r3, #32
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	bf0c      	ite	eq
 80021ee:	2301      	moveq	r3, #1
 80021f0:	2300      	movne	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	2b10      	cmp	r3, #16
 8002202:	bf0c      	ite	eq
 8002204:	2301      	moveq	r3, #1
 8002206:	2300      	movne	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800220c:	e034      	b.n	8002278 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d01a      	beq.n	800224c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002216:	f7ff fa65 	bl	80016e4 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d302      	bcc.n	800222c <HAL_I2C_IsDeviceReady+0xd0>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10f      	bne.n	800224c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002238:	f043 0220 	orr.w	r2, r3, #32
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e088      	b.n	800235e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	2b20      	cmp	r3, #32
 8002258:	bf0c      	ite	eq
 800225a:	2301      	moveq	r3, #1
 800225c:	2300      	movne	r3, #0
 800225e:	b2db      	uxtb	r3, r3
 8002260:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b10      	cmp	r3, #16
 800226e:	bf0c      	ite	eq
 8002270:	2301      	moveq	r3, #1
 8002272:	2300      	movne	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002278:	7ffb      	ldrb	r3, [r7, #31]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d102      	bne.n	8002284 <HAL_I2C_IsDeviceReady+0x128>
 800227e:	7fbb      	ldrb	r3, [r7, #30]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0c4      	beq.n	800220e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b10      	cmp	r3, #16
 8002290:	d01a      	beq.n	80022c8 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2200      	movs	r2, #0
 800229a:	2120      	movs	r1, #32
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f895 	bl	80023cc <I2C_WaitOnFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e058      	b.n	800235e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2220      	movs	r2, #32
 80022b2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	e04a      	b.n	800235e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	2200      	movs	r2, #0
 80022d0:	2120      	movs	r1, #32
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f87a 	bl	80023cc <I2C_WaitOnFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e03d      	b.n	800235e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2210      	movs	r2, #16
 80022e8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2220      	movs	r2, #32
 80022f0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d118      	bne.n	800232c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002308:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2200      	movs	r2, #0
 8002312:	2120      	movs	r1, #32
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 f859 	bl	80023cc <I2C_WaitOnFlagUntilTimeout>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e01c      	b.n	800235e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2220      	movs	r2, #32
 800232a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	3301      	adds	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	429a      	cmp	r2, r3
 8002338:	f63f af3d 	bhi.w	80021b6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	f043 0220 	orr.w	r2, r3, #32
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
  }
}
 800235e:	4618      	mov	r0, r3
 8002360:	3720      	adds	r7, #32
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	02002000 	.word	0x02002000

0800236c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b02      	cmp	r3, #2
 8002398:	d103      	bne.n	80023a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2200      	movs	r2, #0
 80023a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d007      	beq.n	80023c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	619a      	str	r2, [r3, #24]
  }
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	4613      	mov	r3, r2
 80023da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023dc:	e022      	b.n	8002424 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d01e      	beq.n	8002424 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e6:	f7ff f97d 	bl	80016e4 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d302      	bcc.n	80023fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d113      	bne.n	8002424 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002400:	f043 0220 	orr.w	r2, r3, #32
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e00f      	b.n	8002444 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	4013      	ands	r3, r2
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	429a      	cmp	r2, r3
 8002432:	bf0c      	ite	eq
 8002434:	2301      	moveq	r3, #1
 8002436:	2300      	movne	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	429a      	cmp	r2, r3
 8002440:	d0cd      	beq.n	80023de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002458:	e02c      	b.n	80024b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f8dc 	bl	800261c <I2C_IsAcknowledgeFailed>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e02a      	b.n	80024c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d01e      	beq.n	80024b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002476:	f7ff f935 	bl	80016e4 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	429a      	cmp	r2, r3
 8002484:	d302      	bcc.n	800248c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d113      	bne.n	80024b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002490:	f043 0220 	orr.w	r2, r3, #32
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e007      	b.n	80024c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d1cb      	bne.n	800245a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024d8:	e028      	b.n	800252c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f89c 	bl	800261c <I2C_IsAcknowledgeFailed>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e026      	b.n	800253c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ee:	f7ff f8f9 	bl	80016e4 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d302      	bcc.n	8002504 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d113      	bne.n	800252c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	f043 0220 	orr.w	r2, r3, #32
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e007      	b.n	800253c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b20      	cmp	r3, #32
 8002538:	d1cf      	bne.n	80024da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002550:	e055      	b.n	80025fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f860 	bl	800261c <I2C_IsAcknowledgeFailed>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e053      	b.n	800260e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b20      	cmp	r3, #32
 8002572:	d129      	bne.n	80025c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b04      	cmp	r3, #4
 8002580:	d105      	bne.n	800258e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e03f      	b.n	800260e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2220      	movs	r2, #32
 8002594:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80025a2:	400b      	ands	r3, r1
 80025a4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e022      	b.n	800260e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c8:	f7ff f88c 	bl	80016e4 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d302      	bcc.n	80025de <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10f      	bne.n	80025fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f043 0220 	orr.w	r2, r3, #32
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e007      	b.n	800260e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b04      	cmp	r3, #4
 800260a:	d1a2      	bne.n	8002552 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	fe00e800 	.word	0xfe00e800

0800261c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b10      	cmp	r3, #16
 8002634:	d151      	bne.n	80026da <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002636:	e022      	b.n	800267e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263e:	d01e      	beq.n	800267e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002640:	f7ff f850 	bl	80016e4 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	429a      	cmp	r2, r3
 800264e:	d302      	bcc.n	8002656 <I2C_IsAcknowledgeFailed+0x3a>
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d113      	bne.n	800267e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f043 0220 	orr.w	r2, r3, #32
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e02e      	b.n	80026dc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b20      	cmp	r3, #32
 800268a:	d1d5      	bne.n	8002638 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2210      	movs	r2, #16
 8002692:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2220      	movs	r2, #32
 800269a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7ff fe71 	bl	8002384 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <I2C_IsAcknowledgeFailed+0xc8>)
 80026ae:	400b      	ands	r3, r1
 80026b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f043 0204 	orr.w	r2, r3, #4
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	fe00e800 	.word	0xfe00e800

080026e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	817b      	strh	r3, [r7, #10]
 80026f6:	4613      	mov	r3, r2
 80026f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	0d5b      	lsrs	r3, r3, #21
 8002704:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002708:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <I2C_TransferConfig+0x58>)
 800270a:	430b      	orrs	r3, r1
 800270c:	43db      	mvns	r3, r3
 800270e:	ea02 0103 	and.w	r1, r2, r3
 8002712:	897b      	ldrh	r3, [r7, #10]
 8002714:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002718:	7a7b      	ldrb	r3, [r7, #9]
 800271a:	041b      	lsls	r3, r3, #16
 800271c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	431a      	orrs	r2, r3
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	431a      	orrs	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	03ff63ff 	.word	0x03ff63ff

08002744 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b20      	cmp	r3, #32
 8002758:	d138      	bne.n	80027cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002764:	2302      	movs	r3, #2
 8002766:	e032      	b.n	80027ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2224      	movs	r2, #36	; 0x24
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002796:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6819      	ldr	r1, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e000      	b.n	80027ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027cc:	2302      	movs	r3, #2
  }
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027da:	b480      	push	{r7}
 80027dc:	b085      	sub	sp, #20
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d139      	bne.n	8002864 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e033      	b.n	8002866 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2224      	movs	r2, #36	; 0x24
 800280a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800282c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e000      	b.n	8002866 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002864:	2302      	movs	r3, #2
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	4b23      	ldr	r3, [pc, #140]	; (800290c <HAL_PWREx_EnableOverDrive+0x98>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a22      	ldr	r2, [pc, #136]	; (800290c <HAL_PWREx_EnableOverDrive+0x98>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
 800288a:	4b20      	ldr	r3, [pc, #128]	; (800290c <HAL_PWREx_EnableOverDrive+0x98>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002896:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1d      	ldr	r2, [pc, #116]	; (8002910 <HAL_PWREx_EnableOverDrive+0x9c>)
 800289c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028a2:	f7fe ff1f 	bl	80016e4 <HAL_GetTick>
 80028a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028a8:	e009      	b.n	80028be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028aa:	f7fe ff1b 	bl	80016e4 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028b8:	d901      	bls.n	80028be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e022      	b.n	8002904 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028be:	4b14      	ldr	r3, [pc, #80]	; (8002910 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ca:	d1ee      	bne.n	80028aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028cc:	4b10      	ldr	r3, [pc, #64]	; (8002910 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0f      	ldr	r2, [pc, #60]	; (8002910 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028d8:	f7fe ff04 	bl	80016e4 <HAL_GetTick>
 80028dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028de:	e009      	b.n	80028f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028e0:	f7fe ff00 	bl	80016e4 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ee:	d901      	bls.n	80028f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e007      	b.n	8002904 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002900:	d1ee      	bne.n	80028e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40023800 	.word	0x40023800
 8002910:	40007000 	.word	0x40007000

08002914 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800291c:	2300      	movs	r3, #0
 800291e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e29b      	b.n	8002e62 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8087 	beq.w	8002a46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002938:	4b96      	ldr	r3, [pc, #600]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 030c 	and.w	r3, r3, #12
 8002940:	2b04      	cmp	r3, #4
 8002942:	d00c      	beq.n	800295e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002944:	4b93      	ldr	r3, [pc, #588]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 030c 	and.w	r3, r3, #12
 800294c:	2b08      	cmp	r3, #8
 800294e:	d112      	bne.n	8002976 <HAL_RCC_OscConfig+0x62>
 8002950:	4b90      	ldr	r3, [pc, #576]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800295c:	d10b      	bne.n	8002976 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295e:	4b8d      	ldr	r3, [pc, #564]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d06c      	beq.n	8002a44 <HAL_RCC_OscConfig+0x130>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d168      	bne.n	8002a44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e275      	b.n	8002e62 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800297e:	d106      	bne.n	800298e <HAL_RCC_OscConfig+0x7a>
 8002980:	4b84      	ldr	r3, [pc, #528]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a83      	ldr	r2, [pc, #524]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	e02e      	b.n	80029ec <HAL_RCC_OscConfig+0xd8>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x9c>
 8002996:	4b7f      	ldr	r3, [pc, #508]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a7e      	ldr	r2, [pc, #504]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 800299c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	4b7c      	ldr	r3, [pc, #496]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a7b      	ldr	r2, [pc, #492]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 80029a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	e01d      	b.n	80029ec <HAL_RCC_OscConfig+0xd8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCC_OscConfig+0xc0>
 80029ba:	4b76      	ldr	r3, [pc, #472]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a75      	ldr	r2, [pc, #468]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 80029c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	4b73      	ldr	r3, [pc, #460]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a72      	ldr	r2, [pc, #456]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 80029cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	e00b      	b.n	80029ec <HAL_RCC_OscConfig+0xd8>
 80029d4:	4b6f      	ldr	r3, [pc, #444]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a6e      	ldr	r2, [pc, #440]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 80029da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	4b6c      	ldr	r3, [pc, #432]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a6b      	ldr	r2, [pc, #428]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 80029e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d013      	beq.n	8002a1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe fe76 	bl	80016e4 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029fc:	f7fe fe72 	bl	80016e4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	; 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e229      	b.n	8002e62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	4b61      	ldr	r3, [pc, #388]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0xe8>
 8002a1a:	e014      	b.n	8002a46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fe62 	bl	80016e4 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a24:	f7fe fe5e 	bl	80016e4 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b64      	cmp	r3, #100	; 0x64
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e215      	b.n	8002e62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a36:	4b57      	ldr	r3, [pc, #348]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x110>
 8002a42:	e000      	b.n	8002a46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d069      	beq.n	8002b26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a52:	4b50      	ldr	r3, [pc, #320]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00b      	beq.n	8002a76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a5e:	4b4d      	ldr	r3, [pc, #308]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d11c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x190>
 8002a6a:	4b4a      	ldr	r3, [pc, #296]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d116      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a76:	4b47      	ldr	r3, [pc, #284]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <HAL_RCC_OscConfig+0x17a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d001      	beq.n	8002a8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e1e9      	b.n	8002e62 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8e:	4b41      	ldr	r3, [pc, #260]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	493d      	ldr	r1, [pc, #244]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa2:	e040      	b.n	8002b26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d023      	beq.n	8002af4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aac:	4b39      	ldr	r3, [pc, #228]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a38      	ldr	r2, [pc, #224]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fe14 	bl	80016e4 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac0:	f7fe fe10 	bl	80016e4 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e1c7      	b.n	8002e62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad2:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ade:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4929      	ldr	r1, [pc, #164]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
 8002af2:	e018      	b.n	8002b26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af4:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a26      	ldr	r2, [pc, #152]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002afa:	f023 0301 	bic.w	r3, r3, #1
 8002afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7fe fdf0 	bl	80016e4 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b08:	f7fe fdec 	bl	80016e4 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e1a3      	b.n	8002e62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1a:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d038      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d019      	beq.n	8002b6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3a:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3e:	4a15      	ldr	r2, [pc, #84]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b46:	f7fe fdcd 	bl	80016e4 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4e:	f7fe fdc9 	bl	80016e4 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e180      	b.n	8002e62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x23a>
 8002b6c:	e01a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b6e:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b72:	4a08      	ldr	r2, [pc, #32]	; (8002b94 <HAL_RCC_OscConfig+0x280>)
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7a:	f7fe fdb3 	bl	80016e4 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b80:	e00a      	b.n	8002b98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b82:	f7fe fdaf 	bl	80016e4 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d903      	bls.n	8002b98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e166      	b.n	8002e62 <HAL_RCC_OscConfig+0x54e>
 8002b94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b98:	4b92      	ldr	r3, [pc, #584]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ee      	bne.n	8002b82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80a4 	beq.w	8002cfa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb2:	4b8c      	ldr	r3, [pc, #560]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10d      	bne.n	8002bda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bbe:	4b89      	ldr	r3, [pc, #548]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4a88      	ldr	r2, [pc, #544]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bca:	4b86      	ldr	r3, [pc, #536]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bda:	4b83      	ldr	r3, [pc, #524]	; (8002de8 <HAL_RCC_OscConfig+0x4d4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d118      	bne.n	8002c18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002be6:	4b80      	ldr	r3, [pc, #512]	; (8002de8 <HAL_RCC_OscConfig+0x4d4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a7f      	ldr	r2, [pc, #508]	; (8002de8 <HAL_RCC_OscConfig+0x4d4>)
 8002bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf2:	f7fe fd77 	bl	80016e4 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfa:	f7fe fd73 	bl	80016e4 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b64      	cmp	r3, #100	; 0x64
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e12a      	b.n	8002e62 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c0c:	4b76      	ldr	r3, [pc, #472]	; (8002de8 <HAL_RCC_OscConfig+0x4d4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x31a>
 8002c20:	4b70      	ldr	r3, [pc, #448]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	4a6f      	ldr	r2, [pc, #444]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2c:	e02d      	b.n	8002c8a <HAL_RCC_OscConfig+0x376>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x33c>
 8002c36:	4b6b      	ldr	r3, [pc, #428]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	4a6a      	ldr	r2, [pc, #424]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	6713      	str	r3, [r2, #112]	; 0x70
 8002c42:	4b68      	ldr	r3, [pc, #416]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c46:	4a67      	ldr	r2, [pc, #412]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002c48:	f023 0304 	bic.w	r3, r3, #4
 8002c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4e:	e01c      	b.n	8002c8a <HAL_RCC_OscConfig+0x376>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b05      	cmp	r3, #5
 8002c56:	d10c      	bne.n	8002c72 <HAL_RCC_OscConfig+0x35e>
 8002c58:	4b62      	ldr	r3, [pc, #392]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5c:	4a61      	ldr	r2, [pc, #388]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002c5e:	f043 0304 	orr.w	r3, r3, #4
 8002c62:	6713      	str	r3, [r2, #112]	; 0x70
 8002c64:	4b5f      	ldr	r3, [pc, #380]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	4a5e      	ldr	r2, [pc, #376]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c70:	e00b      	b.n	8002c8a <HAL_RCC_OscConfig+0x376>
 8002c72:	4b5c      	ldr	r3, [pc, #368]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c76:	4a5b      	ldr	r2, [pc, #364]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7e:	4b59      	ldr	r3, [pc, #356]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	4a58      	ldr	r2, [pc, #352]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002c84:	f023 0304 	bic.w	r3, r3, #4
 8002c88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d015      	beq.n	8002cbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c92:	f7fe fd27 	bl	80016e4 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7fe fd23 	bl	80016e4 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e0d8      	b.n	8002e62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb0:	4b4c      	ldr	r3, [pc, #304]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ee      	beq.n	8002c9a <HAL_RCC_OscConfig+0x386>
 8002cbc:	e014      	b.n	8002ce8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbe:	f7fe fd11 	bl	80016e4 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fe fd0d 	bl	80016e4 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e0c2      	b.n	8002e62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cdc:	4b41      	ldr	r3, [pc, #260]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1ee      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ce8:	7dfb      	ldrb	r3, [r7, #23]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d105      	bne.n	8002cfa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cee:	4b3d      	ldr	r3, [pc, #244]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	4a3c      	ldr	r2, [pc, #240]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80ae 	beq.w	8002e60 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d04:	4b37      	ldr	r3, [pc, #220]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 030c 	and.w	r3, r3, #12
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d06d      	beq.n	8002dec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d14b      	bne.n	8002db0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d18:	4b32      	ldr	r3, [pc, #200]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a31      	ldr	r2, [pc, #196]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe fcde 	bl	80016e4 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fe fcda 	bl	80016e4 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e091      	b.n	8002e62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3e:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69da      	ldr	r2, [r3, #28]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	019b      	lsls	r3, r3, #6
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	085b      	lsrs	r3, r3, #1
 8002d62:	3b01      	subs	r3, #1
 8002d64:	041b      	lsls	r3, r3, #16
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	061b      	lsls	r3, r3, #24
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	071b      	lsls	r3, r3, #28
 8002d76:	491b      	ldr	r1, [pc, #108]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d7c:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe fcac 	bl	80016e4 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fe fca8 	bl	80016e4 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e05f      	b.n	8002e62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x47c>
 8002dae:	e057      	b.n	8002e60 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0b      	ldr	r2, [pc, #44]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002db6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fc92 	bl	80016e4 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fe fc8e 	bl	80016e4 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e045      	b.n	8002e62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd6:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <HAL_RCC_OscConfig+0x4d0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x4b0>
 8002de2:	e03d      	b.n	8002e60 <HAL_RCC_OscConfig+0x54c>
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002dec:	4b1f      	ldr	r3, [pc, #124]	; (8002e6c <HAL_RCC_OscConfig+0x558>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d030      	beq.n	8002e5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d129      	bne.n	8002e5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d122      	bne.n	8002e5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d119      	bne.n	8002e5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	085b      	lsrs	r3, r3, #1
 8002e34:	3b01      	subs	r3, #1
 8002e36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d10f      	bne.n	8002e5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d107      	bne.n	8002e5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800

08002e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0d0      	b.n	800302a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4b6a      	ldr	r3, [pc, #424]	; (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d910      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b67      	ldr	r3, [pc, #412]	; (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 020f 	bic.w	r2, r3, #15
 8002e9e:	4965      	ldr	r1, [pc, #404]	; (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b63      	ldr	r3, [pc, #396]	; (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0b8      	b.n	800302a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d020      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed0:	4b59      	ldr	r3, [pc, #356]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	4a58      	ldr	r2, [pc, #352]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ee8:	4b53      	ldr	r3, [pc, #332]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4a52      	ldr	r2, [pc, #328]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8002eee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ef2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef4:	4b50      	ldr	r3, [pc, #320]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	494d      	ldr	r1, [pc, #308]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d040      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d107      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	4b47      	ldr	r3, [pc, #284]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d115      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e07f      	b.n	800302a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d107      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f32:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e073      	b.n	800302a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f42:	4b3d      	ldr	r3, [pc, #244]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e06b      	b.n	800302a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f52:	4b39      	ldr	r3, [pc, #228]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f023 0203 	bic.w	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	4936      	ldr	r1, [pc, #216]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f64:	f7fe fbbe 	bl	80016e4 <HAL_GetTick>
 8002f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f6c:	f7fe fbba 	bl	80016e4 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e053      	b.n	800302a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f82:	4b2d      	ldr	r3, [pc, #180]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 020c 	and.w	r2, r3, #12
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d1eb      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f94:	4b27      	ldr	r3, [pc, #156]	; (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d210      	bcs.n	8002fc4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b24      	ldr	r3, [pc, #144]	; (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 020f 	bic.w	r2, r3, #15
 8002faa:	4922      	ldr	r1, [pc, #136]	; (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb2:	4b20      	ldr	r3, [pc, #128]	; (8003034 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e032      	b.n	800302a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4916      	ldr	r1, [pc, #88]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	490e      	ldr	r1, [pc, #56]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003002:	f000 f821 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8003006:	4602      	mov	r2, r0
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	490a      	ldr	r1, [pc, #40]	; (800303c <HAL_RCC_ClockConfig+0x1cc>)
 8003014:	5ccb      	ldrb	r3, [r1, r3]
 8003016:	fa22 f303 	lsr.w	r3, r2, r3
 800301a:	4a09      	ldr	r2, [pc, #36]	; (8003040 <HAL_RCC_ClockConfig+0x1d0>)
 800301c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_RCC_ClockConfig+0x1d4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe fb1a 	bl	800165c <HAL_InitTick>

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40023c00 	.word	0x40023c00
 8003038:	40023800 	.word	0x40023800
 800303c:	080070cc 	.word	0x080070cc
 8003040:	20000000 	.word	0x20000000
 8003044:	20000004 	.word	0x20000004

08003048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003048:	b5b0      	push	{r4, r5, r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800304e:	2100      	movs	r1, #0
 8003050:	6079      	str	r1, [r7, #4]
 8003052:	2100      	movs	r1, #0
 8003054:	60f9      	str	r1, [r7, #12]
 8003056:	2100      	movs	r1, #0
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800305a:	2100      	movs	r1, #0
 800305c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800305e:	4952      	ldr	r1, [pc, #328]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003060:	6889      	ldr	r1, [r1, #8]
 8003062:	f001 010c 	and.w	r1, r1, #12
 8003066:	2908      	cmp	r1, #8
 8003068:	d00d      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x3e>
 800306a:	2908      	cmp	r1, #8
 800306c:	f200 8094 	bhi.w	8003198 <HAL_RCC_GetSysClockFreq+0x150>
 8003070:	2900      	cmp	r1, #0
 8003072:	d002      	beq.n	800307a <HAL_RCC_GetSysClockFreq+0x32>
 8003074:	2904      	cmp	r1, #4
 8003076:	d003      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x38>
 8003078:	e08e      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800307a:	4b4c      	ldr	r3, [pc, #304]	; (80031ac <HAL_RCC_GetSysClockFreq+0x164>)
 800307c:	60bb      	str	r3, [r7, #8]
      break;
 800307e:	e08e      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003080:	4b4b      	ldr	r3, [pc, #300]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003082:	60bb      	str	r3, [r7, #8]
      break;
 8003084:	e08b      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003086:	4948      	ldr	r1, [pc, #288]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003088:	6849      	ldr	r1, [r1, #4]
 800308a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800308e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003090:	4945      	ldr	r1, [pc, #276]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003092:	6849      	ldr	r1, [r1, #4]
 8003094:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003098:	2900      	cmp	r1, #0
 800309a:	d024      	beq.n	80030e6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309c:	4942      	ldr	r1, [pc, #264]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800309e:	6849      	ldr	r1, [r1, #4]
 80030a0:	0989      	lsrs	r1, r1, #6
 80030a2:	4608      	mov	r0, r1
 80030a4:	f04f 0100 	mov.w	r1, #0
 80030a8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80030ac:	f04f 0500 	mov.w	r5, #0
 80030b0:	ea00 0204 	and.w	r2, r0, r4
 80030b4:	ea01 0305 	and.w	r3, r1, r5
 80030b8:	493d      	ldr	r1, [pc, #244]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80030ba:	fb01 f003 	mul.w	r0, r1, r3
 80030be:	2100      	movs	r1, #0
 80030c0:	fb01 f102 	mul.w	r1, r1, r2
 80030c4:	1844      	adds	r4, r0, r1
 80030c6:	493a      	ldr	r1, [pc, #232]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80030c8:	fba2 0101 	umull	r0, r1, r2, r1
 80030cc:	1863      	adds	r3, r4, r1
 80030ce:	4619      	mov	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	461a      	mov	r2, r3
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	f7fd f90a 	bl	80002f0 <__aeabi_uldivmod>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4613      	mov	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	e04a      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e6:	4b30      	ldr	r3, [pc, #192]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	099b      	lsrs	r3, r3, #6
 80030ec:	461a      	mov	r2, r3
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030f6:	f04f 0100 	mov.w	r1, #0
 80030fa:	ea02 0400 	and.w	r4, r2, r0
 80030fe:	ea03 0501 	and.w	r5, r3, r1
 8003102:	4620      	mov	r0, r4
 8003104:	4629      	mov	r1, r5
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	014b      	lsls	r3, r1, #5
 8003110:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003114:	0142      	lsls	r2, r0, #5
 8003116:	4610      	mov	r0, r2
 8003118:	4619      	mov	r1, r3
 800311a:	1b00      	subs	r0, r0, r4
 800311c:	eb61 0105 	sbc.w	r1, r1, r5
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	018b      	lsls	r3, r1, #6
 800312a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800312e:	0182      	lsls	r2, r0, #6
 8003130:	1a12      	subs	r2, r2, r0
 8003132:	eb63 0301 	sbc.w	r3, r3, r1
 8003136:	f04f 0000 	mov.w	r0, #0
 800313a:	f04f 0100 	mov.w	r1, #0
 800313e:	00d9      	lsls	r1, r3, #3
 8003140:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003144:	00d0      	lsls	r0, r2, #3
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	1912      	adds	r2, r2, r4
 800314c:	eb45 0303 	adc.w	r3, r5, r3
 8003150:	f04f 0000 	mov.w	r0, #0
 8003154:	f04f 0100 	mov.w	r1, #0
 8003158:	0299      	lsls	r1, r3, #10
 800315a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800315e:	0290      	lsls	r0, r2, #10
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4610      	mov	r0, r2
 8003166:	4619      	mov	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	461a      	mov	r2, r3
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	f7fd f8be 	bl	80002f0 <__aeabi_uldivmod>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4613      	mov	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800317c:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	3301      	adds	r3, #1
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	60bb      	str	r3, [r7, #8]
      break;
 8003196:	e002      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003198:	4b04      	ldr	r3, [pc, #16]	; (80031ac <HAL_RCC_GetSysClockFreq+0x164>)
 800319a:	60bb      	str	r3, [r7, #8]
      break;
 800319c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800319e:	68bb      	ldr	r3, [r7, #8]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bdb0      	pop	{r4, r5, r7, pc}
 80031a8:	40023800 	.word	0x40023800
 80031ac:	00f42400 	.word	0x00f42400
 80031b0:	017d7840 	.word	0x017d7840

080031b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000000 	.word	0x20000000

080031cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031d0:	f7ff fff0 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	0a9b      	lsrs	r3, r3, #10
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	4903      	ldr	r1, [pc, #12]	; (80031f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e2:	5ccb      	ldrb	r3, [r1, r3]
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40023800 	.word	0x40023800
 80031f0:	080070dc 	.word	0x080070dc

080031f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031f8:	f7ff ffdc 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4b05      	ldr	r3, [pc, #20]	; (8003214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	0b5b      	lsrs	r3, r3, #13
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	4903      	ldr	r1, [pc, #12]	; (8003218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800320a:	5ccb      	ldrb	r3, [r1, r3]
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003210:	4618      	mov	r0, r3
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40023800 	.word	0x40023800
 8003218:	080070dc 	.word	0x080070dc

0800321c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d012      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003244:	4b69      	ldr	r3, [pc, #420]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4a68      	ldr	r2, [pc, #416]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800324e:	6093      	str	r3, [r2, #8]
 8003250:	4b66      	ldr	r3, [pc, #408]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003258:	4964      	ldr	r1, [pc, #400]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325a:	4313      	orrs	r3, r2
 800325c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003266:	2301      	movs	r3, #1
 8003268:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d017      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003276:	4b5d      	ldr	r3, [pc, #372]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800327c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003284:	4959      	ldr	r1, [pc, #356]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003294:	d101      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003296:	2301      	movs	r3, #1
 8003298:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80032a2:	2301      	movs	r3, #1
 80032a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d017      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032b2:	4b4e      	ldr	r3, [pc, #312]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	494a      	ldr	r1, [pc, #296]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d0:	d101      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80032d2:	2301      	movs	r3, #1
 80032d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80032de:	2301      	movs	r3, #1
 80032e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032ee:	2301      	movs	r3, #1
 80032f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 808b 	beq.w	8003416 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003300:	4b3a      	ldr	r3, [pc, #232]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	4a39      	ldr	r2, [pc, #228]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330a:	6413      	str	r3, [r2, #64]	; 0x40
 800330c:	4b37      	ldr	r3, [pc, #220]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003318:	4b35      	ldr	r3, [pc, #212]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a34      	ldr	r2, [pc, #208]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800331e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003322:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003324:	f7fe f9de 	bl	80016e4 <HAL_GetTick>
 8003328:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800332a:	e008      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800332c:	f7fe f9da 	bl	80016e4 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	; 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e38f      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800333e:	4b2c      	ldr	r3, [pc, #176]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800334a:	4b28      	ldr	r3, [pc, #160]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003352:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d035      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	429a      	cmp	r2, r3
 8003366:	d02e      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003368:	4b20      	ldr	r3, [pc, #128]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003370:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003372:	4b1e      	ldr	r3, [pc, #120]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800337e:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	4a1a      	ldr	r2, [pc, #104]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003388:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800338a:	4a18      	ldr	r2, [pc, #96]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003390:	4b16      	ldr	r3, [pc, #88]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b01      	cmp	r3, #1
 800339a:	d114      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe f9a2 	bl	80016e4 <HAL_GetTick>
 80033a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a2:	e00a      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a4:	f7fe f99e 	bl	80016e4 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e351      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ba:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0ee      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033d2:	d111      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033e2:	400b      	ands	r3, r1
 80033e4:	4901      	ldr	r1, [pc, #4]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
 80033ea:	e00b      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40007000 	.word	0x40007000
 80033f4:	0ffffcff 	.word	0x0ffffcff
 80033f8:	4bb3      	ldr	r3, [pc, #716]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4ab2      	ldr	r2, [pc, #712]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003402:	6093      	str	r3, [r2, #8]
 8003404:	4bb0      	ldr	r3, [pc, #704]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003406:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003410:	49ad      	ldr	r1, [pc, #692]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003412:	4313      	orrs	r3, r2
 8003414:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b00      	cmp	r3, #0
 8003420:	d010      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003422:	4ba9      	ldr	r3, [pc, #676]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003428:	4aa7      	ldr	r2, [pc, #668]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800342a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800342e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003432:	4ba5      	ldr	r3, [pc, #660]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003434:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	49a2      	ldr	r1, [pc, #648]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003450:	4b9d      	ldr	r3, [pc, #628]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003456:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800345e:	499a      	ldr	r1, [pc, #616]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003472:	4b95      	ldr	r3, [pc, #596]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003478:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003480:	4991      	ldr	r1, [pc, #580]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003494:	4b8c      	ldr	r3, [pc, #560]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a2:	4989      	ldr	r1, [pc, #548]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034b6:	4b84      	ldr	r3, [pc, #528]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c4:	4980      	ldr	r1, [pc, #512]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034d8:	4b7b      	ldr	r3, [pc, #492]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034de:	f023 0203 	bic.w	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	4978      	ldr	r1, [pc, #480]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034fa:	4b73      	ldr	r3, [pc, #460]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003500:	f023 020c 	bic.w	r2, r3, #12
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003508:	496f      	ldr	r1, [pc, #444]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800351c:	4b6a      	ldr	r3, [pc, #424]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003522:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352a:	4967      	ldr	r1, [pc, #412]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800353e:	4b62      	ldr	r3, [pc, #392]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003544:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354c:	495e      	ldr	r1, [pc, #376]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003560:	4b59      	ldr	r3, [pc, #356]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003566:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	4956      	ldr	r1, [pc, #344]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003582:	4b51      	ldr	r3, [pc, #324]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003588:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	494d      	ldr	r1, [pc, #308]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035a4:	4b48      	ldr	r3, [pc, #288]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b2:	4945      	ldr	r1, [pc, #276]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035c6:	4b40      	ldr	r3, [pc, #256]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d4:	493c      	ldr	r1, [pc, #240]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035e8:	4b37      	ldr	r3, [pc, #220]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035f6:	4934      	ldr	r1, [pc, #208]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d011      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800360a:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003610:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003618:	492b      	ldr	r1, [pc, #172]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003628:	d101      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800362a:	2301      	movs	r3, #1
 800362c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800363a:	2301      	movs	r3, #1
 800363c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800364a:	4b1f      	ldr	r3, [pc, #124]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003650:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003658:	491b      	ldr	r1, [pc, #108]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00b      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800366c:	4b16      	ldr	r3, [pc, #88]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003672:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800367c:	4912      	ldr	r1, [pc, #72]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00b      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003690:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a0:	4909      	ldr	r1, [pc, #36]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00f      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036b4:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c4:	e002      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
 80036cc:	4986      	ldr	r1, [pc, #536]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00b      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80036e0:	4b81      	ldr	r3, [pc, #516]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f0:	497d      	ldr	r1, [pc, #500]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d006      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80d6 	beq.w	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800370c:	4b76      	ldr	r3, [pc, #472]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a75      	ldr	r2, [pc, #468]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003712:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003716:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003718:	f7fd ffe4 	bl	80016e4 <HAL_GetTick>
 800371c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003720:	f7fd ffe0 	bl	80016e4 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	; 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e195      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003732:	4b6d      	ldr	r3, [pc, #436]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d021      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374e:	2b00      	cmp	r3, #0
 8003750:	d11d      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003752:	4b65      	ldr	r3, [pc, #404]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003758:	0c1b      	lsrs	r3, r3, #16
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003760:	4b61      	ldr	r3, [pc, #388]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003766:	0e1b      	lsrs	r3, r3, #24
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	019a      	lsls	r2, r3, #6
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	041b      	lsls	r3, r3, #16
 8003778:	431a      	orrs	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	061b      	lsls	r3, r3, #24
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	071b      	lsls	r3, r3, #28
 8003786:	4958      	ldr	r1, [pc, #352]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d004      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d02e      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b8:	d129      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037ba:	4b4b      	ldr	r3, [pc, #300]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c0:	0c1b      	lsrs	r3, r3, #16
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037c8:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ce:	0f1b      	lsrs	r3, r3, #28
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	019a      	lsls	r2, r3, #6
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	041b      	lsls	r3, r3, #16
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	061b      	lsls	r3, r3, #24
 80037e8:	431a      	orrs	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	071b      	lsls	r3, r3, #28
 80037ee:	493e      	ldr	r1, [pc, #248]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037f6:	4b3c      	ldr	r3, [pc, #240]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037fc:	f023 021f 	bic.w	r2, r3, #31
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	3b01      	subs	r3, #1
 8003806:	4938      	ldr	r1, [pc, #224]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01d      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800381a:	4b33      	ldr	r3, [pc, #204]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800381c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003820:	0e1b      	lsrs	r3, r3, #24
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003828:	4b2f      	ldr	r3, [pc, #188]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800382a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382e:	0f1b      	lsrs	r3, r3, #28
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	019a      	lsls	r2, r3, #6
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	041b      	lsls	r3, r3, #16
 8003842:	431a      	orrs	r2, r3
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	061b      	lsls	r3, r3, #24
 8003848:	431a      	orrs	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	071b      	lsls	r3, r3, #28
 800384e:	4926      	ldr	r1, [pc, #152]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d011      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	019a      	lsls	r2, r3, #6
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	041b      	lsls	r3, r3, #16
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	061b      	lsls	r3, r3, #24
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	071b      	lsls	r3, r3, #28
 800387e:	491a      	ldr	r1, [pc, #104]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003886:	4b18      	ldr	r3, [pc, #96]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a17      	ldr	r2, [pc, #92]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800388c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003892:	f7fd ff27 	bl	80016e4 <HAL_GetTick>
 8003896:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003898:	e008      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800389a:	f7fd ff23 	bl	80016e4 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b64      	cmp	r3, #100	; 0x64
 80038a6:	d901      	bls.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e0d8      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038ac:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0f0      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	f040 80ce 	bne.w	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038c0:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038cc:	f7fd ff0a 	bl	80016e4 <HAL_GetTick>
 80038d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038d2:	e00b      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038d4:	f7fd ff06 	bl	80016e4 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	; 0x64
 80038e0:	d904      	bls.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e0bb      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80038e6:	bf00      	nop
 80038e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038ec:	4b5e      	ldr	r3, [pc, #376]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038f8:	d0ec      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003916:	2b00      	cmp	r3, #0
 8003918:	d02e      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d12a      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003922:	4b51      	ldr	r3, [pc, #324]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	0c1b      	lsrs	r3, r3, #16
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003930:	4b4d      	ldr	r3, [pc, #308]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	0f1b      	lsrs	r3, r3, #28
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	019a      	lsls	r2, r3, #6
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	041b      	lsls	r3, r3, #16
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	061b      	lsls	r3, r3, #24
 8003950:	431a      	orrs	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	071b      	lsls	r3, r3, #28
 8003956:	4944      	ldr	r1, [pc, #272]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800395e:	4b42      	ldr	r3, [pc, #264]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003964:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	3b01      	subs	r3, #1
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	493d      	ldr	r1, [pc, #244]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d022      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800398c:	d11d      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800398e:	4b36      	ldr	r3, [pc, #216]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	0e1b      	lsrs	r3, r3, #24
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800399c:	4b32      	ldr	r3, [pc, #200]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	0f1b      	lsrs	r3, r3, #28
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	019a      	lsls	r2, r3, #6
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	041b      	lsls	r3, r3, #16
 80039b6:	431a      	orrs	r2, r3
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	061b      	lsls	r3, r3, #24
 80039bc:	431a      	orrs	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	071b      	lsls	r3, r3, #28
 80039c2:	4929      	ldr	r1, [pc, #164]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d028      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039d6:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039dc:	0e1b      	lsrs	r3, r3, #24
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039e4:	4b20      	ldr	r3, [pc, #128]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	0c1b      	lsrs	r3, r3, #16
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	019a      	lsls	r2, r3, #6
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	041b      	lsls	r3, r3, #16
 80039fc:	431a      	orrs	r2, r3
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	061b      	lsls	r3, r3, #24
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	071b      	lsls	r3, r3, #28
 8003a0a:	4917      	ldr	r1, [pc, #92]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a12:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	4911      	ldr	r1, [pc, #68]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a28:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a0e      	ldr	r2, [pc, #56]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a34:	f7fd fe56 	bl	80016e4 <HAL_GetTick>
 8003a38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a3c:	f7fd fe52 	bl	80016e4 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e007      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a5a:	d1ef      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3720      	adds	r7, #32
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800

08003a6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e040      	b.n	8003b00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fd fc54 	bl	800133c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2224      	movs	r2, #36	; 0x24
 8003a98:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0201 	bic.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f8c0 	bl	8003c30 <UART_SetConfig>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e022      	b.n	8003b00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fb16 	bl	80040f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fb9d 	bl	8004238 <UART_CheckIdleState>
 8003afe:	4603      	mov	r3, r0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08a      	sub	sp, #40	; 0x28
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	4613      	mov	r3, r2
 8003b16:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	f040 8081 	bne.w	8003c24 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <HAL_UART_Transmit+0x26>
 8003b28:	88fb      	ldrh	r3, [r7, #6]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e079      	b.n	8003c26 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_UART_Transmit+0x38>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e072      	b.n	8003c26 <HAL_UART_Transmit+0x11e>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2221      	movs	r2, #33	; 0x21
 8003b54:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b56:	f7fd fdc5 	bl	80016e4 <HAL_GetTick>
 8003b5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	88fa      	ldrh	r2, [r7, #6]
 8003b60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	88fa      	ldrh	r2, [r7, #6]
 8003b68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b74:	d108      	bne.n	8003b88 <HAL_UART_Transmit+0x80>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d104      	bne.n	8003b88 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	e003      	b.n	8003b90 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b98:	e02c      	b.n	8003bf4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2180      	movs	r1, #128	; 0x80
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 fb90 	bl	80042ca <UART_WaitOnFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e038      	b.n	8003c26 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	3302      	adds	r3, #2
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	e007      	b.n	8003be2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	3301      	adds	r3, #1
 8003be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1cc      	bne.n	8003b9a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2200      	movs	r2, #0
 8003c08:	2140      	movs	r1, #64	; 0x40
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fb5d 	bl	80042ca <UART_WaitOnFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e005      	b.n	8003c26 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	4ba7      	ldr	r3, [pc, #668]	; (8003ef8 <UART_SetConfig+0x2c8>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	6979      	ldr	r1, [r7, #20]
 8003c64:	430b      	orrs	r3, r1
 8003c66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a95      	ldr	r2, [pc, #596]	; (8003efc <UART_SetConfig+0x2cc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d120      	bne.n	8003cee <UART_SetConfig+0xbe>
 8003cac:	4b94      	ldr	r3, [pc, #592]	; (8003f00 <UART_SetConfig+0x2d0>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d816      	bhi.n	8003ce8 <UART_SetConfig+0xb8>
 8003cba:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <UART_SetConfig+0x90>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003cd1 	.word	0x08003cd1
 8003cc4:	08003cdd 	.word	0x08003cdd
 8003cc8:	08003cd7 	.word	0x08003cd7
 8003ccc:	08003ce3 	.word	0x08003ce3
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	77fb      	strb	r3, [r7, #31]
 8003cd4:	e14f      	b.n	8003f76 <UART_SetConfig+0x346>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	77fb      	strb	r3, [r7, #31]
 8003cda:	e14c      	b.n	8003f76 <UART_SetConfig+0x346>
 8003cdc:	2304      	movs	r3, #4
 8003cde:	77fb      	strb	r3, [r7, #31]
 8003ce0:	e149      	b.n	8003f76 <UART_SetConfig+0x346>
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	77fb      	strb	r3, [r7, #31]
 8003ce6:	e146      	b.n	8003f76 <UART_SetConfig+0x346>
 8003ce8:	2310      	movs	r3, #16
 8003cea:	77fb      	strb	r3, [r7, #31]
 8003cec:	e143      	b.n	8003f76 <UART_SetConfig+0x346>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a84      	ldr	r2, [pc, #528]	; (8003f04 <UART_SetConfig+0x2d4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d132      	bne.n	8003d5e <UART_SetConfig+0x12e>
 8003cf8:	4b81      	ldr	r3, [pc, #516]	; (8003f00 <UART_SetConfig+0x2d0>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	d828      	bhi.n	8003d58 <UART_SetConfig+0x128>
 8003d06:	a201      	add	r2, pc, #4	; (adr r2, 8003d0c <UART_SetConfig+0xdc>)
 8003d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0c:	08003d41 	.word	0x08003d41
 8003d10:	08003d59 	.word	0x08003d59
 8003d14:	08003d59 	.word	0x08003d59
 8003d18:	08003d59 	.word	0x08003d59
 8003d1c:	08003d4d 	.word	0x08003d4d
 8003d20:	08003d59 	.word	0x08003d59
 8003d24:	08003d59 	.word	0x08003d59
 8003d28:	08003d59 	.word	0x08003d59
 8003d2c:	08003d47 	.word	0x08003d47
 8003d30:	08003d59 	.word	0x08003d59
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08003d59 	.word	0x08003d59
 8003d3c:	08003d53 	.word	0x08003d53
 8003d40:	2300      	movs	r3, #0
 8003d42:	77fb      	strb	r3, [r7, #31]
 8003d44:	e117      	b.n	8003f76 <UART_SetConfig+0x346>
 8003d46:	2302      	movs	r3, #2
 8003d48:	77fb      	strb	r3, [r7, #31]
 8003d4a:	e114      	b.n	8003f76 <UART_SetConfig+0x346>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	e111      	b.n	8003f76 <UART_SetConfig+0x346>
 8003d52:	2308      	movs	r3, #8
 8003d54:	77fb      	strb	r3, [r7, #31]
 8003d56:	e10e      	b.n	8003f76 <UART_SetConfig+0x346>
 8003d58:	2310      	movs	r3, #16
 8003d5a:	77fb      	strb	r3, [r7, #31]
 8003d5c:	e10b      	b.n	8003f76 <UART_SetConfig+0x346>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a69      	ldr	r2, [pc, #420]	; (8003f08 <UART_SetConfig+0x2d8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d120      	bne.n	8003daa <UART_SetConfig+0x17a>
 8003d68:	4b65      	ldr	r3, [pc, #404]	; (8003f00 <UART_SetConfig+0x2d0>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d72:	2b30      	cmp	r3, #48	; 0x30
 8003d74:	d013      	beq.n	8003d9e <UART_SetConfig+0x16e>
 8003d76:	2b30      	cmp	r3, #48	; 0x30
 8003d78:	d814      	bhi.n	8003da4 <UART_SetConfig+0x174>
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d009      	beq.n	8003d92 <UART_SetConfig+0x162>
 8003d7e:	2b20      	cmp	r3, #32
 8003d80:	d810      	bhi.n	8003da4 <UART_SetConfig+0x174>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <UART_SetConfig+0x15c>
 8003d86:	2b10      	cmp	r3, #16
 8003d88:	d006      	beq.n	8003d98 <UART_SetConfig+0x168>
 8003d8a:	e00b      	b.n	8003da4 <UART_SetConfig+0x174>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	77fb      	strb	r3, [r7, #31]
 8003d90:	e0f1      	b.n	8003f76 <UART_SetConfig+0x346>
 8003d92:	2302      	movs	r3, #2
 8003d94:	77fb      	strb	r3, [r7, #31]
 8003d96:	e0ee      	b.n	8003f76 <UART_SetConfig+0x346>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e0eb      	b.n	8003f76 <UART_SetConfig+0x346>
 8003d9e:	2308      	movs	r3, #8
 8003da0:	77fb      	strb	r3, [r7, #31]
 8003da2:	e0e8      	b.n	8003f76 <UART_SetConfig+0x346>
 8003da4:	2310      	movs	r3, #16
 8003da6:	77fb      	strb	r3, [r7, #31]
 8003da8:	e0e5      	b.n	8003f76 <UART_SetConfig+0x346>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a57      	ldr	r2, [pc, #348]	; (8003f0c <UART_SetConfig+0x2dc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d120      	bne.n	8003df6 <UART_SetConfig+0x1c6>
 8003db4:	4b52      	ldr	r3, [pc, #328]	; (8003f00 <UART_SetConfig+0x2d0>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003dbe:	2bc0      	cmp	r3, #192	; 0xc0
 8003dc0:	d013      	beq.n	8003dea <UART_SetConfig+0x1ba>
 8003dc2:	2bc0      	cmp	r3, #192	; 0xc0
 8003dc4:	d814      	bhi.n	8003df0 <UART_SetConfig+0x1c0>
 8003dc6:	2b80      	cmp	r3, #128	; 0x80
 8003dc8:	d009      	beq.n	8003dde <UART_SetConfig+0x1ae>
 8003dca:	2b80      	cmp	r3, #128	; 0x80
 8003dcc:	d810      	bhi.n	8003df0 <UART_SetConfig+0x1c0>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <UART_SetConfig+0x1a8>
 8003dd2:	2b40      	cmp	r3, #64	; 0x40
 8003dd4:	d006      	beq.n	8003de4 <UART_SetConfig+0x1b4>
 8003dd6:	e00b      	b.n	8003df0 <UART_SetConfig+0x1c0>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	77fb      	strb	r3, [r7, #31]
 8003ddc:	e0cb      	b.n	8003f76 <UART_SetConfig+0x346>
 8003dde:	2302      	movs	r3, #2
 8003de0:	77fb      	strb	r3, [r7, #31]
 8003de2:	e0c8      	b.n	8003f76 <UART_SetConfig+0x346>
 8003de4:	2304      	movs	r3, #4
 8003de6:	77fb      	strb	r3, [r7, #31]
 8003de8:	e0c5      	b.n	8003f76 <UART_SetConfig+0x346>
 8003dea:	2308      	movs	r3, #8
 8003dec:	77fb      	strb	r3, [r7, #31]
 8003dee:	e0c2      	b.n	8003f76 <UART_SetConfig+0x346>
 8003df0:	2310      	movs	r3, #16
 8003df2:	77fb      	strb	r3, [r7, #31]
 8003df4:	e0bf      	b.n	8003f76 <UART_SetConfig+0x346>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a45      	ldr	r2, [pc, #276]	; (8003f10 <UART_SetConfig+0x2e0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d125      	bne.n	8003e4c <UART_SetConfig+0x21c>
 8003e00:	4b3f      	ldr	r3, [pc, #252]	; (8003f00 <UART_SetConfig+0x2d0>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e0e:	d017      	beq.n	8003e40 <UART_SetConfig+0x210>
 8003e10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e14:	d817      	bhi.n	8003e46 <UART_SetConfig+0x216>
 8003e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e1a:	d00b      	beq.n	8003e34 <UART_SetConfig+0x204>
 8003e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e20:	d811      	bhi.n	8003e46 <UART_SetConfig+0x216>
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <UART_SetConfig+0x1fe>
 8003e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e2a:	d006      	beq.n	8003e3a <UART_SetConfig+0x20a>
 8003e2c:	e00b      	b.n	8003e46 <UART_SetConfig+0x216>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	77fb      	strb	r3, [r7, #31]
 8003e32:	e0a0      	b.n	8003f76 <UART_SetConfig+0x346>
 8003e34:	2302      	movs	r3, #2
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e09d      	b.n	8003f76 <UART_SetConfig+0x346>
 8003e3a:	2304      	movs	r3, #4
 8003e3c:	77fb      	strb	r3, [r7, #31]
 8003e3e:	e09a      	b.n	8003f76 <UART_SetConfig+0x346>
 8003e40:	2308      	movs	r3, #8
 8003e42:	77fb      	strb	r3, [r7, #31]
 8003e44:	e097      	b.n	8003f76 <UART_SetConfig+0x346>
 8003e46:	2310      	movs	r3, #16
 8003e48:	77fb      	strb	r3, [r7, #31]
 8003e4a:	e094      	b.n	8003f76 <UART_SetConfig+0x346>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a30      	ldr	r2, [pc, #192]	; (8003f14 <UART_SetConfig+0x2e4>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d125      	bne.n	8003ea2 <UART_SetConfig+0x272>
 8003e56:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <UART_SetConfig+0x2d0>)
 8003e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e64:	d017      	beq.n	8003e96 <UART_SetConfig+0x266>
 8003e66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e6a:	d817      	bhi.n	8003e9c <UART_SetConfig+0x26c>
 8003e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e70:	d00b      	beq.n	8003e8a <UART_SetConfig+0x25a>
 8003e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e76:	d811      	bhi.n	8003e9c <UART_SetConfig+0x26c>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <UART_SetConfig+0x254>
 8003e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e80:	d006      	beq.n	8003e90 <UART_SetConfig+0x260>
 8003e82:	e00b      	b.n	8003e9c <UART_SetConfig+0x26c>
 8003e84:	2301      	movs	r3, #1
 8003e86:	77fb      	strb	r3, [r7, #31]
 8003e88:	e075      	b.n	8003f76 <UART_SetConfig+0x346>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	77fb      	strb	r3, [r7, #31]
 8003e8e:	e072      	b.n	8003f76 <UART_SetConfig+0x346>
 8003e90:	2304      	movs	r3, #4
 8003e92:	77fb      	strb	r3, [r7, #31]
 8003e94:	e06f      	b.n	8003f76 <UART_SetConfig+0x346>
 8003e96:	2308      	movs	r3, #8
 8003e98:	77fb      	strb	r3, [r7, #31]
 8003e9a:	e06c      	b.n	8003f76 <UART_SetConfig+0x346>
 8003e9c:	2310      	movs	r3, #16
 8003e9e:	77fb      	strb	r3, [r7, #31]
 8003ea0:	e069      	b.n	8003f76 <UART_SetConfig+0x346>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1c      	ldr	r2, [pc, #112]	; (8003f18 <UART_SetConfig+0x2e8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d137      	bne.n	8003f1c <UART_SetConfig+0x2ec>
 8003eac:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <UART_SetConfig+0x2d0>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003eb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eba:	d017      	beq.n	8003eec <UART_SetConfig+0x2bc>
 8003ebc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ec0:	d817      	bhi.n	8003ef2 <UART_SetConfig+0x2c2>
 8003ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ec6:	d00b      	beq.n	8003ee0 <UART_SetConfig+0x2b0>
 8003ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ecc:	d811      	bhi.n	8003ef2 <UART_SetConfig+0x2c2>
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <UART_SetConfig+0x2aa>
 8003ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed6:	d006      	beq.n	8003ee6 <UART_SetConfig+0x2b6>
 8003ed8:	e00b      	b.n	8003ef2 <UART_SetConfig+0x2c2>
 8003eda:	2300      	movs	r3, #0
 8003edc:	77fb      	strb	r3, [r7, #31]
 8003ede:	e04a      	b.n	8003f76 <UART_SetConfig+0x346>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	77fb      	strb	r3, [r7, #31]
 8003ee4:	e047      	b.n	8003f76 <UART_SetConfig+0x346>
 8003ee6:	2304      	movs	r3, #4
 8003ee8:	77fb      	strb	r3, [r7, #31]
 8003eea:	e044      	b.n	8003f76 <UART_SetConfig+0x346>
 8003eec:	2308      	movs	r3, #8
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	e041      	b.n	8003f76 <UART_SetConfig+0x346>
 8003ef2:	2310      	movs	r3, #16
 8003ef4:	77fb      	strb	r3, [r7, #31]
 8003ef6:	e03e      	b.n	8003f76 <UART_SetConfig+0x346>
 8003ef8:	efff69f3 	.word	0xefff69f3
 8003efc:	40011000 	.word	0x40011000
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40004400 	.word	0x40004400
 8003f08:	40004800 	.word	0x40004800
 8003f0c:	40004c00 	.word	0x40004c00
 8003f10:	40005000 	.word	0x40005000
 8003f14:	40011400 	.word	0x40011400
 8003f18:	40007800 	.word	0x40007800
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a71      	ldr	r2, [pc, #452]	; (80040e8 <UART_SetConfig+0x4b8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d125      	bne.n	8003f72 <UART_SetConfig+0x342>
 8003f26:	4b71      	ldr	r3, [pc, #452]	; (80040ec <UART_SetConfig+0x4bc>)
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f30:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f34:	d017      	beq.n	8003f66 <UART_SetConfig+0x336>
 8003f36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f3a:	d817      	bhi.n	8003f6c <UART_SetConfig+0x33c>
 8003f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f40:	d00b      	beq.n	8003f5a <UART_SetConfig+0x32a>
 8003f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f46:	d811      	bhi.n	8003f6c <UART_SetConfig+0x33c>
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <UART_SetConfig+0x324>
 8003f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f50:	d006      	beq.n	8003f60 <UART_SetConfig+0x330>
 8003f52:	e00b      	b.n	8003f6c <UART_SetConfig+0x33c>
 8003f54:	2300      	movs	r3, #0
 8003f56:	77fb      	strb	r3, [r7, #31]
 8003f58:	e00d      	b.n	8003f76 <UART_SetConfig+0x346>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	77fb      	strb	r3, [r7, #31]
 8003f5e:	e00a      	b.n	8003f76 <UART_SetConfig+0x346>
 8003f60:	2304      	movs	r3, #4
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e007      	b.n	8003f76 <UART_SetConfig+0x346>
 8003f66:	2308      	movs	r3, #8
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	e004      	b.n	8003f76 <UART_SetConfig+0x346>
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e001      	b.n	8003f76 <UART_SetConfig+0x346>
 8003f72:	2310      	movs	r3, #16
 8003f74:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7e:	d15b      	bne.n	8004038 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003f80:	7ffb      	ldrb	r3, [r7, #31]
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d827      	bhi.n	8003fd6 <UART_SetConfig+0x3a6>
 8003f86:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <UART_SetConfig+0x35c>)
 8003f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8c:	08003fb1 	.word	0x08003fb1
 8003f90:	08003fb9 	.word	0x08003fb9
 8003f94:	08003fc1 	.word	0x08003fc1
 8003f98:	08003fd7 	.word	0x08003fd7
 8003f9c:	08003fc7 	.word	0x08003fc7
 8003fa0:	08003fd7 	.word	0x08003fd7
 8003fa4:	08003fd7 	.word	0x08003fd7
 8003fa8:	08003fd7 	.word	0x08003fd7
 8003fac:	08003fcf 	.word	0x08003fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb0:	f7ff f90c 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 8003fb4:	61b8      	str	r0, [r7, #24]
        break;
 8003fb6:	e013      	b.n	8003fe0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fb8:	f7ff f91c 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 8003fbc:	61b8      	str	r0, [r7, #24]
        break;
 8003fbe:	e00f      	b.n	8003fe0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc0:	4b4b      	ldr	r3, [pc, #300]	; (80040f0 <UART_SetConfig+0x4c0>)
 8003fc2:	61bb      	str	r3, [r7, #24]
        break;
 8003fc4:	e00c      	b.n	8003fe0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fc6:	f7ff f83f 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8003fca:	61b8      	str	r0, [r7, #24]
        break;
 8003fcc:	e008      	b.n	8003fe0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fd2:	61bb      	str	r3, [r7, #24]
        break;
 8003fd4:	e004      	b.n	8003fe0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	77bb      	strb	r3, [r7, #30]
        break;
 8003fde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d074      	beq.n	80040d0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	005a      	lsls	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	441a      	add	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	2b0f      	cmp	r3, #15
 8004002:	d916      	bls.n	8004032 <UART_SetConfig+0x402>
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400a:	d212      	bcs.n	8004032 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	b29b      	uxth	r3, r3
 8004010:	f023 030f 	bic.w	r3, r3, #15
 8004014:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	b29b      	uxth	r3, r3
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	b29a      	uxth	r2, r3
 8004022:	89fb      	ldrh	r3, [r7, #14]
 8004024:	4313      	orrs	r3, r2
 8004026:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	89fa      	ldrh	r2, [r7, #14]
 800402e:	60da      	str	r2, [r3, #12]
 8004030:	e04e      	b.n	80040d0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	77bb      	strb	r3, [r7, #30]
 8004036:	e04b      	b.n	80040d0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004038:	7ffb      	ldrb	r3, [r7, #31]
 800403a:	2b08      	cmp	r3, #8
 800403c:	d827      	bhi.n	800408e <UART_SetConfig+0x45e>
 800403e:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <UART_SetConfig+0x414>)
 8004040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004044:	08004069 	.word	0x08004069
 8004048:	08004071 	.word	0x08004071
 800404c:	08004079 	.word	0x08004079
 8004050:	0800408f 	.word	0x0800408f
 8004054:	0800407f 	.word	0x0800407f
 8004058:	0800408f 	.word	0x0800408f
 800405c:	0800408f 	.word	0x0800408f
 8004060:	0800408f 	.word	0x0800408f
 8004064:	08004087 	.word	0x08004087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004068:	f7ff f8b0 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 800406c:	61b8      	str	r0, [r7, #24]
        break;
 800406e:	e013      	b.n	8004098 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004070:	f7ff f8c0 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 8004074:	61b8      	str	r0, [r7, #24]
        break;
 8004076:	e00f      	b.n	8004098 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004078:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <UART_SetConfig+0x4c0>)
 800407a:	61bb      	str	r3, [r7, #24]
        break;
 800407c:	e00c      	b.n	8004098 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800407e:	f7fe ffe3 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8004082:	61b8      	str	r0, [r7, #24]
        break;
 8004084:	e008      	b.n	8004098 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800408a:	61bb      	str	r3, [r7, #24]
        break;
 800408c:	e004      	b.n	8004098 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	77bb      	strb	r3, [r7, #30]
        break;
 8004096:	bf00      	nop
    }

    if (pclk != 0U)
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d018      	beq.n	80040d0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	085a      	lsrs	r2, r3, #1
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	441a      	add	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b0f      	cmp	r3, #15
 80040b8:	d908      	bls.n	80040cc <UART_SetConfig+0x49c>
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c0:	d204      	bcs.n	80040cc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	e001      	b.n	80040d0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80040dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3720      	adds	r7, #32
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40007c00 	.word	0x40007c00
 80040ec:	40023800 	.word	0x40023800
 80040f0:	00f42400 	.word	0x00f42400

080040f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01a      	beq.n	800420a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041f2:	d10a      	bne.n	800420a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	605a      	str	r2, [r3, #4]
  }
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af02      	add	r7, sp, #8
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004248:	f7fd fa4c 	bl	80016e4 <HAL_GetTick>
 800424c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0308 	and.w	r3, r3, #8
 8004258:	2b08      	cmp	r3, #8
 800425a:	d10e      	bne.n	800427a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800425c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f82d 	bl	80042ca <UART_WaitOnFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e023      	b.n	80042c2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b04      	cmp	r3, #4
 8004286:	d10e      	bne.n	80042a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004288:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f817 	bl	80042ca <UART_WaitOnFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e00d      	b.n	80042c2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b084      	sub	sp, #16
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	4613      	mov	r3, r2
 80042d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042da:	e05e      	b.n	800439a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e2:	d05a      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e4:	f7fd f9fe 	bl	80016e4 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d302      	bcc.n	80042fa <UART_WaitOnFlagUntilTimeout+0x30>
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d11b      	bne.n	8004332 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004308:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0201 	bic.w	r2, r2, #1
 8004318:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e043      	b.n	80043ba <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d02c      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800434a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800434e:	d124      	bne.n	800439a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004358:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004368:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2220      	movs	r2, #32
 800438a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e00f      	b.n	80043ba <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4013      	ands	r3, r2
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	bf0c      	ite	eq
 80043aa:	2301      	moveq	r3, #1
 80043ac:	2300      	movne	r3, #0
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	79fb      	ldrb	r3, [r7, #7]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d091      	beq.n	80042dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <__errno>:
 80043c4:	4b01      	ldr	r3, [pc, #4]	; (80043cc <__errno+0x8>)
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	2000000c 	.word	0x2000000c

080043d0 <__libc_init_array>:
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	4d0d      	ldr	r5, [pc, #52]	; (8004408 <__libc_init_array+0x38>)
 80043d4:	4c0d      	ldr	r4, [pc, #52]	; (800440c <__libc_init_array+0x3c>)
 80043d6:	1b64      	subs	r4, r4, r5
 80043d8:	10a4      	asrs	r4, r4, #2
 80043da:	2600      	movs	r6, #0
 80043dc:	42a6      	cmp	r6, r4
 80043de:	d109      	bne.n	80043f4 <__libc_init_array+0x24>
 80043e0:	4d0b      	ldr	r5, [pc, #44]	; (8004410 <__libc_init_array+0x40>)
 80043e2:	4c0c      	ldr	r4, [pc, #48]	; (8004414 <__libc_init_array+0x44>)
 80043e4:	f002 fe3c 	bl	8007060 <_init>
 80043e8:	1b64      	subs	r4, r4, r5
 80043ea:	10a4      	asrs	r4, r4, #2
 80043ec:	2600      	movs	r6, #0
 80043ee:	42a6      	cmp	r6, r4
 80043f0:	d105      	bne.n	80043fe <__libc_init_array+0x2e>
 80043f2:	bd70      	pop	{r4, r5, r6, pc}
 80043f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f8:	4798      	blx	r3
 80043fa:	3601      	adds	r6, #1
 80043fc:	e7ee      	b.n	80043dc <__libc_init_array+0xc>
 80043fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004402:	4798      	blx	r3
 8004404:	3601      	adds	r6, #1
 8004406:	e7f2      	b.n	80043ee <__libc_init_array+0x1e>
 8004408:	080074cc 	.word	0x080074cc
 800440c:	080074cc 	.word	0x080074cc
 8004410:	080074cc 	.word	0x080074cc
 8004414:	080074d0 	.word	0x080074d0

08004418 <memset>:
 8004418:	4402      	add	r2, r0
 800441a:	4603      	mov	r3, r0
 800441c:	4293      	cmp	r3, r2
 800441e:	d100      	bne.n	8004422 <memset+0xa>
 8004420:	4770      	bx	lr
 8004422:	f803 1b01 	strb.w	r1, [r3], #1
 8004426:	e7f9      	b.n	800441c <memset+0x4>

08004428 <__cvt>:
 8004428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442a:	ed2d 8b02 	vpush	{d8}
 800442e:	eeb0 8b40 	vmov.f64	d8, d0
 8004432:	b085      	sub	sp, #20
 8004434:	4617      	mov	r7, r2
 8004436:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004438:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800443a:	ee18 2a90 	vmov	r2, s17
 800443e:	f025 0520 	bic.w	r5, r5, #32
 8004442:	2a00      	cmp	r2, #0
 8004444:	bfb6      	itet	lt
 8004446:	222d      	movlt	r2, #45	; 0x2d
 8004448:	2200      	movge	r2, #0
 800444a:	eeb1 8b40 	vneglt.f64	d8, d0
 800444e:	2d46      	cmp	r5, #70	; 0x46
 8004450:	460c      	mov	r4, r1
 8004452:	701a      	strb	r2, [r3, #0]
 8004454:	d004      	beq.n	8004460 <__cvt+0x38>
 8004456:	2d45      	cmp	r5, #69	; 0x45
 8004458:	d100      	bne.n	800445c <__cvt+0x34>
 800445a:	3401      	adds	r4, #1
 800445c:	2102      	movs	r1, #2
 800445e:	e000      	b.n	8004462 <__cvt+0x3a>
 8004460:	2103      	movs	r1, #3
 8004462:	ab03      	add	r3, sp, #12
 8004464:	9301      	str	r3, [sp, #4]
 8004466:	ab02      	add	r3, sp, #8
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	4622      	mov	r2, r4
 800446c:	4633      	mov	r3, r6
 800446e:	eeb0 0b48 	vmov.f64	d0, d8
 8004472:	f000 fce1 	bl	8004e38 <_dtoa_r>
 8004476:	2d47      	cmp	r5, #71	; 0x47
 8004478:	d109      	bne.n	800448e <__cvt+0x66>
 800447a:	07fb      	lsls	r3, r7, #31
 800447c:	d407      	bmi.n	800448e <__cvt+0x66>
 800447e:	9b03      	ldr	r3, [sp, #12]
 8004480:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004482:	1a1b      	subs	r3, r3, r0
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	b005      	add	sp, #20
 8004488:	ecbd 8b02 	vpop	{d8}
 800448c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800448e:	2d46      	cmp	r5, #70	; 0x46
 8004490:	eb00 0204 	add.w	r2, r0, r4
 8004494:	d10c      	bne.n	80044b0 <__cvt+0x88>
 8004496:	7803      	ldrb	r3, [r0, #0]
 8004498:	2b30      	cmp	r3, #48	; 0x30
 800449a:	d107      	bne.n	80044ac <__cvt+0x84>
 800449c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80044a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a4:	bf1c      	itt	ne
 80044a6:	f1c4 0401 	rsbne	r4, r4, #1
 80044aa:	6034      	strne	r4, [r6, #0]
 80044ac:	6833      	ldr	r3, [r6, #0]
 80044ae:	441a      	add	r2, r3
 80044b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80044b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b8:	bf08      	it	eq
 80044ba:	9203      	streq	r2, [sp, #12]
 80044bc:	2130      	movs	r1, #48	; 0x30
 80044be:	9b03      	ldr	r3, [sp, #12]
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d2dc      	bcs.n	800447e <__cvt+0x56>
 80044c4:	1c5c      	adds	r4, r3, #1
 80044c6:	9403      	str	r4, [sp, #12]
 80044c8:	7019      	strb	r1, [r3, #0]
 80044ca:	e7f8      	b.n	80044be <__cvt+0x96>

080044cc <__exponent>:
 80044cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044ce:	4603      	mov	r3, r0
 80044d0:	2900      	cmp	r1, #0
 80044d2:	bfb8      	it	lt
 80044d4:	4249      	neglt	r1, r1
 80044d6:	f803 2b02 	strb.w	r2, [r3], #2
 80044da:	bfb4      	ite	lt
 80044dc:	222d      	movlt	r2, #45	; 0x2d
 80044de:	222b      	movge	r2, #43	; 0x2b
 80044e0:	2909      	cmp	r1, #9
 80044e2:	7042      	strb	r2, [r0, #1]
 80044e4:	dd2a      	ble.n	800453c <__exponent+0x70>
 80044e6:	f10d 0407 	add.w	r4, sp, #7
 80044ea:	46a4      	mov	ip, r4
 80044ec:	270a      	movs	r7, #10
 80044ee:	46a6      	mov	lr, r4
 80044f0:	460a      	mov	r2, r1
 80044f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80044f6:	fb07 1516 	mls	r5, r7, r6, r1
 80044fa:	3530      	adds	r5, #48	; 0x30
 80044fc:	2a63      	cmp	r2, #99	; 0x63
 80044fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8004502:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004506:	4631      	mov	r1, r6
 8004508:	dcf1      	bgt.n	80044ee <__exponent+0x22>
 800450a:	3130      	adds	r1, #48	; 0x30
 800450c:	f1ae 0502 	sub.w	r5, lr, #2
 8004510:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004514:	1c44      	adds	r4, r0, #1
 8004516:	4629      	mov	r1, r5
 8004518:	4561      	cmp	r1, ip
 800451a:	d30a      	bcc.n	8004532 <__exponent+0x66>
 800451c:	f10d 0209 	add.w	r2, sp, #9
 8004520:	eba2 020e 	sub.w	r2, r2, lr
 8004524:	4565      	cmp	r5, ip
 8004526:	bf88      	it	hi
 8004528:	2200      	movhi	r2, #0
 800452a:	4413      	add	r3, r2
 800452c:	1a18      	subs	r0, r3, r0
 800452e:	b003      	add	sp, #12
 8004530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004532:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004536:	f804 2f01 	strb.w	r2, [r4, #1]!
 800453a:	e7ed      	b.n	8004518 <__exponent+0x4c>
 800453c:	2330      	movs	r3, #48	; 0x30
 800453e:	3130      	adds	r1, #48	; 0x30
 8004540:	7083      	strb	r3, [r0, #2]
 8004542:	70c1      	strb	r1, [r0, #3]
 8004544:	1d03      	adds	r3, r0, #4
 8004546:	e7f1      	b.n	800452c <__exponent+0x60>

08004548 <_printf_float>:
 8004548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800454c:	b08b      	sub	sp, #44	; 0x2c
 800454e:	460c      	mov	r4, r1
 8004550:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004554:	4616      	mov	r6, r2
 8004556:	461f      	mov	r7, r3
 8004558:	4605      	mov	r5, r0
 800455a:	f001 fae5 	bl	8005b28 <_localeconv_r>
 800455e:	f8d0 b000 	ldr.w	fp, [r0]
 8004562:	4658      	mov	r0, fp
 8004564:	f7fb fe6c 	bl	8000240 <strlen>
 8004568:	2300      	movs	r3, #0
 800456a:	9308      	str	r3, [sp, #32]
 800456c:	f8d8 3000 	ldr.w	r3, [r8]
 8004570:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004574:	6822      	ldr	r2, [r4, #0]
 8004576:	3307      	adds	r3, #7
 8004578:	f023 0307 	bic.w	r3, r3, #7
 800457c:	f103 0108 	add.w	r1, r3, #8
 8004580:	f8c8 1000 	str.w	r1, [r8]
 8004584:	4682      	mov	sl, r0
 8004586:	e9d3 0100 	ldrd	r0, r1, [r3]
 800458a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800458e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80047f0 <_printf_float+0x2a8>
 8004592:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8004596:	eeb0 6bc0 	vabs.f64	d6, d0
 800459a:	eeb4 6b47 	vcmp.f64	d6, d7
 800459e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a2:	dd24      	ble.n	80045ee <_printf_float+0xa6>
 80045a4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80045a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ac:	d502      	bpl.n	80045b4 <_printf_float+0x6c>
 80045ae:	232d      	movs	r3, #45	; 0x2d
 80045b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045b4:	4b90      	ldr	r3, [pc, #576]	; (80047f8 <_printf_float+0x2b0>)
 80045b6:	4891      	ldr	r0, [pc, #580]	; (80047fc <_printf_float+0x2b4>)
 80045b8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80045bc:	bf94      	ite	ls
 80045be:	4698      	movls	r8, r3
 80045c0:	4680      	movhi	r8, r0
 80045c2:	2303      	movs	r3, #3
 80045c4:	6123      	str	r3, [r4, #16]
 80045c6:	f022 0204 	bic.w	r2, r2, #4
 80045ca:	2300      	movs	r3, #0
 80045cc:	6022      	str	r2, [r4, #0]
 80045ce:	9304      	str	r3, [sp, #16]
 80045d0:	9700      	str	r7, [sp, #0]
 80045d2:	4633      	mov	r3, r6
 80045d4:	aa09      	add	r2, sp, #36	; 0x24
 80045d6:	4621      	mov	r1, r4
 80045d8:	4628      	mov	r0, r5
 80045da:	f000 f9d3 	bl	8004984 <_printf_common>
 80045de:	3001      	adds	r0, #1
 80045e0:	f040 808a 	bne.w	80046f8 <_printf_float+0x1b0>
 80045e4:	f04f 30ff 	mov.w	r0, #4294967295
 80045e8:	b00b      	add	sp, #44	; 0x2c
 80045ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ee:	eeb4 0b40 	vcmp.f64	d0, d0
 80045f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f6:	d709      	bvc.n	800460c <_printf_float+0xc4>
 80045f8:	ee10 3a90 	vmov	r3, s1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	bfbc      	itt	lt
 8004600:	232d      	movlt	r3, #45	; 0x2d
 8004602:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004606:	487e      	ldr	r0, [pc, #504]	; (8004800 <_printf_float+0x2b8>)
 8004608:	4b7e      	ldr	r3, [pc, #504]	; (8004804 <_printf_float+0x2bc>)
 800460a:	e7d5      	b.n	80045b8 <_printf_float+0x70>
 800460c:	6863      	ldr	r3, [r4, #4]
 800460e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004612:	9104      	str	r1, [sp, #16]
 8004614:	1c59      	adds	r1, r3, #1
 8004616:	d13c      	bne.n	8004692 <_printf_float+0x14a>
 8004618:	2306      	movs	r3, #6
 800461a:	6063      	str	r3, [r4, #4]
 800461c:	2300      	movs	r3, #0
 800461e:	9303      	str	r3, [sp, #12]
 8004620:	ab08      	add	r3, sp, #32
 8004622:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004626:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800462a:	ab07      	add	r3, sp, #28
 800462c:	6861      	ldr	r1, [r4, #4]
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	6022      	str	r2, [r4, #0]
 8004632:	f10d 031b 	add.w	r3, sp, #27
 8004636:	4628      	mov	r0, r5
 8004638:	f7ff fef6 	bl	8004428 <__cvt>
 800463c:	9b04      	ldr	r3, [sp, #16]
 800463e:	9907      	ldr	r1, [sp, #28]
 8004640:	2b47      	cmp	r3, #71	; 0x47
 8004642:	4680      	mov	r8, r0
 8004644:	d108      	bne.n	8004658 <_printf_float+0x110>
 8004646:	1cc8      	adds	r0, r1, #3
 8004648:	db02      	blt.n	8004650 <_printf_float+0x108>
 800464a:	6863      	ldr	r3, [r4, #4]
 800464c:	4299      	cmp	r1, r3
 800464e:	dd41      	ble.n	80046d4 <_printf_float+0x18c>
 8004650:	f1a9 0902 	sub.w	r9, r9, #2
 8004654:	fa5f f989 	uxtb.w	r9, r9
 8004658:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800465c:	d820      	bhi.n	80046a0 <_printf_float+0x158>
 800465e:	3901      	subs	r1, #1
 8004660:	464a      	mov	r2, r9
 8004662:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004666:	9107      	str	r1, [sp, #28]
 8004668:	f7ff ff30 	bl	80044cc <__exponent>
 800466c:	9a08      	ldr	r2, [sp, #32]
 800466e:	9004      	str	r0, [sp, #16]
 8004670:	1813      	adds	r3, r2, r0
 8004672:	2a01      	cmp	r2, #1
 8004674:	6123      	str	r3, [r4, #16]
 8004676:	dc02      	bgt.n	800467e <_printf_float+0x136>
 8004678:	6822      	ldr	r2, [r4, #0]
 800467a:	07d2      	lsls	r2, r2, #31
 800467c:	d501      	bpl.n	8004682 <_printf_float+0x13a>
 800467e:	3301      	adds	r3, #1
 8004680:	6123      	str	r3, [r4, #16]
 8004682:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0a2      	beq.n	80045d0 <_printf_float+0x88>
 800468a:	232d      	movs	r3, #45	; 0x2d
 800468c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004690:	e79e      	b.n	80045d0 <_printf_float+0x88>
 8004692:	9904      	ldr	r1, [sp, #16]
 8004694:	2947      	cmp	r1, #71	; 0x47
 8004696:	d1c1      	bne.n	800461c <_printf_float+0xd4>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1bf      	bne.n	800461c <_printf_float+0xd4>
 800469c:	2301      	movs	r3, #1
 800469e:	e7bc      	b.n	800461a <_printf_float+0xd2>
 80046a0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80046a4:	d118      	bne.n	80046d8 <_printf_float+0x190>
 80046a6:	2900      	cmp	r1, #0
 80046a8:	6863      	ldr	r3, [r4, #4]
 80046aa:	dd0b      	ble.n	80046c4 <_printf_float+0x17c>
 80046ac:	6121      	str	r1, [r4, #16]
 80046ae:	b913      	cbnz	r3, 80046b6 <_printf_float+0x16e>
 80046b0:	6822      	ldr	r2, [r4, #0]
 80046b2:	07d0      	lsls	r0, r2, #31
 80046b4:	d502      	bpl.n	80046bc <_printf_float+0x174>
 80046b6:	3301      	adds	r3, #1
 80046b8:	440b      	add	r3, r1
 80046ba:	6123      	str	r3, [r4, #16]
 80046bc:	2300      	movs	r3, #0
 80046be:	65a1      	str	r1, [r4, #88]	; 0x58
 80046c0:	9304      	str	r3, [sp, #16]
 80046c2:	e7de      	b.n	8004682 <_printf_float+0x13a>
 80046c4:	b913      	cbnz	r3, 80046cc <_printf_float+0x184>
 80046c6:	6822      	ldr	r2, [r4, #0]
 80046c8:	07d2      	lsls	r2, r2, #31
 80046ca:	d501      	bpl.n	80046d0 <_printf_float+0x188>
 80046cc:	3302      	adds	r3, #2
 80046ce:	e7f4      	b.n	80046ba <_printf_float+0x172>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e7f2      	b.n	80046ba <_printf_float+0x172>
 80046d4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80046d8:	9b08      	ldr	r3, [sp, #32]
 80046da:	4299      	cmp	r1, r3
 80046dc:	db05      	blt.n	80046ea <_printf_float+0x1a2>
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	6121      	str	r1, [r4, #16]
 80046e2:	07d8      	lsls	r0, r3, #31
 80046e4:	d5ea      	bpl.n	80046bc <_printf_float+0x174>
 80046e6:	1c4b      	adds	r3, r1, #1
 80046e8:	e7e7      	b.n	80046ba <_printf_float+0x172>
 80046ea:	2900      	cmp	r1, #0
 80046ec:	bfd4      	ite	le
 80046ee:	f1c1 0202 	rsble	r2, r1, #2
 80046f2:	2201      	movgt	r2, #1
 80046f4:	4413      	add	r3, r2
 80046f6:	e7e0      	b.n	80046ba <_printf_float+0x172>
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	055a      	lsls	r2, r3, #21
 80046fc:	d407      	bmi.n	800470e <_printf_float+0x1c6>
 80046fe:	6923      	ldr	r3, [r4, #16]
 8004700:	4642      	mov	r2, r8
 8004702:	4631      	mov	r1, r6
 8004704:	4628      	mov	r0, r5
 8004706:	47b8      	blx	r7
 8004708:	3001      	adds	r0, #1
 800470a:	d12a      	bne.n	8004762 <_printf_float+0x21a>
 800470c:	e76a      	b.n	80045e4 <_printf_float+0x9c>
 800470e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004712:	f240 80e2 	bls.w	80048da <_printf_float+0x392>
 8004716:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800471a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800471e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004722:	d133      	bne.n	800478c <_printf_float+0x244>
 8004724:	4a38      	ldr	r2, [pc, #224]	; (8004808 <_printf_float+0x2c0>)
 8004726:	2301      	movs	r3, #1
 8004728:	4631      	mov	r1, r6
 800472a:	4628      	mov	r0, r5
 800472c:	47b8      	blx	r7
 800472e:	3001      	adds	r0, #1
 8004730:	f43f af58 	beq.w	80045e4 <_printf_float+0x9c>
 8004734:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004738:	429a      	cmp	r2, r3
 800473a:	db02      	blt.n	8004742 <_printf_float+0x1fa>
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	07d8      	lsls	r0, r3, #31
 8004740:	d50f      	bpl.n	8004762 <_printf_float+0x21a>
 8004742:	4653      	mov	r3, sl
 8004744:	465a      	mov	r2, fp
 8004746:	4631      	mov	r1, r6
 8004748:	4628      	mov	r0, r5
 800474a:	47b8      	blx	r7
 800474c:	3001      	adds	r0, #1
 800474e:	f43f af49 	beq.w	80045e4 <_printf_float+0x9c>
 8004752:	f04f 0800 	mov.w	r8, #0
 8004756:	f104 091a 	add.w	r9, r4, #26
 800475a:	9b08      	ldr	r3, [sp, #32]
 800475c:	3b01      	subs	r3, #1
 800475e:	4543      	cmp	r3, r8
 8004760:	dc09      	bgt.n	8004776 <_printf_float+0x22e>
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	079b      	lsls	r3, r3, #30
 8004766:	f100 8108 	bmi.w	800497a <_printf_float+0x432>
 800476a:	68e0      	ldr	r0, [r4, #12]
 800476c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800476e:	4298      	cmp	r0, r3
 8004770:	bfb8      	it	lt
 8004772:	4618      	movlt	r0, r3
 8004774:	e738      	b.n	80045e8 <_printf_float+0xa0>
 8004776:	2301      	movs	r3, #1
 8004778:	464a      	mov	r2, r9
 800477a:	4631      	mov	r1, r6
 800477c:	4628      	mov	r0, r5
 800477e:	47b8      	blx	r7
 8004780:	3001      	adds	r0, #1
 8004782:	f43f af2f 	beq.w	80045e4 <_printf_float+0x9c>
 8004786:	f108 0801 	add.w	r8, r8, #1
 800478a:	e7e6      	b.n	800475a <_printf_float+0x212>
 800478c:	9b07      	ldr	r3, [sp, #28]
 800478e:	2b00      	cmp	r3, #0
 8004790:	dc3c      	bgt.n	800480c <_printf_float+0x2c4>
 8004792:	4a1d      	ldr	r2, [pc, #116]	; (8004808 <_printf_float+0x2c0>)
 8004794:	2301      	movs	r3, #1
 8004796:	4631      	mov	r1, r6
 8004798:	4628      	mov	r0, r5
 800479a:	47b8      	blx	r7
 800479c:	3001      	adds	r0, #1
 800479e:	f43f af21 	beq.w	80045e4 <_printf_float+0x9c>
 80047a2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	d102      	bne.n	80047b0 <_printf_float+0x268>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	07d9      	lsls	r1, r3, #31
 80047ae:	d5d8      	bpl.n	8004762 <_printf_float+0x21a>
 80047b0:	4653      	mov	r3, sl
 80047b2:	465a      	mov	r2, fp
 80047b4:	4631      	mov	r1, r6
 80047b6:	4628      	mov	r0, r5
 80047b8:	47b8      	blx	r7
 80047ba:	3001      	adds	r0, #1
 80047bc:	f43f af12 	beq.w	80045e4 <_printf_float+0x9c>
 80047c0:	f04f 0900 	mov.w	r9, #0
 80047c4:	f104 0a1a 	add.w	sl, r4, #26
 80047c8:	9b07      	ldr	r3, [sp, #28]
 80047ca:	425b      	negs	r3, r3
 80047cc:	454b      	cmp	r3, r9
 80047ce:	dc01      	bgt.n	80047d4 <_printf_float+0x28c>
 80047d0:	9b08      	ldr	r3, [sp, #32]
 80047d2:	e795      	b.n	8004700 <_printf_float+0x1b8>
 80047d4:	2301      	movs	r3, #1
 80047d6:	4652      	mov	r2, sl
 80047d8:	4631      	mov	r1, r6
 80047da:	4628      	mov	r0, r5
 80047dc:	47b8      	blx	r7
 80047de:	3001      	adds	r0, #1
 80047e0:	f43f af00 	beq.w	80045e4 <_printf_float+0x9c>
 80047e4:	f109 0901 	add.w	r9, r9, #1
 80047e8:	e7ee      	b.n	80047c8 <_printf_float+0x280>
 80047ea:	bf00      	nop
 80047ec:	f3af 8000 	nop.w
 80047f0:	ffffffff 	.word	0xffffffff
 80047f4:	7fefffff 	.word	0x7fefffff
 80047f8:	080070e8 	.word	0x080070e8
 80047fc:	080070ec 	.word	0x080070ec
 8004800:	080070f4 	.word	0x080070f4
 8004804:	080070f0 	.word	0x080070f0
 8004808:	080070f8 	.word	0x080070f8
 800480c:	9a08      	ldr	r2, [sp, #32]
 800480e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004810:	429a      	cmp	r2, r3
 8004812:	bfa8      	it	ge
 8004814:	461a      	movge	r2, r3
 8004816:	2a00      	cmp	r2, #0
 8004818:	4691      	mov	r9, r2
 800481a:	dc38      	bgt.n	800488e <_printf_float+0x346>
 800481c:	2300      	movs	r3, #0
 800481e:	9305      	str	r3, [sp, #20]
 8004820:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004824:	f104 021a 	add.w	r2, r4, #26
 8004828:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800482a:	9905      	ldr	r1, [sp, #20]
 800482c:	9304      	str	r3, [sp, #16]
 800482e:	eba3 0309 	sub.w	r3, r3, r9
 8004832:	428b      	cmp	r3, r1
 8004834:	dc33      	bgt.n	800489e <_printf_float+0x356>
 8004836:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800483a:	429a      	cmp	r2, r3
 800483c:	db3c      	blt.n	80048b8 <_printf_float+0x370>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	07da      	lsls	r2, r3, #31
 8004842:	d439      	bmi.n	80048b8 <_printf_float+0x370>
 8004844:	9a08      	ldr	r2, [sp, #32]
 8004846:	9b04      	ldr	r3, [sp, #16]
 8004848:	9907      	ldr	r1, [sp, #28]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	eba2 0901 	sub.w	r9, r2, r1
 8004850:	4599      	cmp	r9, r3
 8004852:	bfa8      	it	ge
 8004854:	4699      	movge	r9, r3
 8004856:	f1b9 0f00 	cmp.w	r9, #0
 800485a:	dc35      	bgt.n	80048c8 <_printf_float+0x380>
 800485c:	f04f 0800 	mov.w	r8, #0
 8004860:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004864:	f104 0a1a 	add.w	sl, r4, #26
 8004868:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	eba3 0309 	sub.w	r3, r3, r9
 8004872:	4543      	cmp	r3, r8
 8004874:	f77f af75 	ble.w	8004762 <_printf_float+0x21a>
 8004878:	2301      	movs	r3, #1
 800487a:	4652      	mov	r2, sl
 800487c:	4631      	mov	r1, r6
 800487e:	4628      	mov	r0, r5
 8004880:	47b8      	blx	r7
 8004882:	3001      	adds	r0, #1
 8004884:	f43f aeae 	beq.w	80045e4 <_printf_float+0x9c>
 8004888:	f108 0801 	add.w	r8, r8, #1
 800488c:	e7ec      	b.n	8004868 <_printf_float+0x320>
 800488e:	4613      	mov	r3, r2
 8004890:	4631      	mov	r1, r6
 8004892:	4642      	mov	r2, r8
 8004894:	4628      	mov	r0, r5
 8004896:	47b8      	blx	r7
 8004898:	3001      	adds	r0, #1
 800489a:	d1bf      	bne.n	800481c <_printf_float+0x2d4>
 800489c:	e6a2      	b.n	80045e4 <_printf_float+0x9c>
 800489e:	2301      	movs	r3, #1
 80048a0:	4631      	mov	r1, r6
 80048a2:	4628      	mov	r0, r5
 80048a4:	9204      	str	r2, [sp, #16]
 80048a6:	47b8      	blx	r7
 80048a8:	3001      	adds	r0, #1
 80048aa:	f43f ae9b 	beq.w	80045e4 <_printf_float+0x9c>
 80048ae:	9b05      	ldr	r3, [sp, #20]
 80048b0:	9a04      	ldr	r2, [sp, #16]
 80048b2:	3301      	adds	r3, #1
 80048b4:	9305      	str	r3, [sp, #20]
 80048b6:	e7b7      	b.n	8004828 <_printf_float+0x2e0>
 80048b8:	4653      	mov	r3, sl
 80048ba:	465a      	mov	r2, fp
 80048bc:	4631      	mov	r1, r6
 80048be:	4628      	mov	r0, r5
 80048c0:	47b8      	blx	r7
 80048c2:	3001      	adds	r0, #1
 80048c4:	d1be      	bne.n	8004844 <_printf_float+0x2fc>
 80048c6:	e68d      	b.n	80045e4 <_printf_float+0x9c>
 80048c8:	9a04      	ldr	r2, [sp, #16]
 80048ca:	464b      	mov	r3, r9
 80048cc:	4442      	add	r2, r8
 80048ce:	4631      	mov	r1, r6
 80048d0:	4628      	mov	r0, r5
 80048d2:	47b8      	blx	r7
 80048d4:	3001      	adds	r0, #1
 80048d6:	d1c1      	bne.n	800485c <_printf_float+0x314>
 80048d8:	e684      	b.n	80045e4 <_printf_float+0x9c>
 80048da:	9a08      	ldr	r2, [sp, #32]
 80048dc:	2a01      	cmp	r2, #1
 80048de:	dc01      	bgt.n	80048e4 <_printf_float+0x39c>
 80048e0:	07db      	lsls	r3, r3, #31
 80048e2:	d537      	bpl.n	8004954 <_printf_float+0x40c>
 80048e4:	2301      	movs	r3, #1
 80048e6:	4642      	mov	r2, r8
 80048e8:	4631      	mov	r1, r6
 80048ea:	4628      	mov	r0, r5
 80048ec:	47b8      	blx	r7
 80048ee:	3001      	adds	r0, #1
 80048f0:	f43f ae78 	beq.w	80045e4 <_printf_float+0x9c>
 80048f4:	4653      	mov	r3, sl
 80048f6:	465a      	mov	r2, fp
 80048f8:	4631      	mov	r1, r6
 80048fa:	4628      	mov	r0, r5
 80048fc:	47b8      	blx	r7
 80048fe:	3001      	adds	r0, #1
 8004900:	f43f ae70 	beq.w	80045e4 <_printf_float+0x9c>
 8004904:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004908:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800490c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004910:	d01b      	beq.n	800494a <_printf_float+0x402>
 8004912:	9b08      	ldr	r3, [sp, #32]
 8004914:	f108 0201 	add.w	r2, r8, #1
 8004918:	3b01      	subs	r3, #1
 800491a:	4631      	mov	r1, r6
 800491c:	4628      	mov	r0, r5
 800491e:	47b8      	blx	r7
 8004920:	3001      	adds	r0, #1
 8004922:	d10e      	bne.n	8004942 <_printf_float+0x3fa>
 8004924:	e65e      	b.n	80045e4 <_printf_float+0x9c>
 8004926:	2301      	movs	r3, #1
 8004928:	464a      	mov	r2, r9
 800492a:	4631      	mov	r1, r6
 800492c:	4628      	mov	r0, r5
 800492e:	47b8      	blx	r7
 8004930:	3001      	adds	r0, #1
 8004932:	f43f ae57 	beq.w	80045e4 <_printf_float+0x9c>
 8004936:	f108 0801 	add.w	r8, r8, #1
 800493a:	9b08      	ldr	r3, [sp, #32]
 800493c:	3b01      	subs	r3, #1
 800493e:	4543      	cmp	r3, r8
 8004940:	dcf1      	bgt.n	8004926 <_printf_float+0x3de>
 8004942:	9b04      	ldr	r3, [sp, #16]
 8004944:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004948:	e6db      	b.n	8004702 <_printf_float+0x1ba>
 800494a:	f04f 0800 	mov.w	r8, #0
 800494e:	f104 091a 	add.w	r9, r4, #26
 8004952:	e7f2      	b.n	800493a <_printf_float+0x3f2>
 8004954:	2301      	movs	r3, #1
 8004956:	4642      	mov	r2, r8
 8004958:	e7df      	b.n	800491a <_printf_float+0x3d2>
 800495a:	2301      	movs	r3, #1
 800495c:	464a      	mov	r2, r9
 800495e:	4631      	mov	r1, r6
 8004960:	4628      	mov	r0, r5
 8004962:	47b8      	blx	r7
 8004964:	3001      	adds	r0, #1
 8004966:	f43f ae3d 	beq.w	80045e4 <_printf_float+0x9c>
 800496a:	f108 0801 	add.w	r8, r8, #1
 800496e:	68e3      	ldr	r3, [r4, #12]
 8004970:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004972:	1a5b      	subs	r3, r3, r1
 8004974:	4543      	cmp	r3, r8
 8004976:	dcf0      	bgt.n	800495a <_printf_float+0x412>
 8004978:	e6f7      	b.n	800476a <_printf_float+0x222>
 800497a:	f04f 0800 	mov.w	r8, #0
 800497e:	f104 0919 	add.w	r9, r4, #25
 8004982:	e7f4      	b.n	800496e <_printf_float+0x426>

08004984 <_printf_common>:
 8004984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004988:	4616      	mov	r6, r2
 800498a:	4699      	mov	r9, r3
 800498c:	688a      	ldr	r2, [r1, #8]
 800498e:	690b      	ldr	r3, [r1, #16]
 8004990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004994:	4293      	cmp	r3, r2
 8004996:	bfb8      	it	lt
 8004998:	4613      	movlt	r3, r2
 800499a:	6033      	str	r3, [r6, #0]
 800499c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049a0:	4607      	mov	r7, r0
 80049a2:	460c      	mov	r4, r1
 80049a4:	b10a      	cbz	r2, 80049aa <_printf_common+0x26>
 80049a6:	3301      	adds	r3, #1
 80049a8:	6033      	str	r3, [r6, #0]
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	0699      	lsls	r1, r3, #26
 80049ae:	bf42      	ittt	mi
 80049b0:	6833      	ldrmi	r3, [r6, #0]
 80049b2:	3302      	addmi	r3, #2
 80049b4:	6033      	strmi	r3, [r6, #0]
 80049b6:	6825      	ldr	r5, [r4, #0]
 80049b8:	f015 0506 	ands.w	r5, r5, #6
 80049bc:	d106      	bne.n	80049cc <_printf_common+0x48>
 80049be:	f104 0a19 	add.w	sl, r4, #25
 80049c2:	68e3      	ldr	r3, [r4, #12]
 80049c4:	6832      	ldr	r2, [r6, #0]
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	42ab      	cmp	r3, r5
 80049ca:	dc26      	bgt.n	8004a1a <_printf_common+0x96>
 80049cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049d0:	1e13      	subs	r3, r2, #0
 80049d2:	6822      	ldr	r2, [r4, #0]
 80049d4:	bf18      	it	ne
 80049d6:	2301      	movne	r3, #1
 80049d8:	0692      	lsls	r2, r2, #26
 80049da:	d42b      	bmi.n	8004a34 <_printf_common+0xb0>
 80049dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049e0:	4649      	mov	r1, r9
 80049e2:	4638      	mov	r0, r7
 80049e4:	47c0      	blx	r8
 80049e6:	3001      	adds	r0, #1
 80049e8:	d01e      	beq.n	8004a28 <_printf_common+0xa4>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	68e5      	ldr	r5, [r4, #12]
 80049ee:	6832      	ldr	r2, [r6, #0]
 80049f0:	f003 0306 	and.w	r3, r3, #6
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	bf08      	it	eq
 80049f8:	1aad      	subeq	r5, r5, r2
 80049fa:	68a3      	ldr	r3, [r4, #8]
 80049fc:	6922      	ldr	r2, [r4, #16]
 80049fe:	bf0c      	ite	eq
 8004a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a04:	2500      	movne	r5, #0
 8004a06:	4293      	cmp	r3, r2
 8004a08:	bfc4      	itt	gt
 8004a0a:	1a9b      	subgt	r3, r3, r2
 8004a0c:	18ed      	addgt	r5, r5, r3
 8004a0e:	2600      	movs	r6, #0
 8004a10:	341a      	adds	r4, #26
 8004a12:	42b5      	cmp	r5, r6
 8004a14:	d11a      	bne.n	8004a4c <_printf_common+0xc8>
 8004a16:	2000      	movs	r0, #0
 8004a18:	e008      	b.n	8004a2c <_printf_common+0xa8>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	4652      	mov	r2, sl
 8004a1e:	4649      	mov	r1, r9
 8004a20:	4638      	mov	r0, r7
 8004a22:	47c0      	blx	r8
 8004a24:	3001      	adds	r0, #1
 8004a26:	d103      	bne.n	8004a30 <_printf_common+0xac>
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a30:	3501      	adds	r5, #1
 8004a32:	e7c6      	b.n	80049c2 <_printf_common+0x3e>
 8004a34:	18e1      	adds	r1, r4, r3
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	2030      	movs	r0, #48	; 0x30
 8004a3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a3e:	4422      	add	r2, r4
 8004a40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a48:	3302      	adds	r3, #2
 8004a4a:	e7c7      	b.n	80049dc <_printf_common+0x58>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	4622      	mov	r2, r4
 8004a50:	4649      	mov	r1, r9
 8004a52:	4638      	mov	r0, r7
 8004a54:	47c0      	blx	r8
 8004a56:	3001      	adds	r0, #1
 8004a58:	d0e6      	beq.n	8004a28 <_printf_common+0xa4>
 8004a5a:	3601      	adds	r6, #1
 8004a5c:	e7d9      	b.n	8004a12 <_printf_common+0x8e>
	...

08004a60 <_printf_i>:
 8004a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a64:	460c      	mov	r4, r1
 8004a66:	4691      	mov	r9, r2
 8004a68:	7e27      	ldrb	r7, [r4, #24]
 8004a6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a6c:	2f78      	cmp	r7, #120	; 0x78
 8004a6e:	4680      	mov	r8, r0
 8004a70:	469a      	mov	sl, r3
 8004a72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a76:	d807      	bhi.n	8004a88 <_printf_i+0x28>
 8004a78:	2f62      	cmp	r7, #98	; 0x62
 8004a7a:	d80a      	bhi.n	8004a92 <_printf_i+0x32>
 8004a7c:	2f00      	cmp	r7, #0
 8004a7e:	f000 80d8 	beq.w	8004c32 <_printf_i+0x1d2>
 8004a82:	2f58      	cmp	r7, #88	; 0x58
 8004a84:	f000 80a3 	beq.w	8004bce <_printf_i+0x16e>
 8004a88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a90:	e03a      	b.n	8004b08 <_printf_i+0xa8>
 8004a92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a96:	2b15      	cmp	r3, #21
 8004a98:	d8f6      	bhi.n	8004a88 <_printf_i+0x28>
 8004a9a:	a001      	add	r0, pc, #4	; (adr r0, 8004aa0 <_printf_i+0x40>)
 8004a9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004aa0:	08004af9 	.word	0x08004af9
 8004aa4:	08004b0d 	.word	0x08004b0d
 8004aa8:	08004a89 	.word	0x08004a89
 8004aac:	08004a89 	.word	0x08004a89
 8004ab0:	08004a89 	.word	0x08004a89
 8004ab4:	08004a89 	.word	0x08004a89
 8004ab8:	08004b0d 	.word	0x08004b0d
 8004abc:	08004a89 	.word	0x08004a89
 8004ac0:	08004a89 	.word	0x08004a89
 8004ac4:	08004a89 	.word	0x08004a89
 8004ac8:	08004a89 	.word	0x08004a89
 8004acc:	08004c19 	.word	0x08004c19
 8004ad0:	08004b3d 	.word	0x08004b3d
 8004ad4:	08004bfb 	.word	0x08004bfb
 8004ad8:	08004a89 	.word	0x08004a89
 8004adc:	08004a89 	.word	0x08004a89
 8004ae0:	08004c3b 	.word	0x08004c3b
 8004ae4:	08004a89 	.word	0x08004a89
 8004ae8:	08004b3d 	.word	0x08004b3d
 8004aec:	08004a89 	.word	0x08004a89
 8004af0:	08004a89 	.word	0x08004a89
 8004af4:	08004c03 	.word	0x08004c03
 8004af8:	680b      	ldr	r3, [r1, #0]
 8004afa:	1d1a      	adds	r2, r3, #4
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	600a      	str	r2, [r1, #0]
 8004b00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0a3      	b.n	8004c54 <_printf_i+0x1f4>
 8004b0c:	6825      	ldr	r5, [r4, #0]
 8004b0e:	6808      	ldr	r0, [r1, #0]
 8004b10:	062e      	lsls	r6, r5, #24
 8004b12:	f100 0304 	add.w	r3, r0, #4
 8004b16:	d50a      	bpl.n	8004b2e <_printf_i+0xce>
 8004b18:	6805      	ldr	r5, [r0, #0]
 8004b1a:	600b      	str	r3, [r1, #0]
 8004b1c:	2d00      	cmp	r5, #0
 8004b1e:	da03      	bge.n	8004b28 <_printf_i+0xc8>
 8004b20:	232d      	movs	r3, #45	; 0x2d
 8004b22:	426d      	negs	r5, r5
 8004b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b28:	485e      	ldr	r0, [pc, #376]	; (8004ca4 <_printf_i+0x244>)
 8004b2a:	230a      	movs	r3, #10
 8004b2c:	e019      	b.n	8004b62 <_printf_i+0x102>
 8004b2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b32:	6805      	ldr	r5, [r0, #0]
 8004b34:	600b      	str	r3, [r1, #0]
 8004b36:	bf18      	it	ne
 8004b38:	b22d      	sxthne	r5, r5
 8004b3a:	e7ef      	b.n	8004b1c <_printf_i+0xbc>
 8004b3c:	680b      	ldr	r3, [r1, #0]
 8004b3e:	6825      	ldr	r5, [r4, #0]
 8004b40:	1d18      	adds	r0, r3, #4
 8004b42:	6008      	str	r0, [r1, #0]
 8004b44:	0628      	lsls	r0, r5, #24
 8004b46:	d501      	bpl.n	8004b4c <_printf_i+0xec>
 8004b48:	681d      	ldr	r5, [r3, #0]
 8004b4a:	e002      	b.n	8004b52 <_printf_i+0xf2>
 8004b4c:	0669      	lsls	r1, r5, #25
 8004b4e:	d5fb      	bpl.n	8004b48 <_printf_i+0xe8>
 8004b50:	881d      	ldrh	r5, [r3, #0]
 8004b52:	4854      	ldr	r0, [pc, #336]	; (8004ca4 <_printf_i+0x244>)
 8004b54:	2f6f      	cmp	r7, #111	; 0x6f
 8004b56:	bf0c      	ite	eq
 8004b58:	2308      	moveq	r3, #8
 8004b5a:	230a      	movne	r3, #10
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b62:	6866      	ldr	r6, [r4, #4]
 8004b64:	60a6      	str	r6, [r4, #8]
 8004b66:	2e00      	cmp	r6, #0
 8004b68:	bfa2      	ittt	ge
 8004b6a:	6821      	ldrge	r1, [r4, #0]
 8004b6c:	f021 0104 	bicge.w	r1, r1, #4
 8004b70:	6021      	strge	r1, [r4, #0]
 8004b72:	b90d      	cbnz	r5, 8004b78 <_printf_i+0x118>
 8004b74:	2e00      	cmp	r6, #0
 8004b76:	d04d      	beq.n	8004c14 <_printf_i+0x1b4>
 8004b78:	4616      	mov	r6, r2
 8004b7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b7e:	fb03 5711 	mls	r7, r3, r1, r5
 8004b82:	5dc7      	ldrb	r7, [r0, r7]
 8004b84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b88:	462f      	mov	r7, r5
 8004b8a:	42bb      	cmp	r3, r7
 8004b8c:	460d      	mov	r5, r1
 8004b8e:	d9f4      	bls.n	8004b7a <_printf_i+0x11a>
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d10b      	bne.n	8004bac <_printf_i+0x14c>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	07df      	lsls	r7, r3, #31
 8004b98:	d508      	bpl.n	8004bac <_printf_i+0x14c>
 8004b9a:	6923      	ldr	r3, [r4, #16]
 8004b9c:	6861      	ldr	r1, [r4, #4]
 8004b9e:	4299      	cmp	r1, r3
 8004ba0:	bfde      	ittt	le
 8004ba2:	2330      	movle	r3, #48	; 0x30
 8004ba4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ba8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bac:	1b92      	subs	r2, r2, r6
 8004bae:	6122      	str	r2, [r4, #16]
 8004bb0:	f8cd a000 	str.w	sl, [sp]
 8004bb4:	464b      	mov	r3, r9
 8004bb6:	aa03      	add	r2, sp, #12
 8004bb8:	4621      	mov	r1, r4
 8004bba:	4640      	mov	r0, r8
 8004bbc:	f7ff fee2 	bl	8004984 <_printf_common>
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d14c      	bne.n	8004c5e <_printf_i+0x1fe>
 8004bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc8:	b004      	add	sp, #16
 8004bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bce:	4835      	ldr	r0, [pc, #212]	; (8004ca4 <_printf_i+0x244>)
 8004bd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	680e      	ldr	r6, [r1, #0]
 8004bd8:	061f      	lsls	r7, r3, #24
 8004bda:	f856 5b04 	ldr.w	r5, [r6], #4
 8004bde:	600e      	str	r6, [r1, #0]
 8004be0:	d514      	bpl.n	8004c0c <_printf_i+0x1ac>
 8004be2:	07d9      	lsls	r1, r3, #31
 8004be4:	bf44      	itt	mi
 8004be6:	f043 0320 	orrmi.w	r3, r3, #32
 8004bea:	6023      	strmi	r3, [r4, #0]
 8004bec:	b91d      	cbnz	r5, 8004bf6 <_printf_i+0x196>
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	f023 0320 	bic.w	r3, r3, #32
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	2310      	movs	r3, #16
 8004bf8:	e7b0      	b.n	8004b5c <_printf_i+0xfc>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	f043 0320 	orr.w	r3, r3, #32
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	2378      	movs	r3, #120	; 0x78
 8004c04:	4828      	ldr	r0, [pc, #160]	; (8004ca8 <_printf_i+0x248>)
 8004c06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c0a:	e7e3      	b.n	8004bd4 <_printf_i+0x174>
 8004c0c:	065e      	lsls	r6, r3, #25
 8004c0e:	bf48      	it	mi
 8004c10:	b2ad      	uxthmi	r5, r5
 8004c12:	e7e6      	b.n	8004be2 <_printf_i+0x182>
 8004c14:	4616      	mov	r6, r2
 8004c16:	e7bb      	b.n	8004b90 <_printf_i+0x130>
 8004c18:	680b      	ldr	r3, [r1, #0]
 8004c1a:	6826      	ldr	r6, [r4, #0]
 8004c1c:	6960      	ldr	r0, [r4, #20]
 8004c1e:	1d1d      	adds	r5, r3, #4
 8004c20:	600d      	str	r5, [r1, #0]
 8004c22:	0635      	lsls	r5, r6, #24
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	d501      	bpl.n	8004c2c <_printf_i+0x1cc>
 8004c28:	6018      	str	r0, [r3, #0]
 8004c2a:	e002      	b.n	8004c32 <_printf_i+0x1d2>
 8004c2c:	0671      	lsls	r1, r6, #25
 8004c2e:	d5fb      	bpl.n	8004c28 <_printf_i+0x1c8>
 8004c30:	8018      	strh	r0, [r3, #0]
 8004c32:	2300      	movs	r3, #0
 8004c34:	6123      	str	r3, [r4, #16]
 8004c36:	4616      	mov	r6, r2
 8004c38:	e7ba      	b.n	8004bb0 <_printf_i+0x150>
 8004c3a:	680b      	ldr	r3, [r1, #0]
 8004c3c:	1d1a      	adds	r2, r3, #4
 8004c3e:	600a      	str	r2, [r1, #0]
 8004c40:	681e      	ldr	r6, [r3, #0]
 8004c42:	6862      	ldr	r2, [r4, #4]
 8004c44:	2100      	movs	r1, #0
 8004c46:	4630      	mov	r0, r6
 8004c48:	f7fb fb02 	bl	8000250 <memchr>
 8004c4c:	b108      	cbz	r0, 8004c52 <_printf_i+0x1f2>
 8004c4e:	1b80      	subs	r0, r0, r6
 8004c50:	6060      	str	r0, [r4, #4]
 8004c52:	6863      	ldr	r3, [r4, #4]
 8004c54:	6123      	str	r3, [r4, #16]
 8004c56:	2300      	movs	r3, #0
 8004c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c5c:	e7a8      	b.n	8004bb0 <_printf_i+0x150>
 8004c5e:	6923      	ldr	r3, [r4, #16]
 8004c60:	4632      	mov	r2, r6
 8004c62:	4649      	mov	r1, r9
 8004c64:	4640      	mov	r0, r8
 8004c66:	47d0      	blx	sl
 8004c68:	3001      	adds	r0, #1
 8004c6a:	d0ab      	beq.n	8004bc4 <_printf_i+0x164>
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	079b      	lsls	r3, r3, #30
 8004c70:	d413      	bmi.n	8004c9a <_printf_i+0x23a>
 8004c72:	68e0      	ldr	r0, [r4, #12]
 8004c74:	9b03      	ldr	r3, [sp, #12]
 8004c76:	4298      	cmp	r0, r3
 8004c78:	bfb8      	it	lt
 8004c7a:	4618      	movlt	r0, r3
 8004c7c:	e7a4      	b.n	8004bc8 <_printf_i+0x168>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	4632      	mov	r2, r6
 8004c82:	4649      	mov	r1, r9
 8004c84:	4640      	mov	r0, r8
 8004c86:	47d0      	blx	sl
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d09b      	beq.n	8004bc4 <_printf_i+0x164>
 8004c8c:	3501      	adds	r5, #1
 8004c8e:	68e3      	ldr	r3, [r4, #12]
 8004c90:	9903      	ldr	r1, [sp, #12]
 8004c92:	1a5b      	subs	r3, r3, r1
 8004c94:	42ab      	cmp	r3, r5
 8004c96:	dcf2      	bgt.n	8004c7e <_printf_i+0x21e>
 8004c98:	e7eb      	b.n	8004c72 <_printf_i+0x212>
 8004c9a:	2500      	movs	r5, #0
 8004c9c:	f104 0619 	add.w	r6, r4, #25
 8004ca0:	e7f5      	b.n	8004c8e <_printf_i+0x22e>
 8004ca2:	bf00      	nop
 8004ca4:	080070fa 	.word	0x080070fa
 8004ca8:	0800710b 	.word	0x0800710b

08004cac <iprintf>:
 8004cac:	b40f      	push	{r0, r1, r2, r3}
 8004cae:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <iprintf+0x2c>)
 8004cb0:	b513      	push	{r0, r1, r4, lr}
 8004cb2:	681c      	ldr	r4, [r3, #0]
 8004cb4:	b124      	cbz	r4, 8004cc0 <iprintf+0x14>
 8004cb6:	69a3      	ldr	r3, [r4, #24]
 8004cb8:	b913      	cbnz	r3, 8004cc0 <iprintf+0x14>
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f000 fe96 	bl	80059ec <__sinit>
 8004cc0:	ab05      	add	r3, sp, #20
 8004cc2:	9a04      	ldr	r2, [sp, #16]
 8004cc4:	68a1      	ldr	r1, [r4, #8]
 8004cc6:	9301      	str	r3, [sp, #4]
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f001 fd09 	bl	80066e0 <_vfiprintf_r>
 8004cce:	b002      	add	sp, #8
 8004cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cd4:	b004      	add	sp, #16
 8004cd6:	4770      	bx	lr
 8004cd8:	2000000c 	.word	0x2000000c

08004cdc <siprintf>:
 8004cdc:	b40e      	push	{r1, r2, r3}
 8004cde:	b500      	push	{lr}
 8004ce0:	b09c      	sub	sp, #112	; 0x70
 8004ce2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ce4:	9002      	str	r0, [sp, #8]
 8004ce6:	9006      	str	r0, [sp, #24]
 8004ce8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cec:	4809      	ldr	r0, [pc, #36]	; (8004d14 <siprintf+0x38>)
 8004cee:	9107      	str	r1, [sp, #28]
 8004cf0:	9104      	str	r1, [sp, #16]
 8004cf2:	4909      	ldr	r1, [pc, #36]	; (8004d18 <siprintf+0x3c>)
 8004cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cf8:	9105      	str	r1, [sp, #20]
 8004cfa:	6800      	ldr	r0, [r0, #0]
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	a902      	add	r1, sp, #8
 8004d00:	f001 fbc4 	bl	800648c <_svfiprintf_r>
 8004d04:	9b02      	ldr	r3, [sp, #8]
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]
 8004d0a:	b01c      	add	sp, #112	; 0x70
 8004d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d10:	b003      	add	sp, #12
 8004d12:	4770      	bx	lr
 8004d14:	2000000c 	.word	0x2000000c
 8004d18:	ffff0208 	.word	0xffff0208

08004d1c <quorem>:
 8004d1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d20:	6903      	ldr	r3, [r0, #16]
 8004d22:	690c      	ldr	r4, [r1, #16]
 8004d24:	42a3      	cmp	r3, r4
 8004d26:	4607      	mov	r7, r0
 8004d28:	f2c0 8081 	blt.w	8004e2e <quorem+0x112>
 8004d2c:	3c01      	subs	r4, #1
 8004d2e:	f101 0814 	add.w	r8, r1, #20
 8004d32:	f100 0514 	add.w	r5, r0, #20
 8004d36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d44:	3301      	adds	r3, #1
 8004d46:	429a      	cmp	r2, r3
 8004d48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d50:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d54:	d331      	bcc.n	8004dba <quorem+0x9e>
 8004d56:	f04f 0e00 	mov.w	lr, #0
 8004d5a:	4640      	mov	r0, r8
 8004d5c:	46ac      	mov	ip, r5
 8004d5e:	46f2      	mov	sl, lr
 8004d60:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d64:	b293      	uxth	r3, r2
 8004d66:	fb06 e303 	mla	r3, r6, r3, lr
 8004d6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	ebaa 0303 	sub.w	r3, sl, r3
 8004d74:	0c12      	lsrs	r2, r2, #16
 8004d76:	f8dc a000 	ldr.w	sl, [ip]
 8004d7a:	fb06 e202 	mla	r2, r6, r2, lr
 8004d7e:	fa13 f38a 	uxtah	r3, r3, sl
 8004d82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d86:	fa1f fa82 	uxth.w	sl, r2
 8004d8a:	f8dc 2000 	ldr.w	r2, [ip]
 8004d8e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004d92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d9c:	4581      	cmp	r9, r0
 8004d9e:	f84c 3b04 	str.w	r3, [ip], #4
 8004da2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004da6:	d2db      	bcs.n	8004d60 <quorem+0x44>
 8004da8:	f855 300b 	ldr.w	r3, [r5, fp]
 8004dac:	b92b      	cbnz	r3, 8004dba <quorem+0x9e>
 8004dae:	9b01      	ldr	r3, [sp, #4]
 8004db0:	3b04      	subs	r3, #4
 8004db2:	429d      	cmp	r5, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	d32e      	bcc.n	8004e16 <quorem+0xfa>
 8004db8:	613c      	str	r4, [r7, #16]
 8004dba:	4638      	mov	r0, r7
 8004dbc:	f001 f950 	bl	8006060 <__mcmp>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	db24      	blt.n	8004e0e <quorem+0xf2>
 8004dc4:	3601      	adds	r6, #1
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f04f 0c00 	mov.w	ip, #0
 8004dcc:	f858 2b04 	ldr.w	r2, [r8], #4
 8004dd0:	f8d0 e000 	ldr.w	lr, [r0]
 8004dd4:	b293      	uxth	r3, r2
 8004dd6:	ebac 0303 	sub.w	r3, ip, r3
 8004dda:	0c12      	lsrs	r2, r2, #16
 8004ddc:	fa13 f38e 	uxtah	r3, r3, lr
 8004de0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004de4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dee:	45c1      	cmp	r9, r8
 8004df0:	f840 3b04 	str.w	r3, [r0], #4
 8004df4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004df8:	d2e8      	bcs.n	8004dcc <quorem+0xb0>
 8004dfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004dfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e02:	b922      	cbnz	r2, 8004e0e <quorem+0xf2>
 8004e04:	3b04      	subs	r3, #4
 8004e06:	429d      	cmp	r5, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	d30a      	bcc.n	8004e22 <quorem+0x106>
 8004e0c:	613c      	str	r4, [r7, #16]
 8004e0e:	4630      	mov	r0, r6
 8004e10:	b003      	add	sp, #12
 8004e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e16:	6812      	ldr	r2, [r2, #0]
 8004e18:	3b04      	subs	r3, #4
 8004e1a:	2a00      	cmp	r2, #0
 8004e1c:	d1cc      	bne.n	8004db8 <quorem+0x9c>
 8004e1e:	3c01      	subs	r4, #1
 8004e20:	e7c7      	b.n	8004db2 <quorem+0x96>
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	3b04      	subs	r3, #4
 8004e26:	2a00      	cmp	r2, #0
 8004e28:	d1f0      	bne.n	8004e0c <quorem+0xf0>
 8004e2a:	3c01      	subs	r4, #1
 8004e2c:	e7eb      	b.n	8004e06 <quorem+0xea>
 8004e2e:	2000      	movs	r0, #0
 8004e30:	e7ee      	b.n	8004e10 <quorem+0xf4>
 8004e32:	0000      	movs	r0, r0
 8004e34:	0000      	movs	r0, r0
	...

08004e38 <_dtoa_r>:
 8004e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3c:	ec59 8b10 	vmov	r8, r9, d0
 8004e40:	b095      	sub	sp, #84	; 0x54
 8004e42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e44:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8004e46:	9107      	str	r1, [sp, #28]
 8004e48:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004e4c:	4606      	mov	r6, r0
 8004e4e:	9209      	str	r2, [sp, #36]	; 0x24
 8004e50:	9310      	str	r3, [sp, #64]	; 0x40
 8004e52:	b975      	cbnz	r5, 8004e72 <_dtoa_r+0x3a>
 8004e54:	2010      	movs	r0, #16
 8004e56:	f000 fe6f 	bl	8005b38 <malloc>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	6270      	str	r0, [r6, #36]	; 0x24
 8004e5e:	b920      	cbnz	r0, 8004e6a <_dtoa_r+0x32>
 8004e60:	4bab      	ldr	r3, [pc, #684]	; (8005110 <_dtoa_r+0x2d8>)
 8004e62:	21ea      	movs	r1, #234	; 0xea
 8004e64:	48ab      	ldr	r0, [pc, #684]	; (8005114 <_dtoa_r+0x2dc>)
 8004e66:	f001 fe91 	bl	8006b8c <__assert_func>
 8004e6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e6e:	6005      	str	r5, [r0, #0]
 8004e70:	60c5      	str	r5, [r0, #12]
 8004e72:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004e74:	6819      	ldr	r1, [r3, #0]
 8004e76:	b151      	cbz	r1, 8004e8e <_dtoa_r+0x56>
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	604a      	str	r2, [r1, #4]
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	4093      	lsls	r3, r2
 8004e80:	608b      	str	r3, [r1, #8]
 8004e82:	4630      	mov	r0, r6
 8004e84:	f000 feae 	bl	8005be4 <_Bfree>
 8004e88:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	f1b9 0300 	subs.w	r3, r9, #0
 8004e92:	bfbb      	ittet	lt
 8004e94:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004e98:	9303      	strlt	r3, [sp, #12]
 8004e9a:	2300      	movge	r3, #0
 8004e9c:	2201      	movlt	r2, #1
 8004e9e:	bfac      	ite	ge
 8004ea0:	6023      	strge	r3, [r4, #0]
 8004ea2:	6022      	strlt	r2, [r4, #0]
 8004ea4:	4b9c      	ldr	r3, [pc, #624]	; (8005118 <_dtoa_r+0x2e0>)
 8004ea6:	9c03      	ldr	r4, [sp, #12]
 8004ea8:	43a3      	bics	r3, r4
 8004eaa:	d11a      	bne.n	8004ee2 <_dtoa_r+0xaa>
 8004eac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004eae:	f242 730f 	movw	r3, #9999	; 0x270f
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004eb8:	ea53 0308 	orrs.w	r3, r3, r8
 8004ebc:	f000 8512 	beq.w	80058e4 <_dtoa_r+0xaac>
 8004ec0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004ec2:	b953      	cbnz	r3, 8004eda <_dtoa_r+0xa2>
 8004ec4:	4b95      	ldr	r3, [pc, #596]	; (800511c <_dtoa_r+0x2e4>)
 8004ec6:	e01f      	b.n	8004f08 <_dtoa_r+0xd0>
 8004ec8:	4b95      	ldr	r3, [pc, #596]	; (8005120 <_dtoa_r+0x2e8>)
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	3308      	adds	r3, #8
 8004ece:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	9800      	ldr	r0, [sp, #0]
 8004ed4:	b015      	add	sp, #84	; 0x54
 8004ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eda:	4b90      	ldr	r3, [pc, #576]	; (800511c <_dtoa_r+0x2e4>)
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	3303      	adds	r3, #3
 8004ee0:	e7f5      	b.n	8004ece <_dtoa_r+0x96>
 8004ee2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004ee6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eee:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004ef2:	d10b      	bne.n	8004f0c <_dtoa_r+0xd4>
 8004ef4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 84ee 	beq.w	80058de <_dtoa_r+0xaa6>
 8004f02:	4888      	ldr	r0, [pc, #544]	; (8005124 <_dtoa_r+0x2ec>)
 8004f04:	6018      	str	r0, [r3, #0]
 8004f06:	1e43      	subs	r3, r0, #1
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	e7e2      	b.n	8004ed2 <_dtoa_r+0x9a>
 8004f0c:	a913      	add	r1, sp, #76	; 0x4c
 8004f0e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004f12:	aa12      	add	r2, sp, #72	; 0x48
 8004f14:	4630      	mov	r0, r6
 8004f16:	f001 f947 	bl	80061a8 <__d2b>
 8004f1a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8004f1e:	4605      	mov	r5, r0
 8004f20:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004f22:	2900      	cmp	r1, #0
 8004f24:	d047      	beq.n	8004fb6 <_dtoa_r+0x17e>
 8004f26:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004f28:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004f2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f30:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8004f34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004f38:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004f3c:	2400      	movs	r4, #0
 8004f3e:	ec43 2b16 	vmov	d6, r2, r3
 8004f42:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8004f46:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80050f8 <_dtoa_r+0x2c0>
 8004f4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004f4e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8005100 <_dtoa_r+0x2c8>
 8004f52:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004f56:	eeb0 7b46 	vmov.f64	d7, d6
 8004f5a:	ee06 1a90 	vmov	s13, r1
 8004f5e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8004f62:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8005108 <_dtoa_r+0x2d0>
 8004f66:	eea5 7b06 	vfma.f64	d7, d5, d6
 8004f6a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004f6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f76:	ee16 ba90 	vmov	fp, s13
 8004f7a:	9411      	str	r4, [sp, #68]	; 0x44
 8004f7c:	d508      	bpl.n	8004f90 <_dtoa_r+0x158>
 8004f7e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004f82:	eeb4 6b47 	vcmp.f64	d6, d7
 8004f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f8a:	bf18      	it	ne
 8004f8c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8004f90:	f1bb 0f16 	cmp.w	fp, #22
 8004f94:	d832      	bhi.n	8004ffc <_dtoa_r+0x1c4>
 8004f96:	4b64      	ldr	r3, [pc, #400]	; (8005128 <_dtoa_r+0x2f0>)
 8004f98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004f9c:	ed93 7b00 	vldr	d7, [r3]
 8004fa0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8004fa4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fac:	d501      	bpl.n	8004fb2 <_dtoa_r+0x17a>
 8004fae:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e023      	b.n	8004ffe <_dtoa_r+0x1c6>
 8004fb6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004fb8:	4401      	add	r1, r0
 8004fba:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	bfc3      	ittte	gt
 8004fc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004fc6:	fa04 f303 	lslgt.w	r3, r4, r3
 8004fca:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8004fce:	f1c3 0320 	rsble	r3, r3, #32
 8004fd2:	bfc6      	itte	gt
 8004fd4:	fa28 f804 	lsrgt.w	r8, r8, r4
 8004fd8:	ea43 0308 	orrgt.w	r3, r3, r8
 8004fdc:	fa08 f303 	lslle.w	r3, r8, r3
 8004fe0:	ee07 3a90 	vmov	s15, r3
 8004fe4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004fe8:	3901      	subs	r1, #1
 8004fea:	ed8d 7b00 	vstr	d7, [sp]
 8004fee:	9c01      	ldr	r4, [sp, #4]
 8004ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ff4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8004ff8:	2401      	movs	r4, #1
 8004ffa:	e7a0      	b.n	8004f3e <_dtoa_r+0x106>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005000:	1a43      	subs	r3, r0, r1
 8005002:	1e5a      	subs	r2, r3, #1
 8005004:	bf45      	ittet	mi
 8005006:	f1c3 0301 	rsbmi	r3, r3, #1
 800500a:	9305      	strmi	r3, [sp, #20]
 800500c:	2300      	movpl	r3, #0
 800500e:	2300      	movmi	r3, #0
 8005010:	9206      	str	r2, [sp, #24]
 8005012:	bf54      	ite	pl
 8005014:	9305      	strpl	r3, [sp, #20]
 8005016:	9306      	strmi	r3, [sp, #24]
 8005018:	f1bb 0f00 	cmp.w	fp, #0
 800501c:	db18      	blt.n	8005050 <_dtoa_r+0x218>
 800501e:	9b06      	ldr	r3, [sp, #24]
 8005020:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005024:	445b      	add	r3, fp
 8005026:	9306      	str	r3, [sp, #24]
 8005028:	2300      	movs	r3, #0
 800502a:	9a07      	ldr	r2, [sp, #28]
 800502c:	2a09      	cmp	r2, #9
 800502e:	d849      	bhi.n	80050c4 <_dtoa_r+0x28c>
 8005030:	2a05      	cmp	r2, #5
 8005032:	bfc4      	itt	gt
 8005034:	3a04      	subgt	r2, #4
 8005036:	9207      	strgt	r2, [sp, #28]
 8005038:	9a07      	ldr	r2, [sp, #28]
 800503a:	f1a2 0202 	sub.w	r2, r2, #2
 800503e:	bfcc      	ite	gt
 8005040:	2400      	movgt	r4, #0
 8005042:	2401      	movle	r4, #1
 8005044:	2a03      	cmp	r2, #3
 8005046:	d848      	bhi.n	80050da <_dtoa_r+0x2a2>
 8005048:	e8df f002 	tbb	[pc, r2]
 800504c:	3a2c2e0b 	.word	0x3a2c2e0b
 8005050:	9b05      	ldr	r3, [sp, #20]
 8005052:	2200      	movs	r2, #0
 8005054:	eba3 030b 	sub.w	r3, r3, fp
 8005058:	9305      	str	r3, [sp, #20]
 800505a:	920e      	str	r2, [sp, #56]	; 0x38
 800505c:	f1cb 0300 	rsb	r3, fp, #0
 8005060:	e7e3      	b.n	800502a <_dtoa_r+0x1f2>
 8005062:	2200      	movs	r2, #0
 8005064:	9208      	str	r2, [sp, #32]
 8005066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005068:	2a00      	cmp	r2, #0
 800506a:	dc39      	bgt.n	80050e0 <_dtoa_r+0x2a8>
 800506c:	f04f 0a01 	mov.w	sl, #1
 8005070:	46d1      	mov	r9, sl
 8005072:	4652      	mov	r2, sl
 8005074:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005078:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800507a:	2100      	movs	r1, #0
 800507c:	6079      	str	r1, [r7, #4]
 800507e:	2004      	movs	r0, #4
 8005080:	f100 0c14 	add.w	ip, r0, #20
 8005084:	4594      	cmp	ip, r2
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	d92f      	bls.n	80050ea <_dtoa_r+0x2b2>
 800508a:	4630      	mov	r0, r6
 800508c:	930c      	str	r3, [sp, #48]	; 0x30
 800508e:	f000 fd69 	bl	8005b64 <_Balloc>
 8005092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005094:	9000      	str	r0, [sp, #0]
 8005096:	4602      	mov	r2, r0
 8005098:	2800      	cmp	r0, #0
 800509a:	d149      	bne.n	8005130 <_dtoa_r+0x2f8>
 800509c:	4b23      	ldr	r3, [pc, #140]	; (800512c <_dtoa_r+0x2f4>)
 800509e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80050a2:	e6df      	b.n	8004e64 <_dtoa_r+0x2c>
 80050a4:	2201      	movs	r2, #1
 80050a6:	e7dd      	b.n	8005064 <_dtoa_r+0x22c>
 80050a8:	2200      	movs	r2, #0
 80050aa:	9208      	str	r2, [sp, #32]
 80050ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050ae:	eb0b 0a02 	add.w	sl, fp, r2
 80050b2:	f10a 0901 	add.w	r9, sl, #1
 80050b6:	464a      	mov	r2, r9
 80050b8:	2a01      	cmp	r2, #1
 80050ba:	bfb8      	it	lt
 80050bc:	2201      	movlt	r2, #1
 80050be:	e7db      	b.n	8005078 <_dtoa_r+0x240>
 80050c0:	2201      	movs	r2, #1
 80050c2:	e7f2      	b.n	80050aa <_dtoa_r+0x272>
 80050c4:	2401      	movs	r4, #1
 80050c6:	2200      	movs	r2, #0
 80050c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80050cc:	f04f 3aff 	mov.w	sl, #4294967295
 80050d0:	2100      	movs	r1, #0
 80050d2:	46d1      	mov	r9, sl
 80050d4:	2212      	movs	r2, #18
 80050d6:	9109      	str	r1, [sp, #36]	; 0x24
 80050d8:	e7ce      	b.n	8005078 <_dtoa_r+0x240>
 80050da:	2201      	movs	r2, #1
 80050dc:	9208      	str	r2, [sp, #32]
 80050de:	e7f5      	b.n	80050cc <_dtoa_r+0x294>
 80050e0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80050e4:	46d1      	mov	r9, sl
 80050e6:	4652      	mov	r2, sl
 80050e8:	e7c6      	b.n	8005078 <_dtoa_r+0x240>
 80050ea:	3101      	adds	r1, #1
 80050ec:	6079      	str	r1, [r7, #4]
 80050ee:	0040      	lsls	r0, r0, #1
 80050f0:	e7c6      	b.n	8005080 <_dtoa_r+0x248>
 80050f2:	bf00      	nop
 80050f4:	f3af 8000 	nop.w
 80050f8:	636f4361 	.word	0x636f4361
 80050fc:	3fd287a7 	.word	0x3fd287a7
 8005100:	8b60c8b3 	.word	0x8b60c8b3
 8005104:	3fc68a28 	.word	0x3fc68a28
 8005108:	509f79fb 	.word	0x509f79fb
 800510c:	3fd34413 	.word	0x3fd34413
 8005110:	08007129 	.word	0x08007129
 8005114:	08007140 	.word	0x08007140
 8005118:	7ff00000 	.word	0x7ff00000
 800511c:	08007125 	.word	0x08007125
 8005120:	0800711c 	.word	0x0800711c
 8005124:	080070f9 	.word	0x080070f9
 8005128:	08007298 	.word	0x08007298
 800512c:	0800719f 	.word	0x0800719f
 8005130:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8005132:	9900      	ldr	r1, [sp, #0]
 8005134:	6011      	str	r1, [r2, #0]
 8005136:	f1b9 0f0e 	cmp.w	r9, #14
 800513a:	d872      	bhi.n	8005222 <_dtoa_r+0x3ea>
 800513c:	2c00      	cmp	r4, #0
 800513e:	d070      	beq.n	8005222 <_dtoa_r+0x3ea>
 8005140:	f1bb 0f00 	cmp.w	fp, #0
 8005144:	f340 80a6 	ble.w	8005294 <_dtoa_r+0x45c>
 8005148:	49ca      	ldr	r1, [pc, #808]	; (8005474 <_dtoa_r+0x63c>)
 800514a:	f00b 020f 	and.w	r2, fp, #15
 800514e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8005152:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005156:	ed92 7b00 	vldr	d7, [r2]
 800515a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800515e:	f000 808d 	beq.w	800527c <_dtoa_r+0x444>
 8005162:	4ac5      	ldr	r2, [pc, #788]	; (8005478 <_dtoa_r+0x640>)
 8005164:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8005168:	ed92 6b08 	vldr	d6, [r2, #32]
 800516c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8005170:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005174:	f001 010f 	and.w	r1, r1, #15
 8005178:	2203      	movs	r2, #3
 800517a:	48bf      	ldr	r0, [pc, #764]	; (8005478 <_dtoa_r+0x640>)
 800517c:	2900      	cmp	r1, #0
 800517e:	d17f      	bne.n	8005280 <_dtoa_r+0x448>
 8005180:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005184:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005188:	ed8d 7b02 	vstr	d7, [sp, #8]
 800518c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800518e:	2900      	cmp	r1, #0
 8005190:	f000 80b2 	beq.w	80052f8 <_dtoa_r+0x4c0>
 8005194:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005198:	ed9d 7b02 	vldr	d7, [sp, #8]
 800519c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80051a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a4:	f140 80a8 	bpl.w	80052f8 <_dtoa_r+0x4c0>
 80051a8:	f1b9 0f00 	cmp.w	r9, #0
 80051ac:	f000 80a4 	beq.w	80052f8 <_dtoa_r+0x4c0>
 80051b0:	f1ba 0f00 	cmp.w	sl, #0
 80051b4:	dd31      	ble.n	800521a <_dtoa_r+0x3e2>
 80051b6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80051ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80051be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80051c2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80051c6:	3201      	adds	r2, #1
 80051c8:	4650      	mov	r0, sl
 80051ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 80051ce:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80051d2:	ee07 2a90 	vmov	s15, r2
 80051d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80051da:	eea7 5b06 	vfma.f64	d5, d7, d6
 80051de:	ed8d 5b02 	vstr	d5, [sp, #8]
 80051e2:	9c03      	ldr	r4, [sp, #12]
 80051e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80051e8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80051ec:	2800      	cmp	r0, #0
 80051ee:	f040 8086 	bne.w	80052fe <_dtoa_r+0x4c6>
 80051f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80051f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80051fa:	ec42 1b17 	vmov	d7, r1, r2
 80051fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005206:	f300 8272 	bgt.w	80056ee <_dtoa_r+0x8b6>
 800520a:	eeb1 7b47 	vneg.f64	d7, d7
 800520e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005216:	f100 8267 	bmi.w	80056e8 <_dtoa_r+0x8b0>
 800521a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800521e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005222:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005224:	2a00      	cmp	r2, #0
 8005226:	f2c0 8129 	blt.w	800547c <_dtoa_r+0x644>
 800522a:	f1bb 0f0e 	cmp.w	fp, #14
 800522e:	f300 8125 	bgt.w	800547c <_dtoa_r+0x644>
 8005232:	4b90      	ldr	r3, [pc, #576]	; (8005474 <_dtoa_r+0x63c>)
 8005234:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005238:	ed93 6b00 	vldr	d6, [r3]
 800523c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800523e:	2b00      	cmp	r3, #0
 8005240:	f280 80c3 	bge.w	80053ca <_dtoa_r+0x592>
 8005244:	f1b9 0f00 	cmp.w	r9, #0
 8005248:	f300 80bf 	bgt.w	80053ca <_dtoa_r+0x592>
 800524c:	f040 824c 	bne.w	80056e8 <_dtoa_r+0x8b0>
 8005250:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005254:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005258:	ed9d 7b02 	vldr	d7, [sp, #8]
 800525c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005264:	464c      	mov	r4, r9
 8005266:	464f      	mov	r7, r9
 8005268:	f280 8222 	bge.w	80056b0 <_dtoa_r+0x878>
 800526c:	f8dd 8000 	ldr.w	r8, [sp]
 8005270:	2331      	movs	r3, #49	; 0x31
 8005272:	f808 3b01 	strb.w	r3, [r8], #1
 8005276:	f10b 0b01 	add.w	fp, fp, #1
 800527a:	e21e      	b.n	80056ba <_dtoa_r+0x882>
 800527c:	2202      	movs	r2, #2
 800527e:	e77c      	b.n	800517a <_dtoa_r+0x342>
 8005280:	07cc      	lsls	r4, r1, #31
 8005282:	d504      	bpl.n	800528e <_dtoa_r+0x456>
 8005284:	ed90 6b00 	vldr	d6, [r0]
 8005288:	3201      	adds	r2, #1
 800528a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800528e:	1049      	asrs	r1, r1, #1
 8005290:	3008      	adds	r0, #8
 8005292:	e773      	b.n	800517c <_dtoa_r+0x344>
 8005294:	d02e      	beq.n	80052f4 <_dtoa_r+0x4bc>
 8005296:	f1cb 0100 	rsb	r1, fp, #0
 800529a:	4a76      	ldr	r2, [pc, #472]	; (8005474 <_dtoa_r+0x63c>)
 800529c:	f001 000f 	and.w	r0, r1, #15
 80052a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80052a4:	ed92 7b00 	vldr	d7, [r2]
 80052a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80052ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80052b0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80052b4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80052b8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80052bc:	486e      	ldr	r0, [pc, #440]	; (8005478 <_dtoa_r+0x640>)
 80052be:	1109      	asrs	r1, r1, #4
 80052c0:	2400      	movs	r4, #0
 80052c2:	2202      	movs	r2, #2
 80052c4:	b939      	cbnz	r1, 80052d6 <_dtoa_r+0x49e>
 80052c6:	2c00      	cmp	r4, #0
 80052c8:	f43f af60 	beq.w	800518c <_dtoa_r+0x354>
 80052cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052d4:	e75a      	b.n	800518c <_dtoa_r+0x354>
 80052d6:	07cf      	lsls	r7, r1, #31
 80052d8:	d509      	bpl.n	80052ee <_dtoa_r+0x4b6>
 80052da:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80052de:	ed90 7b00 	vldr	d7, [r0]
 80052e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80052e6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80052ea:	3201      	adds	r2, #1
 80052ec:	2401      	movs	r4, #1
 80052ee:	1049      	asrs	r1, r1, #1
 80052f0:	3008      	adds	r0, #8
 80052f2:	e7e7      	b.n	80052c4 <_dtoa_r+0x48c>
 80052f4:	2202      	movs	r2, #2
 80052f6:	e749      	b.n	800518c <_dtoa_r+0x354>
 80052f8:	465f      	mov	r7, fp
 80052fa:	4648      	mov	r0, r9
 80052fc:	e765      	b.n	80051ca <_dtoa_r+0x392>
 80052fe:	ec42 1b17 	vmov	d7, r1, r2
 8005302:	4a5c      	ldr	r2, [pc, #368]	; (8005474 <_dtoa_r+0x63c>)
 8005304:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005308:	ed12 4b02 	vldr	d4, [r2, #-8]
 800530c:	9a00      	ldr	r2, [sp, #0]
 800530e:	1814      	adds	r4, r2, r0
 8005310:	9a08      	ldr	r2, [sp, #32]
 8005312:	b352      	cbz	r2, 800536a <_dtoa_r+0x532>
 8005314:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005318:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800531c:	f8dd 8000 	ldr.w	r8, [sp]
 8005320:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005324:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005328:	ee35 7b47 	vsub.f64	d7, d5, d7
 800532c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005330:	ee14 2a90 	vmov	r2, s9
 8005334:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005338:	3230      	adds	r2, #48	; 0x30
 800533a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800533e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005346:	f808 2b01 	strb.w	r2, [r8], #1
 800534a:	d439      	bmi.n	80053c0 <_dtoa_r+0x588>
 800534c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005350:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005358:	d472      	bmi.n	8005440 <_dtoa_r+0x608>
 800535a:	45a0      	cmp	r8, r4
 800535c:	f43f af5d 	beq.w	800521a <_dtoa_r+0x3e2>
 8005360:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005364:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005368:	e7e0      	b.n	800532c <_dtoa_r+0x4f4>
 800536a:	f8dd 8000 	ldr.w	r8, [sp]
 800536e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005372:	4621      	mov	r1, r4
 8005374:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005378:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800537c:	ee14 2a90 	vmov	r2, s9
 8005380:	3230      	adds	r2, #48	; 0x30
 8005382:	f808 2b01 	strb.w	r2, [r8], #1
 8005386:	45a0      	cmp	r8, r4
 8005388:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800538c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005390:	d118      	bne.n	80053c4 <_dtoa_r+0x58c>
 8005392:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005396:	ee37 4b05 	vadd.f64	d4, d7, d5
 800539a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800539e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a2:	dc4d      	bgt.n	8005440 <_dtoa_r+0x608>
 80053a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80053a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80053ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b0:	f57f af33 	bpl.w	800521a <_dtoa_r+0x3e2>
 80053b4:	4688      	mov	r8, r1
 80053b6:	3901      	subs	r1, #1
 80053b8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80053bc:	2b30      	cmp	r3, #48	; 0x30
 80053be:	d0f9      	beq.n	80053b4 <_dtoa_r+0x57c>
 80053c0:	46bb      	mov	fp, r7
 80053c2:	e02a      	b.n	800541a <_dtoa_r+0x5e2>
 80053c4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80053c8:	e7d6      	b.n	8005378 <_dtoa_r+0x540>
 80053ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80053ce:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80053d2:	f8dd 8000 	ldr.w	r8, [sp]
 80053d6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80053da:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80053de:	ee15 3a10 	vmov	r3, s10
 80053e2:	3330      	adds	r3, #48	; 0x30
 80053e4:	f808 3b01 	strb.w	r3, [r8], #1
 80053e8:	9b00      	ldr	r3, [sp, #0]
 80053ea:	eba8 0303 	sub.w	r3, r8, r3
 80053ee:	4599      	cmp	r9, r3
 80053f0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80053f4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80053f8:	d133      	bne.n	8005462 <_dtoa_r+0x62a>
 80053fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80053fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005406:	dc1a      	bgt.n	800543e <_dtoa_r+0x606>
 8005408:	eeb4 7b46 	vcmp.f64	d7, d6
 800540c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005410:	d103      	bne.n	800541a <_dtoa_r+0x5e2>
 8005412:	ee15 3a10 	vmov	r3, s10
 8005416:	07d9      	lsls	r1, r3, #31
 8005418:	d411      	bmi.n	800543e <_dtoa_r+0x606>
 800541a:	4629      	mov	r1, r5
 800541c:	4630      	mov	r0, r6
 800541e:	f000 fbe1 	bl	8005be4 <_Bfree>
 8005422:	2300      	movs	r3, #0
 8005424:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005426:	f888 3000 	strb.w	r3, [r8]
 800542a:	f10b 0301 	add.w	r3, fp, #1
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005432:	2b00      	cmp	r3, #0
 8005434:	f43f ad4d 	beq.w	8004ed2 <_dtoa_r+0x9a>
 8005438:	f8c3 8000 	str.w	r8, [r3]
 800543c:	e549      	b.n	8004ed2 <_dtoa_r+0x9a>
 800543e:	465f      	mov	r7, fp
 8005440:	4643      	mov	r3, r8
 8005442:	4698      	mov	r8, r3
 8005444:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005448:	2a39      	cmp	r2, #57	; 0x39
 800544a:	d106      	bne.n	800545a <_dtoa_r+0x622>
 800544c:	9a00      	ldr	r2, [sp, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d1f7      	bne.n	8005442 <_dtoa_r+0x60a>
 8005452:	9900      	ldr	r1, [sp, #0]
 8005454:	2230      	movs	r2, #48	; 0x30
 8005456:	3701      	adds	r7, #1
 8005458:	700a      	strb	r2, [r1, #0]
 800545a:	781a      	ldrb	r2, [r3, #0]
 800545c:	3201      	adds	r2, #1
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	e7ae      	b.n	80053c0 <_dtoa_r+0x588>
 8005462:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005466:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800546a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800546e:	d1b2      	bne.n	80053d6 <_dtoa_r+0x59e>
 8005470:	e7d3      	b.n	800541a <_dtoa_r+0x5e2>
 8005472:	bf00      	nop
 8005474:	08007298 	.word	0x08007298
 8005478:	08007270 	.word	0x08007270
 800547c:	9908      	ldr	r1, [sp, #32]
 800547e:	2900      	cmp	r1, #0
 8005480:	f000 80d1 	beq.w	8005626 <_dtoa_r+0x7ee>
 8005484:	9907      	ldr	r1, [sp, #28]
 8005486:	2901      	cmp	r1, #1
 8005488:	f300 80b4 	bgt.w	80055f4 <_dtoa_r+0x7bc>
 800548c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800548e:	2900      	cmp	r1, #0
 8005490:	f000 80ac 	beq.w	80055ec <_dtoa_r+0x7b4>
 8005494:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005498:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800549c:	461c      	mov	r4, r3
 800549e:	930a      	str	r3, [sp, #40]	; 0x28
 80054a0:	9b05      	ldr	r3, [sp, #20]
 80054a2:	4413      	add	r3, r2
 80054a4:	9305      	str	r3, [sp, #20]
 80054a6:	9b06      	ldr	r3, [sp, #24]
 80054a8:	2101      	movs	r1, #1
 80054aa:	4413      	add	r3, r2
 80054ac:	4630      	mov	r0, r6
 80054ae:	9306      	str	r3, [sp, #24]
 80054b0:	f000 fc54 	bl	8005d5c <__i2b>
 80054b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054b6:	4607      	mov	r7, r0
 80054b8:	f1b8 0f00 	cmp.w	r8, #0
 80054bc:	dd0d      	ble.n	80054da <_dtoa_r+0x6a2>
 80054be:	9a06      	ldr	r2, [sp, #24]
 80054c0:	2a00      	cmp	r2, #0
 80054c2:	dd0a      	ble.n	80054da <_dtoa_r+0x6a2>
 80054c4:	4542      	cmp	r2, r8
 80054c6:	9905      	ldr	r1, [sp, #20]
 80054c8:	bfa8      	it	ge
 80054ca:	4642      	movge	r2, r8
 80054cc:	1a89      	subs	r1, r1, r2
 80054ce:	9105      	str	r1, [sp, #20]
 80054d0:	9906      	ldr	r1, [sp, #24]
 80054d2:	eba8 0802 	sub.w	r8, r8, r2
 80054d6:	1a8a      	subs	r2, r1, r2
 80054d8:	9206      	str	r2, [sp, #24]
 80054da:	b303      	cbz	r3, 800551e <_dtoa_r+0x6e6>
 80054dc:	9a08      	ldr	r2, [sp, #32]
 80054de:	2a00      	cmp	r2, #0
 80054e0:	f000 80a6 	beq.w	8005630 <_dtoa_r+0x7f8>
 80054e4:	2c00      	cmp	r4, #0
 80054e6:	dd13      	ble.n	8005510 <_dtoa_r+0x6d8>
 80054e8:	4639      	mov	r1, r7
 80054ea:	4622      	mov	r2, r4
 80054ec:	4630      	mov	r0, r6
 80054ee:	930c      	str	r3, [sp, #48]	; 0x30
 80054f0:	f000 fcf0 	bl	8005ed4 <__pow5mult>
 80054f4:	462a      	mov	r2, r5
 80054f6:	4601      	mov	r1, r0
 80054f8:	4607      	mov	r7, r0
 80054fa:	4630      	mov	r0, r6
 80054fc:	f000 fc44 	bl	8005d88 <__multiply>
 8005500:	4629      	mov	r1, r5
 8005502:	900a      	str	r0, [sp, #40]	; 0x28
 8005504:	4630      	mov	r0, r6
 8005506:	f000 fb6d 	bl	8005be4 <_Bfree>
 800550a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800550c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800550e:	4615      	mov	r5, r2
 8005510:	1b1a      	subs	r2, r3, r4
 8005512:	d004      	beq.n	800551e <_dtoa_r+0x6e6>
 8005514:	4629      	mov	r1, r5
 8005516:	4630      	mov	r0, r6
 8005518:	f000 fcdc 	bl	8005ed4 <__pow5mult>
 800551c:	4605      	mov	r5, r0
 800551e:	2101      	movs	r1, #1
 8005520:	4630      	mov	r0, r6
 8005522:	f000 fc1b 	bl	8005d5c <__i2b>
 8005526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005528:	2b00      	cmp	r3, #0
 800552a:	4604      	mov	r4, r0
 800552c:	f340 8082 	ble.w	8005634 <_dtoa_r+0x7fc>
 8005530:	461a      	mov	r2, r3
 8005532:	4601      	mov	r1, r0
 8005534:	4630      	mov	r0, r6
 8005536:	f000 fccd 	bl	8005ed4 <__pow5mult>
 800553a:	9b07      	ldr	r3, [sp, #28]
 800553c:	2b01      	cmp	r3, #1
 800553e:	4604      	mov	r4, r0
 8005540:	dd7b      	ble.n	800563a <_dtoa_r+0x802>
 8005542:	2300      	movs	r3, #0
 8005544:	930a      	str	r3, [sp, #40]	; 0x28
 8005546:	6922      	ldr	r2, [r4, #16]
 8005548:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800554c:	6910      	ldr	r0, [r2, #16]
 800554e:	f000 fbb5 	bl	8005cbc <__hi0bits>
 8005552:	f1c0 0020 	rsb	r0, r0, #32
 8005556:	9b06      	ldr	r3, [sp, #24]
 8005558:	4418      	add	r0, r3
 800555a:	f010 001f 	ands.w	r0, r0, #31
 800555e:	f000 808d 	beq.w	800567c <_dtoa_r+0x844>
 8005562:	f1c0 0220 	rsb	r2, r0, #32
 8005566:	2a04      	cmp	r2, #4
 8005568:	f340 8086 	ble.w	8005678 <_dtoa_r+0x840>
 800556c:	f1c0 001c 	rsb	r0, r0, #28
 8005570:	9b05      	ldr	r3, [sp, #20]
 8005572:	4403      	add	r3, r0
 8005574:	9305      	str	r3, [sp, #20]
 8005576:	9b06      	ldr	r3, [sp, #24]
 8005578:	4403      	add	r3, r0
 800557a:	4480      	add	r8, r0
 800557c:	9306      	str	r3, [sp, #24]
 800557e:	9b05      	ldr	r3, [sp, #20]
 8005580:	2b00      	cmp	r3, #0
 8005582:	dd05      	ble.n	8005590 <_dtoa_r+0x758>
 8005584:	4629      	mov	r1, r5
 8005586:	461a      	mov	r2, r3
 8005588:	4630      	mov	r0, r6
 800558a:	f000 fcfd 	bl	8005f88 <__lshift>
 800558e:	4605      	mov	r5, r0
 8005590:	9b06      	ldr	r3, [sp, #24]
 8005592:	2b00      	cmp	r3, #0
 8005594:	dd05      	ble.n	80055a2 <_dtoa_r+0x76a>
 8005596:	4621      	mov	r1, r4
 8005598:	461a      	mov	r2, r3
 800559a:	4630      	mov	r0, r6
 800559c:	f000 fcf4 	bl	8005f88 <__lshift>
 80055a0:	4604      	mov	r4, r0
 80055a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d06b      	beq.n	8005680 <_dtoa_r+0x848>
 80055a8:	4621      	mov	r1, r4
 80055aa:	4628      	mov	r0, r5
 80055ac:	f000 fd58 	bl	8006060 <__mcmp>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	da65      	bge.n	8005680 <_dtoa_r+0x848>
 80055b4:	2300      	movs	r3, #0
 80055b6:	4629      	mov	r1, r5
 80055b8:	220a      	movs	r2, #10
 80055ba:	4630      	mov	r0, r6
 80055bc:	f000 fb34 	bl	8005c28 <__multadd>
 80055c0:	9b08      	ldr	r3, [sp, #32]
 80055c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80055c6:	4605      	mov	r5, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 8192 	beq.w	80058f2 <_dtoa_r+0xaba>
 80055ce:	4639      	mov	r1, r7
 80055d0:	2300      	movs	r3, #0
 80055d2:	220a      	movs	r2, #10
 80055d4:	4630      	mov	r0, r6
 80055d6:	f000 fb27 	bl	8005c28 <__multadd>
 80055da:	f1ba 0f00 	cmp.w	sl, #0
 80055de:	4607      	mov	r7, r0
 80055e0:	f300 808e 	bgt.w	8005700 <_dtoa_r+0x8c8>
 80055e4:	9b07      	ldr	r3, [sp, #28]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	dc51      	bgt.n	800568e <_dtoa_r+0x856>
 80055ea:	e089      	b.n	8005700 <_dtoa_r+0x8c8>
 80055ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80055f2:	e751      	b.n	8005498 <_dtoa_r+0x660>
 80055f4:	f109 34ff 	add.w	r4, r9, #4294967295
 80055f8:	42a3      	cmp	r3, r4
 80055fa:	bfbf      	itttt	lt
 80055fc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80055fe:	1ae3      	sublt	r3, r4, r3
 8005600:	18d2      	addlt	r2, r2, r3
 8005602:	4613      	movlt	r3, r2
 8005604:	bfb7      	itett	lt
 8005606:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005608:	1b1c      	subge	r4, r3, r4
 800560a:	4623      	movlt	r3, r4
 800560c:	2400      	movlt	r4, #0
 800560e:	f1b9 0f00 	cmp.w	r9, #0
 8005612:	bfb5      	itete	lt
 8005614:	9a05      	ldrlt	r2, [sp, #20]
 8005616:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800561a:	eba2 0809 	sublt.w	r8, r2, r9
 800561e:	464a      	movge	r2, r9
 8005620:	bfb8      	it	lt
 8005622:	2200      	movlt	r2, #0
 8005624:	e73b      	b.n	800549e <_dtoa_r+0x666>
 8005626:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800562a:	9f08      	ldr	r7, [sp, #32]
 800562c:	461c      	mov	r4, r3
 800562e:	e743      	b.n	80054b8 <_dtoa_r+0x680>
 8005630:	461a      	mov	r2, r3
 8005632:	e76f      	b.n	8005514 <_dtoa_r+0x6dc>
 8005634:	9b07      	ldr	r3, [sp, #28]
 8005636:	2b01      	cmp	r3, #1
 8005638:	dc18      	bgt.n	800566c <_dtoa_r+0x834>
 800563a:	9b02      	ldr	r3, [sp, #8]
 800563c:	b9b3      	cbnz	r3, 800566c <_dtoa_r+0x834>
 800563e:	9b03      	ldr	r3, [sp, #12]
 8005640:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005644:	b9a2      	cbnz	r2, 8005670 <_dtoa_r+0x838>
 8005646:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800564a:	0d12      	lsrs	r2, r2, #20
 800564c:	0512      	lsls	r2, r2, #20
 800564e:	b18a      	cbz	r2, 8005674 <_dtoa_r+0x83c>
 8005650:	9b05      	ldr	r3, [sp, #20]
 8005652:	3301      	adds	r3, #1
 8005654:	9305      	str	r3, [sp, #20]
 8005656:	9b06      	ldr	r3, [sp, #24]
 8005658:	3301      	adds	r3, #1
 800565a:	9306      	str	r3, [sp, #24]
 800565c:	2301      	movs	r3, #1
 800565e:	930a      	str	r3, [sp, #40]	; 0x28
 8005660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005662:	2b00      	cmp	r3, #0
 8005664:	f47f af6f 	bne.w	8005546 <_dtoa_r+0x70e>
 8005668:	2001      	movs	r0, #1
 800566a:	e774      	b.n	8005556 <_dtoa_r+0x71e>
 800566c:	2300      	movs	r3, #0
 800566e:	e7f6      	b.n	800565e <_dtoa_r+0x826>
 8005670:	9b02      	ldr	r3, [sp, #8]
 8005672:	e7f4      	b.n	800565e <_dtoa_r+0x826>
 8005674:	920a      	str	r2, [sp, #40]	; 0x28
 8005676:	e7f3      	b.n	8005660 <_dtoa_r+0x828>
 8005678:	d081      	beq.n	800557e <_dtoa_r+0x746>
 800567a:	4610      	mov	r0, r2
 800567c:	301c      	adds	r0, #28
 800567e:	e777      	b.n	8005570 <_dtoa_r+0x738>
 8005680:	f1b9 0f00 	cmp.w	r9, #0
 8005684:	dc37      	bgt.n	80056f6 <_dtoa_r+0x8be>
 8005686:	9b07      	ldr	r3, [sp, #28]
 8005688:	2b02      	cmp	r3, #2
 800568a:	dd34      	ble.n	80056f6 <_dtoa_r+0x8be>
 800568c:	46ca      	mov	sl, r9
 800568e:	f1ba 0f00 	cmp.w	sl, #0
 8005692:	d10d      	bne.n	80056b0 <_dtoa_r+0x878>
 8005694:	4621      	mov	r1, r4
 8005696:	4653      	mov	r3, sl
 8005698:	2205      	movs	r2, #5
 800569a:	4630      	mov	r0, r6
 800569c:	f000 fac4 	bl	8005c28 <__multadd>
 80056a0:	4601      	mov	r1, r0
 80056a2:	4604      	mov	r4, r0
 80056a4:	4628      	mov	r0, r5
 80056a6:	f000 fcdb 	bl	8006060 <__mcmp>
 80056aa:	2800      	cmp	r0, #0
 80056ac:	f73f adde 	bgt.w	800526c <_dtoa_r+0x434>
 80056b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b2:	f8dd 8000 	ldr.w	r8, [sp]
 80056b6:	ea6f 0b03 	mvn.w	fp, r3
 80056ba:	f04f 0900 	mov.w	r9, #0
 80056be:	4621      	mov	r1, r4
 80056c0:	4630      	mov	r0, r6
 80056c2:	f000 fa8f 	bl	8005be4 <_Bfree>
 80056c6:	2f00      	cmp	r7, #0
 80056c8:	f43f aea7 	beq.w	800541a <_dtoa_r+0x5e2>
 80056cc:	f1b9 0f00 	cmp.w	r9, #0
 80056d0:	d005      	beq.n	80056de <_dtoa_r+0x8a6>
 80056d2:	45b9      	cmp	r9, r7
 80056d4:	d003      	beq.n	80056de <_dtoa_r+0x8a6>
 80056d6:	4649      	mov	r1, r9
 80056d8:	4630      	mov	r0, r6
 80056da:	f000 fa83 	bl	8005be4 <_Bfree>
 80056de:	4639      	mov	r1, r7
 80056e0:	4630      	mov	r0, r6
 80056e2:	f000 fa7f 	bl	8005be4 <_Bfree>
 80056e6:	e698      	b.n	800541a <_dtoa_r+0x5e2>
 80056e8:	2400      	movs	r4, #0
 80056ea:	4627      	mov	r7, r4
 80056ec:	e7e0      	b.n	80056b0 <_dtoa_r+0x878>
 80056ee:	46bb      	mov	fp, r7
 80056f0:	4604      	mov	r4, r0
 80056f2:	4607      	mov	r7, r0
 80056f4:	e5ba      	b.n	800526c <_dtoa_r+0x434>
 80056f6:	9b08      	ldr	r3, [sp, #32]
 80056f8:	46ca      	mov	sl, r9
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 8100 	beq.w	8005900 <_dtoa_r+0xac8>
 8005700:	f1b8 0f00 	cmp.w	r8, #0
 8005704:	dd05      	ble.n	8005712 <_dtoa_r+0x8da>
 8005706:	4639      	mov	r1, r7
 8005708:	4642      	mov	r2, r8
 800570a:	4630      	mov	r0, r6
 800570c:	f000 fc3c 	bl	8005f88 <__lshift>
 8005710:	4607      	mov	r7, r0
 8005712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005714:	2b00      	cmp	r3, #0
 8005716:	d05d      	beq.n	80057d4 <_dtoa_r+0x99c>
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	4630      	mov	r0, r6
 800571c:	f000 fa22 	bl	8005b64 <_Balloc>
 8005720:	4680      	mov	r8, r0
 8005722:	b928      	cbnz	r0, 8005730 <_dtoa_r+0x8f8>
 8005724:	4b82      	ldr	r3, [pc, #520]	; (8005930 <_dtoa_r+0xaf8>)
 8005726:	4602      	mov	r2, r0
 8005728:	f240 21ea 	movw	r1, #746	; 0x2ea
 800572c:	f7ff bb9a 	b.w	8004e64 <_dtoa_r+0x2c>
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	3202      	adds	r2, #2
 8005734:	0092      	lsls	r2, r2, #2
 8005736:	f107 010c 	add.w	r1, r7, #12
 800573a:	300c      	adds	r0, #12
 800573c:	f000 fa04 	bl	8005b48 <memcpy>
 8005740:	2201      	movs	r2, #1
 8005742:	4641      	mov	r1, r8
 8005744:	4630      	mov	r0, r6
 8005746:	f000 fc1f 	bl	8005f88 <__lshift>
 800574a:	9b00      	ldr	r3, [sp, #0]
 800574c:	3301      	adds	r3, #1
 800574e:	9305      	str	r3, [sp, #20]
 8005750:	9b00      	ldr	r3, [sp, #0]
 8005752:	4453      	add	r3, sl
 8005754:	9309      	str	r3, [sp, #36]	; 0x24
 8005756:	9b02      	ldr	r3, [sp, #8]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	46b9      	mov	r9, r7
 800575e:	9308      	str	r3, [sp, #32]
 8005760:	4607      	mov	r7, r0
 8005762:	9b05      	ldr	r3, [sp, #20]
 8005764:	4621      	mov	r1, r4
 8005766:	3b01      	subs	r3, #1
 8005768:	4628      	mov	r0, r5
 800576a:	9302      	str	r3, [sp, #8]
 800576c:	f7ff fad6 	bl	8004d1c <quorem>
 8005770:	4603      	mov	r3, r0
 8005772:	3330      	adds	r3, #48	; 0x30
 8005774:	9006      	str	r0, [sp, #24]
 8005776:	4649      	mov	r1, r9
 8005778:	4628      	mov	r0, r5
 800577a:	930a      	str	r3, [sp, #40]	; 0x28
 800577c:	f000 fc70 	bl	8006060 <__mcmp>
 8005780:	463a      	mov	r2, r7
 8005782:	4682      	mov	sl, r0
 8005784:	4621      	mov	r1, r4
 8005786:	4630      	mov	r0, r6
 8005788:	f000 fc86 	bl	8006098 <__mdiff>
 800578c:	68c2      	ldr	r2, [r0, #12]
 800578e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005790:	4680      	mov	r8, r0
 8005792:	bb0a      	cbnz	r2, 80057d8 <_dtoa_r+0x9a0>
 8005794:	4601      	mov	r1, r0
 8005796:	4628      	mov	r0, r5
 8005798:	f000 fc62 	bl	8006060 <__mcmp>
 800579c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800579e:	4602      	mov	r2, r0
 80057a0:	4641      	mov	r1, r8
 80057a2:	4630      	mov	r0, r6
 80057a4:	920e      	str	r2, [sp, #56]	; 0x38
 80057a6:	930a      	str	r3, [sp, #40]	; 0x28
 80057a8:	f000 fa1c 	bl	8005be4 <_Bfree>
 80057ac:	9b07      	ldr	r3, [sp, #28]
 80057ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80057b4:	ea43 0102 	orr.w	r1, r3, r2
 80057b8:	9b08      	ldr	r3, [sp, #32]
 80057ba:	430b      	orrs	r3, r1
 80057bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057be:	d10d      	bne.n	80057dc <_dtoa_r+0x9a4>
 80057c0:	2b39      	cmp	r3, #57	; 0x39
 80057c2:	d029      	beq.n	8005818 <_dtoa_r+0x9e0>
 80057c4:	f1ba 0f00 	cmp.w	sl, #0
 80057c8:	dd01      	ble.n	80057ce <_dtoa_r+0x996>
 80057ca:	9b06      	ldr	r3, [sp, #24]
 80057cc:	3331      	adds	r3, #49	; 0x31
 80057ce:	9a02      	ldr	r2, [sp, #8]
 80057d0:	7013      	strb	r3, [r2, #0]
 80057d2:	e774      	b.n	80056be <_dtoa_r+0x886>
 80057d4:	4638      	mov	r0, r7
 80057d6:	e7b8      	b.n	800574a <_dtoa_r+0x912>
 80057d8:	2201      	movs	r2, #1
 80057da:	e7e1      	b.n	80057a0 <_dtoa_r+0x968>
 80057dc:	f1ba 0f00 	cmp.w	sl, #0
 80057e0:	db06      	blt.n	80057f0 <_dtoa_r+0x9b8>
 80057e2:	9907      	ldr	r1, [sp, #28]
 80057e4:	ea41 0a0a 	orr.w	sl, r1, sl
 80057e8:	9908      	ldr	r1, [sp, #32]
 80057ea:	ea5a 0101 	orrs.w	r1, sl, r1
 80057ee:	d120      	bne.n	8005832 <_dtoa_r+0x9fa>
 80057f0:	2a00      	cmp	r2, #0
 80057f2:	ddec      	ble.n	80057ce <_dtoa_r+0x996>
 80057f4:	4629      	mov	r1, r5
 80057f6:	2201      	movs	r2, #1
 80057f8:	4630      	mov	r0, r6
 80057fa:	9305      	str	r3, [sp, #20]
 80057fc:	f000 fbc4 	bl	8005f88 <__lshift>
 8005800:	4621      	mov	r1, r4
 8005802:	4605      	mov	r5, r0
 8005804:	f000 fc2c 	bl	8006060 <__mcmp>
 8005808:	2800      	cmp	r0, #0
 800580a:	9b05      	ldr	r3, [sp, #20]
 800580c:	dc02      	bgt.n	8005814 <_dtoa_r+0x9dc>
 800580e:	d1de      	bne.n	80057ce <_dtoa_r+0x996>
 8005810:	07da      	lsls	r2, r3, #31
 8005812:	d5dc      	bpl.n	80057ce <_dtoa_r+0x996>
 8005814:	2b39      	cmp	r3, #57	; 0x39
 8005816:	d1d8      	bne.n	80057ca <_dtoa_r+0x992>
 8005818:	9a02      	ldr	r2, [sp, #8]
 800581a:	2339      	movs	r3, #57	; 0x39
 800581c:	7013      	strb	r3, [r2, #0]
 800581e:	4643      	mov	r3, r8
 8005820:	4698      	mov	r8, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8005828:	2a39      	cmp	r2, #57	; 0x39
 800582a:	d051      	beq.n	80058d0 <_dtoa_r+0xa98>
 800582c:	3201      	adds	r2, #1
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	e745      	b.n	80056be <_dtoa_r+0x886>
 8005832:	2a00      	cmp	r2, #0
 8005834:	dd03      	ble.n	800583e <_dtoa_r+0xa06>
 8005836:	2b39      	cmp	r3, #57	; 0x39
 8005838:	d0ee      	beq.n	8005818 <_dtoa_r+0x9e0>
 800583a:	3301      	adds	r3, #1
 800583c:	e7c7      	b.n	80057ce <_dtoa_r+0x996>
 800583e:	9a05      	ldr	r2, [sp, #20]
 8005840:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005842:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005846:	428a      	cmp	r2, r1
 8005848:	d02b      	beq.n	80058a2 <_dtoa_r+0xa6a>
 800584a:	4629      	mov	r1, r5
 800584c:	2300      	movs	r3, #0
 800584e:	220a      	movs	r2, #10
 8005850:	4630      	mov	r0, r6
 8005852:	f000 f9e9 	bl	8005c28 <__multadd>
 8005856:	45b9      	cmp	r9, r7
 8005858:	4605      	mov	r5, r0
 800585a:	f04f 0300 	mov.w	r3, #0
 800585e:	f04f 020a 	mov.w	r2, #10
 8005862:	4649      	mov	r1, r9
 8005864:	4630      	mov	r0, r6
 8005866:	d107      	bne.n	8005878 <_dtoa_r+0xa40>
 8005868:	f000 f9de 	bl	8005c28 <__multadd>
 800586c:	4681      	mov	r9, r0
 800586e:	4607      	mov	r7, r0
 8005870:	9b05      	ldr	r3, [sp, #20]
 8005872:	3301      	adds	r3, #1
 8005874:	9305      	str	r3, [sp, #20]
 8005876:	e774      	b.n	8005762 <_dtoa_r+0x92a>
 8005878:	f000 f9d6 	bl	8005c28 <__multadd>
 800587c:	4639      	mov	r1, r7
 800587e:	4681      	mov	r9, r0
 8005880:	2300      	movs	r3, #0
 8005882:	220a      	movs	r2, #10
 8005884:	4630      	mov	r0, r6
 8005886:	f000 f9cf 	bl	8005c28 <__multadd>
 800588a:	4607      	mov	r7, r0
 800588c:	e7f0      	b.n	8005870 <_dtoa_r+0xa38>
 800588e:	f1ba 0f00 	cmp.w	sl, #0
 8005892:	9a00      	ldr	r2, [sp, #0]
 8005894:	bfcc      	ite	gt
 8005896:	46d0      	movgt	r8, sl
 8005898:	f04f 0801 	movle.w	r8, #1
 800589c:	4490      	add	r8, r2
 800589e:	f04f 0900 	mov.w	r9, #0
 80058a2:	4629      	mov	r1, r5
 80058a4:	2201      	movs	r2, #1
 80058a6:	4630      	mov	r0, r6
 80058a8:	9302      	str	r3, [sp, #8]
 80058aa:	f000 fb6d 	bl	8005f88 <__lshift>
 80058ae:	4621      	mov	r1, r4
 80058b0:	4605      	mov	r5, r0
 80058b2:	f000 fbd5 	bl	8006060 <__mcmp>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	dcb1      	bgt.n	800581e <_dtoa_r+0x9e6>
 80058ba:	d102      	bne.n	80058c2 <_dtoa_r+0xa8a>
 80058bc:	9b02      	ldr	r3, [sp, #8]
 80058be:	07db      	lsls	r3, r3, #31
 80058c0:	d4ad      	bmi.n	800581e <_dtoa_r+0x9e6>
 80058c2:	4643      	mov	r3, r8
 80058c4:	4698      	mov	r8, r3
 80058c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058ca:	2a30      	cmp	r2, #48	; 0x30
 80058cc:	d0fa      	beq.n	80058c4 <_dtoa_r+0xa8c>
 80058ce:	e6f6      	b.n	80056be <_dtoa_r+0x886>
 80058d0:	9a00      	ldr	r2, [sp, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d1a4      	bne.n	8005820 <_dtoa_r+0x9e8>
 80058d6:	f10b 0b01 	add.w	fp, fp, #1
 80058da:	2331      	movs	r3, #49	; 0x31
 80058dc:	e778      	b.n	80057d0 <_dtoa_r+0x998>
 80058de:	4b15      	ldr	r3, [pc, #84]	; (8005934 <_dtoa_r+0xafc>)
 80058e0:	f7ff bb12 	b.w	8004f08 <_dtoa_r+0xd0>
 80058e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f47f aaee 	bne.w	8004ec8 <_dtoa_r+0x90>
 80058ec:	4b12      	ldr	r3, [pc, #72]	; (8005938 <_dtoa_r+0xb00>)
 80058ee:	f7ff bb0b 	b.w	8004f08 <_dtoa_r+0xd0>
 80058f2:	f1ba 0f00 	cmp.w	sl, #0
 80058f6:	dc03      	bgt.n	8005900 <_dtoa_r+0xac8>
 80058f8:	9b07      	ldr	r3, [sp, #28]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	f73f aec7 	bgt.w	800568e <_dtoa_r+0x856>
 8005900:	f8dd 8000 	ldr.w	r8, [sp]
 8005904:	4621      	mov	r1, r4
 8005906:	4628      	mov	r0, r5
 8005908:	f7ff fa08 	bl	8004d1c <quorem>
 800590c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005910:	f808 3b01 	strb.w	r3, [r8], #1
 8005914:	9a00      	ldr	r2, [sp, #0]
 8005916:	eba8 0202 	sub.w	r2, r8, r2
 800591a:	4592      	cmp	sl, r2
 800591c:	ddb7      	ble.n	800588e <_dtoa_r+0xa56>
 800591e:	4629      	mov	r1, r5
 8005920:	2300      	movs	r3, #0
 8005922:	220a      	movs	r2, #10
 8005924:	4630      	mov	r0, r6
 8005926:	f000 f97f 	bl	8005c28 <__multadd>
 800592a:	4605      	mov	r5, r0
 800592c:	e7ea      	b.n	8005904 <_dtoa_r+0xacc>
 800592e:	bf00      	nop
 8005930:	0800719f 	.word	0x0800719f
 8005934:	080070f8 	.word	0x080070f8
 8005938:	0800711c 	.word	0x0800711c

0800593c <std>:
 800593c:	2300      	movs	r3, #0
 800593e:	b510      	push	{r4, lr}
 8005940:	4604      	mov	r4, r0
 8005942:	e9c0 3300 	strd	r3, r3, [r0]
 8005946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800594a:	6083      	str	r3, [r0, #8]
 800594c:	8181      	strh	r1, [r0, #12]
 800594e:	6643      	str	r3, [r0, #100]	; 0x64
 8005950:	81c2      	strh	r2, [r0, #14]
 8005952:	6183      	str	r3, [r0, #24]
 8005954:	4619      	mov	r1, r3
 8005956:	2208      	movs	r2, #8
 8005958:	305c      	adds	r0, #92	; 0x5c
 800595a:	f7fe fd5d 	bl	8004418 <memset>
 800595e:	4b05      	ldr	r3, [pc, #20]	; (8005974 <std+0x38>)
 8005960:	6263      	str	r3, [r4, #36]	; 0x24
 8005962:	4b05      	ldr	r3, [pc, #20]	; (8005978 <std+0x3c>)
 8005964:	62a3      	str	r3, [r4, #40]	; 0x28
 8005966:	4b05      	ldr	r3, [pc, #20]	; (800597c <std+0x40>)
 8005968:	62e3      	str	r3, [r4, #44]	; 0x2c
 800596a:	4b05      	ldr	r3, [pc, #20]	; (8005980 <std+0x44>)
 800596c:	6224      	str	r4, [r4, #32]
 800596e:	6323      	str	r3, [r4, #48]	; 0x30
 8005970:	bd10      	pop	{r4, pc}
 8005972:	bf00      	nop
 8005974:	08006961 	.word	0x08006961
 8005978:	08006983 	.word	0x08006983
 800597c:	080069bb 	.word	0x080069bb
 8005980:	080069df 	.word	0x080069df

08005984 <_cleanup_r>:
 8005984:	4901      	ldr	r1, [pc, #4]	; (800598c <_cleanup_r+0x8>)
 8005986:	f000 b8af 	b.w	8005ae8 <_fwalk_reent>
 800598a:	bf00      	nop
 800598c:	08006cf5 	.word	0x08006cf5

08005990 <__sfmoreglue>:
 8005990:	b570      	push	{r4, r5, r6, lr}
 8005992:	1e4a      	subs	r2, r1, #1
 8005994:	2568      	movs	r5, #104	; 0x68
 8005996:	4355      	muls	r5, r2
 8005998:	460e      	mov	r6, r1
 800599a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800599e:	f000 fcbf 	bl	8006320 <_malloc_r>
 80059a2:	4604      	mov	r4, r0
 80059a4:	b140      	cbz	r0, 80059b8 <__sfmoreglue+0x28>
 80059a6:	2100      	movs	r1, #0
 80059a8:	e9c0 1600 	strd	r1, r6, [r0]
 80059ac:	300c      	adds	r0, #12
 80059ae:	60a0      	str	r0, [r4, #8]
 80059b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059b4:	f7fe fd30 	bl	8004418 <memset>
 80059b8:	4620      	mov	r0, r4
 80059ba:	bd70      	pop	{r4, r5, r6, pc}

080059bc <__sfp_lock_acquire>:
 80059bc:	4801      	ldr	r0, [pc, #4]	; (80059c4 <__sfp_lock_acquire+0x8>)
 80059be:	f000 b8b8 	b.w	8005b32 <__retarget_lock_acquire_recursive>
 80059c2:	bf00      	nop
 80059c4:	20000428 	.word	0x20000428

080059c8 <__sfp_lock_release>:
 80059c8:	4801      	ldr	r0, [pc, #4]	; (80059d0 <__sfp_lock_release+0x8>)
 80059ca:	f000 b8b3 	b.w	8005b34 <__retarget_lock_release_recursive>
 80059ce:	bf00      	nop
 80059d0:	20000428 	.word	0x20000428

080059d4 <__sinit_lock_acquire>:
 80059d4:	4801      	ldr	r0, [pc, #4]	; (80059dc <__sinit_lock_acquire+0x8>)
 80059d6:	f000 b8ac 	b.w	8005b32 <__retarget_lock_acquire_recursive>
 80059da:	bf00      	nop
 80059dc:	20000423 	.word	0x20000423

080059e0 <__sinit_lock_release>:
 80059e0:	4801      	ldr	r0, [pc, #4]	; (80059e8 <__sinit_lock_release+0x8>)
 80059e2:	f000 b8a7 	b.w	8005b34 <__retarget_lock_release_recursive>
 80059e6:	bf00      	nop
 80059e8:	20000423 	.word	0x20000423

080059ec <__sinit>:
 80059ec:	b510      	push	{r4, lr}
 80059ee:	4604      	mov	r4, r0
 80059f0:	f7ff fff0 	bl	80059d4 <__sinit_lock_acquire>
 80059f4:	69a3      	ldr	r3, [r4, #24]
 80059f6:	b11b      	cbz	r3, 8005a00 <__sinit+0x14>
 80059f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059fc:	f7ff bff0 	b.w	80059e0 <__sinit_lock_release>
 8005a00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a04:	6523      	str	r3, [r4, #80]	; 0x50
 8005a06:	4b13      	ldr	r3, [pc, #76]	; (8005a54 <__sinit+0x68>)
 8005a08:	4a13      	ldr	r2, [pc, #76]	; (8005a58 <__sinit+0x6c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a0e:	42a3      	cmp	r3, r4
 8005a10:	bf04      	itt	eq
 8005a12:	2301      	moveq	r3, #1
 8005a14:	61a3      	streq	r3, [r4, #24]
 8005a16:	4620      	mov	r0, r4
 8005a18:	f000 f820 	bl	8005a5c <__sfp>
 8005a1c:	6060      	str	r0, [r4, #4]
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f000 f81c 	bl	8005a5c <__sfp>
 8005a24:	60a0      	str	r0, [r4, #8]
 8005a26:	4620      	mov	r0, r4
 8005a28:	f000 f818 	bl	8005a5c <__sfp>
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	60e0      	str	r0, [r4, #12]
 8005a30:	2104      	movs	r1, #4
 8005a32:	6860      	ldr	r0, [r4, #4]
 8005a34:	f7ff ff82 	bl	800593c <std>
 8005a38:	68a0      	ldr	r0, [r4, #8]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	2109      	movs	r1, #9
 8005a3e:	f7ff ff7d 	bl	800593c <std>
 8005a42:	68e0      	ldr	r0, [r4, #12]
 8005a44:	2202      	movs	r2, #2
 8005a46:	2112      	movs	r1, #18
 8005a48:	f7ff ff78 	bl	800593c <std>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	61a3      	str	r3, [r4, #24]
 8005a50:	e7d2      	b.n	80059f8 <__sinit+0xc>
 8005a52:	bf00      	nop
 8005a54:	080070e4 	.word	0x080070e4
 8005a58:	08005985 	.word	0x08005985

08005a5c <__sfp>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	4607      	mov	r7, r0
 8005a60:	f7ff ffac 	bl	80059bc <__sfp_lock_acquire>
 8005a64:	4b1e      	ldr	r3, [pc, #120]	; (8005ae0 <__sfp+0x84>)
 8005a66:	681e      	ldr	r6, [r3, #0]
 8005a68:	69b3      	ldr	r3, [r6, #24]
 8005a6a:	b913      	cbnz	r3, 8005a72 <__sfp+0x16>
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	f7ff ffbd 	bl	80059ec <__sinit>
 8005a72:	3648      	adds	r6, #72	; 0x48
 8005a74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	d503      	bpl.n	8005a84 <__sfp+0x28>
 8005a7c:	6833      	ldr	r3, [r6, #0]
 8005a7e:	b30b      	cbz	r3, 8005ac4 <__sfp+0x68>
 8005a80:	6836      	ldr	r6, [r6, #0]
 8005a82:	e7f7      	b.n	8005a74 <__sfp+0x18>
 8005a84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a88:	b9d5      	cbnz	r5, 8005ac0 <__sfp+0x64>
 8005a8a:	4b16      	ldr	r3, [pc, #88]	; (8005ae4 <__sfp+0x88>)
 8005a8c:	60e3      	str	r3, [r4, #12]
 8005a8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a92:	6665      	str	r5, [r4, #100]	; 0x64
 8005a94:	f000 f84c 	bl	8005b30 <__retarget_lock_init_recursive>
 8005a98:	f7ff ff96 	bl	80059c8 <__sfp_lock_release>
 8005a9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005aa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005aa4:	6025      	str	r5, [r4, #0]
 8005aa6:	61a5      	str	r5, [r4, #24]
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	4629      	mov	r1, r5
 8005aac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ab0:	f7fe fcb2 	bl	8004418 <memset>
 8005ab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005abc:	4620      	mov	r0, r4
 8005abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ac0:	3468      	adds	r4, #104	; 0x68
 8005ac2:	e7d9      	b.n	8005a78 <__sfp+0x1c>
 8005ac4:	2104      	movs	r1, #4
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	f7ff ff62 	bl	8005990 <__sfmoreglue>
 8005acc:	4604      	mov	r4, r0
 8005ace:	6030      	str	r0, [r6, #0]
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	d1d5      	bne.n	8005a80 <__sfp+0x24>
 8005ad4:	f7ff ff78 	bl	80059c8 <__sfp_lock_release>
 8005ad8:	230c      	movs	r3, #12
 8005ada:	603b      	str	r3, [r7, #0]
 8005adc:	e7ee      	b.n	8005abc <__sfp+0x60>
 8005ade:	bf00      	nop
 8005ae0:	080070e4 	.word	0x080070e4
 8005ae4:	ffff0001 	.word	0xffff0001

08005ae8 <_fwalk_reent>:
 8005ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aec:	4606      	mov	r6, r0
 8005aee:	4688      	mov	r8, r1
 8005af0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005af4:	2700      	movs	r7, #0
 8005af6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005afa:	f1b9 0901 	subs.w	r9, r9, #1
 8005afe:	d505      	bpl.n	8005b0c <_fwalk_reent+0x24>
 8005b00:	6824      	ldr	r4, [r4, #0]
 8005b02:	2c00      	cmp	r4, #0
 8005b04:	d1f7      	bne.n	8005af6 <_fwalk_reent+0xe>
 8005b06:	4638      	mov	r0, r7
 8005b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b0c:	89ab      	ldrh	r3, [r5, #12]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d907      	bls.n	8005b22 <_fwalk_reent+0x3a>
 8005b12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b16:	3301      	adds	r3, #1
 8005b18:	d003      	beq.n	8005b22 <_fwalk_reent+0x3a>
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	47c0      	blx	r8
 8005b20:	4307      	orrs	r7, r0
 8005b22:	3568      	adds	r5, #104	; 0x68
 8005b24:	e7e9      	b.n	8005afa <_fwalk_reent+0x12>
	...

08005b28 <_localeconv_r>:
 8005b28:	4800      	ldr	r0, [pc, #0]	; (8005b2c <_localeconv_r+0x4>)
 8005b2a:	4770      	bx	lr
 8005b2c:	20000160 	.word	0x20000160

08005b30 <__retarget_lock_init_recursive>:
 8005b30:	4770      	bx	lr

08005b32 <__retarget_lock_acquire_recursive>:
 8005b32:	4770      	bx	lr

08005b34 <__retarget_lock_release_recursive>:
 8005b34:	4770      	bx	lr
	...

08005b38 <malloc>:
 8005b38:	4b02      	ldr	r3, [pc, #8]	; (8005b44 <malloc+0xc>)
 8005b3a:	4601      	mov	r1, r0
 8005b3c:	6818      	ldr	r0, [r3, #0]
 8005b3e:	f000 bbef 	b.w	8006320 <_malloc_r>
 8005b42:	bf00      	nop
 8005b44:	2000000c 	.word	0x2000000c

08005b48 <memcpy>:
 8005b48:	440a      	add	r2, r1
 8005b4a:	4291      	cmp	r1, r2
 8005b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b50:	d100      	bne.n	8005b54 <memcpy+0xc>
 8005b52:	4770      	bx	lr
 8005b54:	b510      	push	{r4, lr}
 8005b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b5e:	4291      	cmp	r1, r2
 8005b60:	d1f9      	bne.n	8005b56 <memcpy+0xe>
 8005b62:	bd10      	pop	{r4, pc}

08005b64 <_Balloc>:
 8005b64:	b570      	push	{r4, r5, r6, lr}
 8005b66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b68:	4604      	mov	r4, r0
 8005b6a:	460d      	mov	r5, r1
 8005b6c:	b976      	cbnz	r6, 8005b8c <_Balloc+0x28>
 8005b6e:	2010      	movs	r0, #16
 8005b70:	f7ff ffe2 	bl	8005b38 <malloc>
 8005b74:	4602      	mov	r2, r0
 8005b76:	6260      	str	r0, [r4, #36]	; 0x24
 8005b78:	b920      	cbnz	r0, 8005b84 <_Balloc+0x20>
 8005b7a:	4b18      	ldr	r3, [pc, #96]	; (8005bdc <_Balloc+0x78>)
 8005b7c:	4818      	ldr	r0, [pc, #96]	; (8005be0 <_Balloc+0x7c>)
 8005b7e:	2166      	movs	r1, #102	; 0x66
 8005b80:	f001 f804 	bl	8006b8c <__assert_func>
 8005b84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b88:	6006      	str	r6, [r0, #0]
 8005b8a:	60c6      	str	r6, [r0, #12]
 8005b8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b8e:	68f3      	ldr	r3, [r6, #12]
 8005b90:	b183      	cbz	r3, 8005bb4 <_Balloc+0x50>
 8005b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b9a:	b9b8      	cbnz	r0, 8005bcc <_Balloc+0x68>
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	fa01 f605 	lsl.w	r6, r1, r5
 8005ba2:	1d72      	adds	r2, r6, #5
 8005ba4:	0092      	lsls	r2, r2, #2
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f000 fb5a 	bl	8006260 <_calloc_r>
 8005bac:	b160      	cbz	r0, 8005bc8 <_Balloc+0x64>
 8005bae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005bb2:	e00e      	b.n	8005bd2 <_Balloc+0x6e>
 8005bb4:	2221      	movs	r2, #33	; 0x21
 8005bb6:	2104      	movs	r1, #4
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f000 fb51 	bl	8006260 <_calloc_r>
 8005bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bc0:	60f0      	str	r0, [r6, #12]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1e4      	bne.n	8005b92 <_Balloc+0x2e>
 8005bc8:	2000      	movs	r0, #0
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	6802      	ldr	r2, [r0, #0]
 8005bce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005bd8:	e7f7      	b.n	8005bca <_Balloc+0x66>
 8005bda:	bf00      	nop
 8005bdc:	08007129 	.word	0x08007129
 8005be0:	08007210 	.word	0x08007210

08005be4 <_Bfree>:
 8005be4:	b570      	push	{r4, r5, r6, lr}
 8005be6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005be8:	4605      	mov	r5, r0
 8005bea:	460c      	mov	r4, r1
 8005bec:	b976      	cbnz	r6, 8005c0c <_Bfree+0x28>
 8005bee:	2010      	movs	r0, #16
 8005bf0:	f7ff ffa2 	bl	8005b38 <malloc>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	6268      	str	r0, [r5, #36]	; 0x24
 8005bf8:	b920      	cbnz	r0, 8005c04 <_Bfree+0x20>
 8005bfa:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <_Bfree+0x3c>)
 8005bfc:	4809      	ldr	r0, [pc, #36]	; (8005c24 <_Bfree+0x40>)
 8005bfe:	218a      	movs	r1, #138	; 0x8a
 8005c00:	f000 ffc4 	bl	8006b8c <__assert_func>
 8005c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c08:	6006      	str	r6, [r0, #0]
 8005c0a:	60c6      	str	r6, [r0, #12]
 8005c0c:	b13c      	cbz	r4, 8005c1e <_Bfree+0x3a>
 8005c0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c10:	6862      	ldr	r2, [r4, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c18:	6021      	str	r1, [r4, #0]
 8005c1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}
 8005c20:	08007129 	.word	0x08007129
 8005c24:	08007210 	.word	0x08007210

08005c28 <__multadd>:
 8005c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c2c:	690e      	ldr	r6, [r1, #16]
 8005c2e:	4607      	mov	r7, r0
 8005c30:	4698      	mov	r8, r3
 8005c32:	460c      	mov	r4, r1
 8005c34:	f101 0014 	add.w	r0, r1, #20
 8005c38:	2300      	movs	r3, #0
 8005c3a:	6805      	ldr	r5, [r0, #0]
 8005c3c:	b2a9      	uxth	r1, r5
 8005c3e:	fb02 8101 	mla	r1, r2, r1, r8
 8005c42:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005c46:	0c2d      	lsrs	r5, r5, #16
 8005c48:	fb02 c505 	mla	r5, r2, r5, ip
 8005c4c:	b289      	uxth	r1, r1
 8005c4e:	3301      	adds	r3, #1
 8005c50:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005c54:	429e      	cmp	r6, r3
 8005c56:	f840 1b04 	str.w	r1, [r0], #4
 8005c5a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005c5e:	dcec      	bgt.n	8005c3a <__multadd+0x12>
 8005c60:	f1b8 0f00 	cmp.w	r8, #0
 8005c64:	d022      	beq.n	8005cac <__multadd+0x84>
 8005c66:	68a3      	ldr	r3, [r4, #8]
 8005c68:	42b3      	cmp	r3, r6
 8005c6a:	dc19      	bgt.n	8005ca0 <__multadd+0x78>
 8005c6c:	6861      	ldr	r1, [r4, #4]
 8005c6e:	4638      	mov	r0, r7
 8005c70:	3101      	adds	r1, #1
 8005c72:	f7ff ff77 	bl	8005b64 <_Balloc>
 8005c76:	4605      	mov	r5, r0
 8005c78:	b928      	cbnz	r0, 8005c86 <__multadd+0x5e>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	4b0d      	ldr	r3, [pc, #52]	; (8005cb4 <__multadd+0x8c>)
 8005c7e:	480e      	ldr	r0, [pc, #56]	; (8005cb8 <__multadd+0x90>)
 8005c80:	21b5      	movs	r1, #181	; 0xb5
 8005c82:	f000 ff83 	bl	8006b8c <__assert_func>
 8005c86:	6922      	ldr	r2, [r4, #16]
 8005c88:	3202      	adds	r2, #2
 8005c8a:	f104 010c 	add.w	r1, r4, #12
 8005c8e:	0092      	lsls	r2, r2, #2
 8005c90:	300c      	adds	r0, #12
 8005c92:	f7ff ff59 	bl	8005b48 <memcpy>
 8005c96:	4621      	mov	r1, r4
 8005c98:	4638      	mov	r0, r7
 8005c9a:	f7ff ffa3 	bl	8005be4 <_Bfree>
 8005c9e:	462c      	mov	r4, r5
 8005ca0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005ca4:	3601      	adds	r6, #1
 8005ca6:	f8c3 8014 	str.w	r8, [r3, #20]
 8005caa:	6126      	str	r6, [r4, #16]
 8005cac:	4620      	mov	r0, r4
 8005cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb2:	bf00      	nop
 8005cb4:	0800719f 	.word	0x0800719f
 8005cb8:	08007210 	.word	0x08007210

08005cbc <__hi0bits>:
 8005cbc:	0c03      	lsrs	r3, r0, #16
 8005cbe:	041b      	lsls	r3, r3, #16
 8005cc0:	b9d3      	cbnz	r3, 8005cf8 <__hi0bits+0x3c>
 8005cc2:	0400      	lsls	r0, r0, #16
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005cca:	bf04      	itt	eq
 8005ccc:	0200      	lsleq	r0, r0, #8
 8005cce:	3308      	addeq	r3, #8
 8005cd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005cd4:	bf04      	itt	eq
 8005cd6:	0100      	lsleq	r0, r0, #4
 8005cd8:	3304      	addeq	r3, #4
 8005cda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005cde:	bf04      	itt	eq
 8005ce0:	0080      	lsleq	r0, r0, #2
 8005ce2:	3302      	addeq	r3, #2
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	db05      	blt.n	8005cf4 <__hi0bits+0x38>
 8005ce8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005cec:	f103 0301 	add.w	r3, r3, #1
 8005cf0:	bf08      	it	eq
 8005cf2:	2320      	moveq	r3, #32
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	4770      	bx	lr
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e7e4      	b.n	8005cc6 <__hi0bits+0xa>

08005cfc <__lo0bits>:
 8005cfc:	6803      	ldr	r3, [r0, #0]
 8005cfe:	f013 0207 	ands.w	r2, r3, #7
 8005d02:	4601      	mov	r1, r0
 8005d04:	d00b      	beq.n	8005d1e <__lo0bits+0x22>
 8005d06:	07da      	lsls	r2, r3, #31
 8005d08:	d424      	bmi.n	8005d54 <__lo0bits+0x58>
 8005d0a:	0798      	lsls	r0, r3, #30
 8005d0c:	bf49      	itett	mi
 8005d0e:	085b      	lsrmi	r3, r3, #1
 8005d10:	089b      	lsrpl	r3, r3, #2
 8005d12:	2001      	movmi	r0, #1
 8005d14:	600b      	strmi	r3, [r1, #0]
 8005d16:	bf5c      	itt	pl
 8005d18:	600b      	strpl	r3, [r1, #0]
 8005d1a:	2002      	movpl	r0, #2
 8005d1c:	4770      	bx	lr
 8005d1e:	b298      	uxth	r0, r3
 8005d20:	b9b0      	cbnz	r0, 8005d50 <__lo0bits+0x54>
 8005d22:	0c1b      	lsrs	r3, r3, #16
 8005d24:	2010      	movs	r0, #16
 8005d26:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005d2a:	bf04      	itt	eq
 8005d2c:	0a1b      	lsreq	r3, r3, #8
 8005d2e:	3008      	addeq	r0, #8
 8005d30:	071a      	lsls	r2, r3, #28
 8005d32:	bf04      	itt	eq
 8005d34:	091b      	lsreq	r3, r3, #4
 8005d36:	3004      	addeq	r0, #4
 8005d38:	079a      	lsls	r2, r3, #30
 8005d3a:	bf04      	itt	eq
 8005d3c:	089b      	lsreq	r3, r3, #2
 8005d3e:	3002      	addeq	r0, #2
 8005d40:	07da      	lsls	r2, r3, #31
 8005d42:	d403      	bmi.n	8005d4c <__lo0bits+0x50>
 8005d44:	085b      	lsrs	r3, r3, #1
 8005d46:	f100 0001 	add.w	r0, r0, #1
 8005d4a:	d005      	beq.n	8005d58 <__lo0bits+0x5c>
 8005d4c:	600b      	str	r3, [r1, #0]
 8005d4e:	4770      	bx	lr
 8005d50:	4610      	mov	r0, r2
 8005d52:	e7e8      	b.n	8005d26 <__lo0bits+0x2a>
 8005d54:	2000      	movs	r0, #0
 8005d56:	4770      	bx	lr
 8005d58:	2020      	movs	r0, #32
 8005d5a:	4770      	bx	lr

08005d5c <__i2b>:
 8005d5c:	b510      	push	{r4, lr}
 8005d5e:	460c      	mov	r4, r1
 8005d60:	2101      	movs	r1, #1
 8005d62:	f7ff feff 	bl	8005b64 <_Balloc>
 8005d66:	4602      	mov	r2, r0
 8005d68:	b928      	cbnz	r0, 8005d76 <__i2b+0x1a>
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <__i2b+0x24>)
 8005d6c:	4805      	ldr	r0, [pc, #20]	; (8005d84 <__i2b+0x28>)
 8005d6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005d72:	f000 ff0b 	bl	8006b8c <__assert_func>
 8005d76:	2301      	movs	r3, #1
 8005d78:	6144      	str	r4, [r0, #20]
 8005d7a:	6103      	str	r3, [r0, #16]
 8005d7c:	bd10      	pop	{r4, pc}
 8005d7e:	bf00      	nop
 8005d80:	0800719f 	.word	0x0800719f
 8005d84:	08007210 	.word	0x08007210

08005d88 <__multiply>:
 8005d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d8c:	4614      	mov	r4, r2
 8005d8e:	690a      	ldr	r2, [r1, #16]
 8005d90:	6923      	ldr	r3, [r4, #16]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	bfb8      	it	lt
 8005d96:	460b      	movlt	r3, r1
 8005d98:	460d      	mov	r5, r1
 8005d9a:	bfbc      	itt	lt
 8005d9c:	4625      	movlt	r5, r4
 8005d9e:	461c      	movlt	r4, r3
 8005da0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005da4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005da8:	68ab      	ldr	r3, [r5, #8]
 8005daa:	6869      	ldr	r1, [r5, #4]
 8005dac:	eb0a 0709 	add.w	r7, sl, r9
 8005db0:	42bb      	cmp	r3, r7
 8005db2:	b085      	sub	sp, #20
 8005db4:	bfb8      	it	lt
 8005db6:	3101      	addlt	r1, #1
 8005db8:	f7ff fed4 	bl	8005b64 <_Balloc>
 8005dbc:	b930      	cbnz	r0, 8005dcc <__multiply+0x44>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	4b42      	ldr	r3, [pc, #264]	; (8005ecc <__multiply+0x144>)
 8005dc2:	4843      	ldr	r0, [pc, #268]	; (8005ed0 <__multiply+0x148>)
 8005dc4:	f240 115d 	movw	r1, #349	; 0x15d
 8005dc8:	f000 fee0 	bl	8006b8c <__assert_func>
 8005dcc:	f100 0614 	add.w	r6, r0, #20
 8005dd0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005dd4:	4633      	mov	r3, r6
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	4543      	cmp	r3, r8
 8005dda:	d31e      	bcc.n	8005e1a <__multiply+0x92>
 8005ddc:	f105 0c14 	add.w	ip, r5, #20
 8005de0:	f104 0314 	add.w	r3, r4, #20
 8005de4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005de8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005dec:	9202      	str	r2, [sp, #8]
 8005dee:	ebac 0205 	sub.w	r2, ip, r5
 8005df2:	3a15      	subs	r2, #21
 8005df4:	f022 0203 	bic.w	r2, r2, #3
 8005df8:	3204      	adds	r2, #4
 8005dfa:	f105 0115 	add.w	r1, r5, #21
 8005dfe:	458c      	cmp	ip, r1
 8005e00:	bf38      	it	cc
 8005e02:	2204      	movcc	r2, #4
 8005e04:	9201      	str	r2, [sp, #4]
 8005e06:	9a02      	ldr	r2, [sp, #8]
 8005e08:	9303      	str	r3, [sp, #12]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d808      	bhi.n	8005e20 <__multiply+0x98>
 8005e0e:	2f00      	cmp	r7, #0
 8005e10:	dc55      	bgt.n	8005ebe <__multiply+0x136>
 8005e12:	6107      	str	r7, [r0, #16]
 8005e14:	b005      	add	sp, #20
 8005e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e1a:	f843 2b04 	str.w	r2, [r3], #4
 8005e1e:	e7db      	b.n	8005dd8 <__multiply+0x50>
 8005e20:	f8b3 a000 	ldrh.w	sl, [r3]
 8005e24:	f1ba 0f00 	cmp.w	sl, #0
 8005e28:	d020      	beq.n	8005e6c <__multiply+0xe4>
 8005e2a:	f105 0e14 	add.w	lr, r5, #20
 8005e2e:	46b1      	mov	r9, r6
 8005e30:	2200      	movs	r2, #0
 8005e32:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005e36:	f8d9 b000 	ldr.w	fp, [r9]
 8005e3a:	b2a1      	uxth	r1, r4
 8005e3c:	fa1f fb8b 	uxth.w	fp, fp
 8005e40:	fb0a b101 	mla	r1, sl, r1, fp
 8005e44:	4411      	add	r1, r2
 8005e46:	f8d9 2000 	ldr.w	r2, [r9]
 8005e4a:	0c24      	lsrs	r4, r4, #16
 8005e4c:	0c12      	lsrs	r2, r2, #16
 8005e4e:	fb0a 2404 	mla	r4, sl, r4, r2
 8005e52:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005e56:	b289      	uxth	r1, r1
 8005e58:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005e5c:	45f4      	cmp	ip, lr
 8005e5e:	f849 1b04 	str.w	r1, [r9], #4
 8005e62:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005e66:	d8e4      	bhi.n	8005e32 <__multiply+0xaa>
 8005e68:	9901      	ldr	r1, [sp, #4]
 8005e6a:	5072      	str	r2, [r6, r1]
 8005e6c:	9a03      	ldr	r2, [sp, #12]
 8005e6e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005e72:	3304      	adds	r3, #4
 8005e74:	f1b9 0f00 	cmp.w	r9, #0
 8005e78:	d01f      	beq.n	8005eba <__multiply+0x132>
 8005e7a:	6834      	ldr	r4, [r6, #0]
 8005e7c:	f105 0114 	add.w	r1, r5, #20
 8005e80:	46b6      	mov	lr, r6
 8005e82:	f04f 0a00 	mov.w	sl, #0
 8005e86:	880a      	ldrh	r2, [r1, #0]
 8005e88:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005e8c:	fb09 b202 	mla	r2, r9, r2, fp
 8005e90:	4492      	add	sl, r2
 8005e92:	b2a4      	uxth	r4, r4
 8005e94:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005e98:	f84e 4b04 	str.w	r4, [lr], #4
 8005e9c:	f851 4b04 	ldr.w	r4, [r1], #4
 8005ea0:	f8be 2000 	ldrh.w	r2, [lr]
 8005ea4:	0c24      	lsrs	r4, r4, #16
 8005ea6:	fb09 2404 	mla	r4, r9, r4, r2
 8005eaa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005eae:	458c      	cmp	ip, r1
 8005eb0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005eb4:	d8e7      	bhi.n	8005e86 <__multiply+0xfe>
 8005eb6:	9a01      	ldr	r2, [sp, #4]
 8005eb8:	50b4      	str	r4, [r6, r2]
 8005eba:	3604      	adds	r6, #4
 8005ebc:	e7a3      	b.n	8005e06 <__multiply+0x7e>
 8005ebe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1a5      	bne.n	8005e12 <__multiply+0x8a>
 8005ec6:	3f01      	subs	r7, #1
 8005ec8:	e7a1      	b.n	8005e0e <__multiply+0x86>
 8005eca:	bf00      	nop
 8005ecc:	0800719f 	.word	0x0800719f
 8005ed0:	08007210 	.word	0x08007210

08005ed4 <__pow5mult>:
 8005ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ed8:	4615      	mov	r5, r2
 8005eda:	f012 0203 	ands.w	r2, r2, #3
 8005ede:	4606      	mov	r6, r0
 8005ee0:	460f      	mov	r7, r1
 8005ee2:	d007      	beq.n	8005ef4 <__pow5mult+0x20>
 8005ee4:	4c25      	ldr	r4, [pc, #148]	; (8005f7c <__pow5mult+0xa8>)
 8005ee6:	3a01      	subs	r2, #1
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005eee:	f7ff fe9b 	bl	8005c28 <__multadd>
 8005ef2:	4607      	mov	r7, r0
 8005ef4:	10ad      	asrs	r5, r5, #2
 8005ef6:	d03d      	beq.n	8005f74 <__pow5mult+0xa0>
 8005ef8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005efa:	b97c      	cbnz	r4, 8005f1c <__pow5mult+0x48>
 8005efc:	2010      	movs	r0, #16
 8005efe:	f7ff fe1b 	bl	8005b38 <malloc>
 8005f02:	4602      	mov	r2, r0
 8005f04:	6270      	str	r0, [r6, #36]	; 0x24
 8005f06:	b928      	cbnz	r0, 8005f14 <__pow5mult+0x40>
 8005f08:	4b1d      	ldr	r3, [pc, #116]	; (8005f80 <__pow5mult+0xac>)
 8005f0a:	481e      	ldr	r0, [pc, #120]	; (8005f84 <__pow5mult+0xb0>)
 8005f0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005f10:	f000 fe3c 	bl	8006b8c <__assert_func>
 8005f14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f18:	6004      	str	r4, [r0, #0]
 8005f1a:	60c4      	str	r4, [r0, #12]
 8005f1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005f20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f24:	b94c      	cbnz	r4, 8005f3a <__pow5mult+0x66>
 8005f26:	f240 2171 	movw	r1, #625	; 0x271
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	f7ff ff16 	bl	8005d5c <__i2b>
 8005f30:	2300      	movs	r3, #0
 8005f32:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f36:	4604      	mov	r4, r0
 8005f38:	6003      	str	r3, [r0, #0]
 8005f3a:	f04f 0900 	mov.w	r9, #0
 8005f3e:	07eb      	lsls	r3, r5, #31
 8005f40:	d50a      	bpl.n	8005f58 <__pow5mult+0x84>
 8005f42:	4639      	mov	r1, r7
 8005f44:	4622      	mov	r2, r4
 8005f46:	4630      	mov	r0, r6
 8005f48:	f7ff ff1e 	bl	8005d88 <__multiply>
 8005f4c:	4639      	mov	r1, r7
 8005f4e:	4680      	mov	r8, r0
 8005f50:	4630      	mov	r0, r6
 8005f52:	f7ff fe47 	bl	8005be4 <_Bfree>
 8005f56:	4647      	mov	r7, r8
 8005f58:	106d      	asrs	r5, r5, #1
 8005f5a:	d00b      	beq.n	8005f74 <__pow5mult+0xa0>
 8005f5c:	6820      	ldr	r0, [r4, #0]
 8005f5e:	b938      	cbnz	r0, 8005f70 <__pow5mult+0x9c>
 8005f60:	4622      	mov	r2, r4
 8005f62:	4621      	mov	r1, r4
 8005f64:	4630      	mov	r0, r6
 8005f66:	f7ff ff0f 	bl	8005d88 <__multiply>
 8005f6a:	6020      	str	r0, [r4, #0]
 8005f6c:	f8c0 9000 	str.w	r9, [r0]
 8005f70:	4604      	mov	r4, r0
 8005f72:	e7e4      	b.n	8005f3e <__pow5mult+0x6a>
 8005f74:	4638      	mov	r0, r7
 8005f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f7a:	bf00      	nop
 8005f7c:	08007360 	.word	0x08007360
 8005f80:	08007129 	.word	0x08007129
 8005f84:	08007210 	.word	0x08007210

08005f88 <__lshift>:
 8005f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	6849      	ldr	r1, [r1, #4]
 8005f90:	6923      	ldr	r3, [r4, #16]
 8005f92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f96:	68a3      	ldr	r3, [r4, #8]
 8005f98:	4607      	mov	r7, r0
 8005f9a:	4691      	mov	r9, r2
 8005f9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005fa0:	f108 0601 	add.w	r6, r8, #1
 8005fa4:	42b3      	cmp	r3, r6
 8005fa6:	db0b      	blt.n	8005fc0 <__lshift+0x38>
 8005fa8:	4638      	mov	r0, r7
 8005faa:	f7ff fddb 	bl	8005b64 <_Balloc>
 8005fae:	4605      	mov	r5, r0
 8005fb0:	b948      	cbnz	r0, 8005fc6 <__lshift+0x3e>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	4b28      	ldr	r3, [pc, #160]	; (8006058 <__lshift+0xd0>)
 8005fb6:	4829      	ldr	r0, [pc, #164]	; (800605c <__lshift+0xd4>)
 8005fb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005fbc:	f000 fde6 	bl	8006b8c <__assert_func>
 8005fc0:	3101      	adds	r1, #1
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	e7ee      	b.n	8005fa4 <__lshift+0x1c>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f100 0114 	add.w	r1, r0, #20
 8005fcc:	f100 0210 	add.w	r2, r0, #16
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	4553      	cmp	r3, sl
 8005fd4:	db33      	blt.n	800603e <__lshift+0xb6>
 8005fd6:	6920      	ldr	r0, [r4, #16]
 8005fd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005fdc:	f104 0314 	add.w	r3, r4, #20
 8005fe0:	f019 091f 	ands.w	r9, r9, #31
 8005fe4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005fe8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005fec:	d02b      	beq.n	8006046 <__lshift+0xbe>
 8005fee:	f1c9 0e20 	rsb	lr, r9, #32
 8005ff2:	468a      	mov	sl, r1
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	6818      	ldr	r0, [r3, #0]
 8005ff8:	fa00 f009 	lsl.w	r0, r0, r9
 8005ffc:	4302      	orrs	r2, r0
 8005ffe:	f84a 2b04 	str.w	r2, [sl], #4
 8006002:	f853 2b04 	ldr.w	r2, [r3], #4
 8006006:	459c      	cmp	ip, r3
 8006008:	fa22 f20e 	lsr.w	r2, r2, lr
 800600c:	d8f3      	bhi.n	8005ff6 <__lshift+0x6e>
 800600e:	ebac 0304 	sub.w	r3, ip, r4
 8006012:	3b15      	subs	r3, #21
 8006014:	f023 0303 	bic.w	r3, r3, #3
 8006018:	3304      	adds	r3, #4
 800601a:	f104 0015 	add.w	r0, r4, #21
 800601e:	4584      	cmp	ip, r0
 8006020:	bf38      	it	cc
 8006022:	2304      	movcc	r3, #4
 8006024:	50ca      	str	r2, [r1, r3]
 8006026:	b10a      	cbz	r2, 800602c <__lshift+0xa4>
 8006028:	f108 0602 	add.w	r6, r8, #2
 800602c:	3e01      	subs	r6, #1
 800602e:	4638      	mov	r0, r7
 8006030:	612e      	str	r6, [r5, #16]
 8006032:	4621      	mov	r1, r4
 8006034:	f7ff fdd6 	bl	8005be4 <_Bfree>
 8006038:	4628      	mov	r0, r5
 800603a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800603e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006042:	3301      	adds	r3, #1
 8006044:	e7c5      	b.n	8005fd2 <__lshift+0x4a>
 8006046:	3904      	subs	r1, #4
 8006048:	f853 2b04 	ldr.w	r2, [r3], #4
 800604c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006050:	459c      	cmp	ip, r3
 8006052:	d8f9      	bhi.n	8006048 <__lshift+0xc0>
 8006054:	e7ea      	b.n	800602c <__lshift+0xa4>
 8006056:	bf00      	nop
 8006058:	0800719f 	.word	0x0800719f
 800605c:	08007210 	.word	0x08007210

08006060 <__mcmp>:
 8006060:	b530      	push	{r4, r5, lr}
 8006062:	6902      	ldr	r2, [r0, #16]
 8006064:	690c      	ldr	r4, [r1, #16]
 8006066:	1b12      	subs	r2, r2, r4
 8006068:	d10e      	bne.n	8006088 <__mcmp+0x28>
 800606a:	f100 0314 	add.w	r3, r0, #20
 800606e:	3114      	adds	r1, #20
 8006070:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006074:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006078:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800607c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006080:	42a5      	cmp	r5, r4
 8006082:	d003      	beq.n	800608c <__mcmp+0x2c>
 8006084:	d305      	bcc.n	8006092 <__mcmp+0x32>
 8006086:	2201      	movs	r2, #1
 8006088:	4610      	mov	r0, r2
 800608a:	bd30      	pop	{r4, r5, pc}
 800608c:	4283      	cmp	r3, r0
 800608e:	d3f3      	bcc.n	8006078 <__mcmp+0x18>
 8006090:	e7fa      	b.n	8006088 <__mcmp+0x28>
 8006092:	f04f 32ff 	mov.w	r2, #4294967295
 8006096:	e7f7      	b.n	8006088 <__mcmp+0x28>

08006098 <__mdiff>:
 8006098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	460c      	mov	r4, r1
 800609e:	4606      	mov	r6, r0
 80060a0:	4611      	mov	r1, r2
 80060a2:	4620      	mov	r0, r4
 80060a4:	4617      	mov	r7, r2
 80060a6:	f7ff ffdb 	bl	8006060 <__mcmp>
 80060aa:	1e05      	subs	r5, r0, #0
 80060ac:	d110      	bne.n	80060d0 <__mdiff+0x38>
 80060ae:	4629      	mov	r1, r5
 80060b0:	4630      	mov	r0, r6
 80060b2:	f7ff fd57 	bl	8005b64 <_Balloc>
 80060b6:	b930      	cbnz	r0, 80060c6 <__mdiff+0x2e>
 80060b8:	4b39      	ldr	r3, [pc, #228]	; (80061a0 <__mdiff+0x108>)
 80060ba:	4602      	mov	r2, r0
 80060bc:	f240 2132 	movw	r1, #562	; 0x232
 80060c0:	4838      	ldr	r0, [pc, #224]	; (80061a4 <__mdiff+0x10c>)
 80060c2:	f000 fd63 	bl	8006b8c <__assert_func>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80060cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d0:	bfa4      	itt	ge
 80060d2:	463b      	movge	r3, r7
 80060d4:	4627      	movge	r7, r4
 80060d6:	4630      	mov	r0, r6
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	bfa6      	itte	ge
 80060dc:	461c      	movge	r4, r3
 80060de:	2500      	movge	r5, #0
 80060e0:	2501      	movlt	r5, #1
 80060e2:	f7ff fd3f 	bl	8005b64 <_Balloc>
 80060e6:	b920      	cbnz	r0, 80060f2 <__mdiff+0x5a>
 80060e8:	4b2d      	ldr	r3, [pc, #180]	; (80061a0 <__mdiff+0x108>)
 80060ea:	4602      	mov	r2, r0
 80060ec:	f44f 7110 	mov.w	r1, #576	; 0x240
 80060f0:	e7e6      	b.n	80060c0 <__mdiff+0x28>
 80060f2:	693e      	ldr	r6, [r7, #16]
 80060f4:	60c5      	str	r5, [r0, #12]
 80060f6:	6925      	ldr	r5, [r4, #16]
 80060f8:	f107 0114 	add.w	r1, r7, #20
 80060fc:	f104 0914 	add.w	r9, r4, #20
 8006100:	f100 0e14 	add.w	lr, r0, #20
 8006104:	f107 0210 	add.w	r2, r7, #16
 8006108:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800610c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006110:	46f2      	mov	sl, lr
 8006112:	2700      	movs	r7, #0
 8006114:	f859 3b04 	ldr.w	r3, [r9], #4
 8006118:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800611c:	fa1f f883 	uxth.w	r8, r3
 8006120:	fa17 f78b 	uxtah	r7, r7, fp
 8006124:	0c1b      	lsrs	r3, r3, #16
 8006126:	eba7 0808 	sub.w	r8, r7, r8
 800612a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800612e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006132:	fa1f f888 	uxth.w	r8, r8
 8006136:	141f      	asrs	r7, r3, #16
 8006138:	454d      	cmp	r5, r9
 800613a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800613e:	f84a 3b04 	str.w	r3, [sl], #4
 8006142:	d8e7      	bhi.n	8006114 <__mdiff+0x7c>
 8006144:	1b2b      	subs	r3, r5, r4
 8006146:	3b15      	subs	r3, #21
 8006148:	f023 0303 	bic.w	r3, r3, #3
 800614c:	3304      	adds	r3, #4
 800614e:	3415      	adds	r4, #21
 8006150:	42a5      	cmp	r5, r4
 8006152:	bf38      	it	cc
 8006154:	2304      	movcc	r3, #4
 8006156:	4419      	add	r1, r3
 8006158:	4473      	add	r3, lr
 800615a:	469e      	mov	lr, r3
 800615c:	460d      	mov	r5, r1
 800615e:	4565      	cmp	r5, ip
 8006160:	d30e      	bcc.n	8006180 <__mdiff+0xe8>
 8006162:	f10c 0203 	add.w	r2, ip, #3
 8006166:	1a52      	subs	r2, r2, r1
 8006168:	f022 0203 	bic.w	r2, r2, #3
 800616c:	3903      	subs	r1, #3
 800616e:	458c      	cmp	ip, r1
 8006170:	bf38      	it	cc
 8006172:	2200      	movcc	r2, #0
 8006174:	441a      	add	r2, r3
 8006176:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800617a:	b17b      	cbz	r3, 800619c <__mdiff+0x104>
 800617c:	6106      	str	r6, [r0, #16]
 800617e:	e7a5      	b.n	80060cc <__mdiff+0x34>
 8006180:	f855 8b04 	ldr.w	r8, [r5], #4
 8006184:	fa17 f488 	uxtah	r4, r7, r8
 8006188:	1422      	asrs	r2, r4, #16
 800618a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800618e:	b2a4      	uxth	r4, r4
 8006190:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006194:	f84e 4b04 	str.w	r4, [lr], #4
 8006198:	1417      	asrs	r7, r2, #16
 800619a:	e7e0      	b.n	800615e <__mdiff+0xc6>
 800619c:	3e01      	subs	r6, #1
 800619e:	e7ea      	b.n	8006176 <__mdiff+0xde>
 80061a0:	0800719f 	.word	0x0800719f
 80061a4:	08007210 	.word	0x08007210

080061a8 <__d2b>:
 80061a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80061ac:	4689      	mov	r9, r1
 80061ae:	2101      	movs	r1, #1
 80061b0:	ec57 6b10 	vmov	r6, r7, d0
 80061b4:	4690      	mov	r8, r2
 80061b6:	f7ff fcd5 	bl	8005b64 <_Balloc>
 80061ba:	4604      	mov	r4, r0
 80061bc:	b930      	cbnz	r0, 80061cc <__d2b+0x24>
 80061be:	4602      	mov	r2, r0
 80061c0:	4b25      	ldr	r3, [pc, #148]	; (8006258 <__d2b+0xb0>)
 80061c2:	4826      	ldr	r0, [pc, #152]	; (800625c <__d2b+0xb4>)
 80061c4:	f240 310a 	movw	r1, #778	; 0x30a
 80061c8:	f000 fce0 	bl	8006b8c <__assert_func>
 80061cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80061d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80061d4:	bb35      	cbnz	r5, 8006224 <__d2b+0x7c>
 80061d6:	2e00      	cmp	r6, #0
 80061d8:	9301      	str	r3, [sp, #4]
 80061da:	d028      	beq.n	800622e <__d2b+0x86>
 80061dc:	4668      	mov	r0, sp
 80061de:	9600      	str	r6, [sp, #0]
 80061e0:	f7ff fd8c 	bl	8005cfc <__lo0bits>
 80061e4:	9900      	ldr	r1, [sp, #0]
 80061e6:	b300      	cbz	r0, 800622a <__d2b+0x82>
 80061e8:	9a01      	ldr	r2, [sp, #4]
 80061ea:	f1c0 0320 	rsb	r3, r0, #32
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	430b      	orrs	r3, r1
 80061f4:	40c2      	lsrs	r2, r0
 80061f6:	6163      	str	r3, [r4, #20]
 80061f8:	9201      	str	r2, [sp, #4]
 80061fa:	9b01      	ldr	r3, [sp, #4]
 80061fc:	61a3      	str	r3, [r4, #24]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	bf14      	ite	ne
 8006202:	2202      	movne	r2, #2
 8006204:	2201      	moveq	r2, #1
 8006206:	6122      	str	r2, [r4, #16]
 8006208:	b1d5      	cbz	r5, 8006240 <__d2b+0x98>
 800620a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800620e:	4405      	add	r5, r0
 8006210:	f8c9 5000 	str.w	r5, [r9]
 8006214:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006218:	f8c8 0000 	str.w	r0, [r8]
 800621c:	4620      	mov	r0, r4
 800621e:	b003      	add	sp, #12
 8006220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006228:	e7d5      	b.n	80061d6 <__d2b+0x2e>
 800622a:	6161      	str	r1, [r4, #20]
 800622c:	e7e5      	b.n	80061fa <__d2b+0x52>
 800622e:	a801      	add	r0, sp, #4
 8006230:	f7ff fd64 	bl	8005cfc <__lo0bits>
 8006234:	9b01      	ldr	r3, [sp, #4]
 8006236:	6163      	str	r3, [r4, #20]
 8006238:	2201      	movs	r2, #1
 800623a:	6122      	str	r2, [r4, #16]
 800623c:	3020      	adds	r0, #32
 800623e:	e7e3      	b.n	8006208 <__d2b+0x60>
 8006240:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006244:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006248:	f8c9 0000 	str.w	r0, [r9]
 800624c:	6918      	ldr	r0, [r3, #16]
 800624e:	f7ff fd35 	bl	8005cbc <__hi0bits>
 8006252:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006256:	e7df      	b.n	8006218 <__d2b+0x70>
 8006258:	0800719f 	.word	0x0800719f
 800625c:	08007210 	.word	0x08007210

08006260 <_calloc_r>:
 8006260:	b513      	push	{r0, r1, r4, lr}
 8006262:	434a      	muls	r2, r1
 8006264:	4611      	mov	r1, r2
 8006266:	9201      	str	r2, [sp, #4]
 8006268:	f000 f85a 	bl	8006320 <_malloc_r>
 800626c:	4604      	mov	r4, r0
 800626e:	b118      	cbz	r0, 8006278 <_calloc_r+0x18>
 8006270:	9a01      	ldr	r2, [sp, #4]
 8006272:	2100      	movs	r1, #0
 8006274:	f7fe f8d0 	bl	8004418 <memset>
 8006278:	4620      	mov	r0, r4
 800627a:	b002      	add	sp, #8
 800627c:	bd10      	pop	{r4, pc}
	...

08006280 <_free_r>:
 8006280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006282:	2900      	cmp	r1, #0
 8006284:	d048      	beq.n	8006318 <_free_r+0x98>
 8006286:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800628a:	9001      	str	r0, [sp, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	f1a1 0404 	sub.w	r4, r1, #4
 8006292:	bfb8      	it	lt
 8006294:	18e4      	addlt	r4, r4, r3
 8006296:	f000 fe1d 	bl	8006ed4 <__malloc_lock>
 800629a:	4a20      	ldr	r2, [pc, #128]	; (800631c <_free_r+0x9c>)
 800629c:	9801      	ldr	r0, [sp, #4]
 800629e:	6813      	ldr	r3, [r2, #0]
 80062a0:	4615      	mov	r5, r2
 80062a2:	b933      	cbnz	r3, 80062b2 <_free_r+0x32>
 80062a4:	6063      	str	r3, [r4, #4]
 80062a6:	6014      	str	r4, [r2, #0]
 80062a8:	b003      	add	sp, #12
 80062aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062ae:	f000 be17 	b.w	8006ee0 <__malloc_unlock>
 80062b2:	42a3      	cmp	r3, r4
 80062b4:	d90b      	bls.n	80062ce <_free_r+0x4e>
 80062b6:	6821      	ldr	r1, [r4, #0]
 80062b8:	1862      	adds	r2, r4, r1
 80062ba:	4293      	cmp	r3, r2
 80062bc:	bf04      	itt	eq
 80062be:	681a      	ldreq	r2, [r3, #0]
 80062c0:	685b      	ldreq	r3, [r3, #4]
 80062c2:	6063      	str	r3, [r4, #4]
 80062c4:	bf04      	itt	eq
 80062c6:	1852      	addeq	r2, r2, r1
 80062c8:	6022      	streq	r2, [r4, #0]
 80062ca:	602c      	str	r4, [r5, #0]
 80062cc:	e7ec      	b.n	80062a8 <_free_r+0x28>
 80062ce:	461a      	mov	r2, r3
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	b10b      	cbz	r3, 80062d8 <_free_r+0x58>
 80062d4:	42a3      	cmp	r3, r4
 80062d6:	d9fa      	bls.n	80062ce <_free_r+0x4e>
 80062d8:	6811      	ldr	r1, [r2, #0]
 80062da:	1855      	adds	r5, r2, r1
 80062dc:	42a5      	cmp	r5, r4
 80062de:	d10b      	bne.n	80062f8 <_free_r+0x78>
 80062e0:	6824      	ldr	r4, [r4, #0]
 80062e2:	4421      	add	r1, r4
 80062e4:	1854      	adds	r4, r2, r1
 80062e6:	42a3      	cmp	r3, r4
 80062e8:	6011      	str	r1, [r2, #0]
 80062ea:	d1dd      	bne.n	80062a8 <_free_r+0x28>
 80062ec:	681c      	ldr	r4, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	6053      	str	r3, [r2, #4]
 80062f2:	4421      	add	r1, r4
 80062f4:	6011      	str	r1, [r2, #0]
 80062f6:	e7d7      	b.n	80062a8 <_free_r+0x28>
 80062f8:	d902      	bls.n	8006300 <_free_r+0x80>
 80062fa:	230c      	movs	r3, #12
 80062fc:	6003      	str	r3, [r0, #0]
 80062fe:	e7d3      	b.n	80062a8 <_free_r+0x28>
 8006300:	6825      	ldr	r5, [r4, #0]
 8006302:	1961      	adds	r1, r4, r5
 8006304:	428b      	cmp	r3, r1
 8006306:	bf04      	itt	eq
 8006308:	6819      	ldreq	r1, [r3, #0]
 800630a:	685b      	ldreq	r3, [r3, #4]
 800630c:	6063      	str	r3, [r4, #4]
 800630e:	bf04      	itt	eq
 8006310:	1949      	addeq	r1, r1, r5
 8006312:	6021      	streq	r1, [r4, #0]
 8006314:	6054      	str	r4, [r2, #4]
 8006316:	e7c7      	b.n	80062a8 <_free_r+0x28>
 8006318:	b003      	add	sp, #12
 800631a:	bd30      	pop	{r4, r5, pc}
 800631c:	20000200 	.word	0x20000200

08006320 <_malloc_r>:
 8006320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006322:	1ccd      	adds	r5, r1, #3
 8006324:	f025 0503 	bic.w	r5, r5, #3
 8006328:	3508      	adds	r5, #8
 800632a:	2d0c      	cmp	r5, #12
 800632c:	bf38      	it	cc
 800632e:	250c      	movcc	r5, #12
 8006330:	2d00      	cmp	r5, #0
 8006332:	4606      	mov	r6, r0
 8006334:	db01      	blt.n	800633a <_malloc_r+0x1a>
 8006336:	42a9      	cmp	r1, r5
 8006338:	d903      	bls.n	8006342 <_malloc_r+0x22>
 800633a:	230c      	movs	r3, #12
 800633c:	6033      	str	r3, [r6, #0]
 800633e:	2000      	movs	r0, #0
 8006340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006342:	f000 fdc7 	bl	8006ed4 <__malloc_lock>
 8006346:	4921      	ldr	r1, [pc, #132]	; (80063cc <_malloc_r+0xac>)
 8006348:	680a      	ldr	r2, [r1, #0]
 800634a:	4614      	mov	r4, r2
 800634c:	b99c      	cbnz	r4, 8006376 <_malloc_r+0x56>
 800634e:	4f20      	ldr	r7, [pc, #128]	; (80063d0 <_malloc_r+0xb0>)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	b923      	cbnz	r3, 800635e <_malloc_r+0x3e>
 8006354:	4621      	mov	r1, r4
 8006356:	4630      	mov	r0, r6
 8006358:	f000 faf2 	bl	8006940 <_sbrk_r>
 800635c:	6038      	str	r0, [r7, #0]
 800635e:	4629      	mov	r1, r5
 8006360:	4630      	mov	r0, r6
 8006362:	f000 faed 	bl	8006940 <_sbrk_r>
 8006366:	1c43      	adds	r3, r0, #1
 8006368:	d123      	bne.n	80063b2 <_malloc_r+0x92>
 800636a:	230c      	movs	r3, #12
 800636c:	6033      	str	r3, [r6, #0]
 800636e:	4630      	mov	r0, r6
 8006370:	f000 fdb6 	bl	8006ee0 <__malloc_unlock>
 8006374:	e7e3      	b.n	800633e <_malloc_r+0x1e>
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	1b5b      	subs	r3, r3, r5
 800637a:	d417      	bmi.n	80063ac <_malloc_r+0x8c>
 800637c:	2b0b      	cmp	r3, #11
 800637e:	d903      	bls.n	8006388 <_malloc_r+0x68>
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	441c      	add	r4, r3
 8006384:	6025      	str	r5, [r4, #0]
 8006386:	e004      	b.n	8006392 <_malloc_r+0x72>
 8006388:	6863      	ldr	r3, [r4, #4]
 800638a:	42a2      	cmp	r2, r4
 800638c:	bf0c      	ite	eq
 800638e:	600b      	streq	r3, [r1, #0]
 8006390:	6053      	strne	r3, [r2, #4]
 8006392:	4630      	mov	r0, r6
 8006394:	f000 fda4 	bl	8006ee0 <__malloc_unlock>
 8006398:	f104 000b 	add.w	r0, r4, #11
 800639c:	1d23      	adds	r3, r4, #4
 800639e:	f020 0007 	bic.w	r0, r0, #7
 80063a2:	1ac2      	subs	r2, r0, r3
 80063a4:	d0cc      	beq.n	8006340 <_malloc_r+0x20>
 80063a6:	1a1b      	subs	r3, r3, r0
 80063a8:	50a3      	str	r3, [r4, r2]
 80063aa:	e7c9      	b.n	8006340 <_malloc_r+0x20>
 80063ac:	4622      	mov	r2, r4
 80063ae:	6864      	ldr	r4, [r4, #4]
 80063b0:	e7cc      	b.n	800634c <_malloc_r+0x2c>
 80063b2:	1cc4      	adds	r4, r0, #3
 80063b4:	f024 0403 	bic.w	r4, r4, #3
 80063b8:	42a0      	cmp	r0, r4
 80063ba:	d0e3      	beq.n	8006384 <_malloc_r+0x64>
 80063bc:	1a21      	subs	r1, r4, r0
 80063be:	4630      	mov	r0, r6
 80063c0:	f000 fabe 	bl	8006940 <_sbrk_r>
 80063c4:	3001      	adds	r0, #1
 80063c6:	d1dd      	bne.n	8006384 <_malloc_r+0x64>
 80063c8:	e7cf      	b.n	800636a <_malloc_r+0x4a>
 80063ca:	bf00      	nop
 80063cc:	20000200 	.word	0x20000200
 80063d0:	20000204 	.word	0x20000204

080063d4 <__ssputs_r>:
 80063d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d8:	688e      	ldr	r6, [r1, #8]
 80063da:	429e      	cmp	r6, r3
 80063dc:	4682      	mov	sl, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	4690      	mov	r8, r2
 80063e2:	461f      	mov	r7, r3
 80063e4:	d838      	bhi.n	8006458 <__ssputs_r+0x84>
 80063e6:	898a      	ldrh	r2, [r1, #12]
 80063e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063ec:	d032      	beq.n	8006454 <__ssputs_r+0x80>
 80063ee:	6825      	ldr	r5, [r4, #0]
 80063f0:	6909      	ldr	r1, [r1, #16]
 80063f2:	eba5 0901 	sub.w	r9, r5, r1
 80063f6:	6965      	ldr	r5, [r4, #20]
 80063f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006400:	3301      	adds	r3, #1
 8006402:	444b      	add	r3, r9
 8006404:	106d      	asrs	r5, r5, #1
 8006406:	429d      	cmp	r5, r3
 8006408:	bf38      	it	cc
 800640a:	461d      	movcc	r5, r3
 800640c:	0553      	lsls	r3, r2, #21
 800640e:	d531      	bpl.n	8006474 <__ssputs_r+0xa0>
 8006410:	4629      	mov	r1, r5
 8006412:	f7ff ff85 	bl	8006320 <_malloc_r>
 8006416:	4606      	mov	r6, r0
 8006418:	b950      	cbnz	r0, 8006430 <__ssputs_r+0x5c>
 800641a:	230c      	movs	r3, #12
 800641c:	f8ca 3000 	str.w	r3, [sl]
 8006420:	89a3      	ldrh	r3, [r4, #12]
 8006422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006426:	81a3      	strh	r3, [r4, #12]
 8006428:	f04f 30ff 	mov.w	r0, #4294967295
 800642c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006430:	6921      	ldr	r1, [r4, #16]
 8006432:	464a      	mov	r2, r9
 8006434:	f7ff fb88 	bl	8005b48 <memcpy>
 8006438:	89a3      	ldrh	r3, [r4, #12]
 800643a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800643e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006442:	81a3      	strh	r3, [r4, #12]
 8006444:	6126      	str	r6, [r4, #16]
 8006446:	6165      	str	r5, [r4, #20]
 8006448:	444e      	add	r6, r9
 800644a:	eba5 0509 	sub.w	r5, r5, r9
 800644e:	6026      	str	r6, [r4, #0]
 8006450:	60a5      	str	r5, [r4, #8]
 8006452:	463e      	mov	r6, r7
 8006454:	42be      	cmp	r6, r7
 8006456:	d900      	bls.n	800645a <__ssputs_r+0x86>
 8006458:	463e      	mov	r6, r7
 800645a:	4632      	mov	r2, r6
 800645c:	6820      	ldr	r0, [r4, #0]
 800645e:	4641      	mov	r1, r8
 8006460:	f000 fd1e 	bl	8006ea0 <memmove>
 8006464:	68a3      	ldr	r3, [r4, #8]
 8006466:	6822      	ldr	r2, [r4, #0]
 8006468:	1b9b      	subs	r3, r3, r6
 800646a:	4432      	add	r2, r6
 800646c:	60a3      	str	r3, [r4, #8]
 800646e:	6022      	str	r2, [r4, #0]
 8006470:	2000      	movs	r0, #0
 8006472:	e7db      	b.n	800642c <__ssputs_r+0x58>
 8006474:	462a      	mov	r2, r5
 8006476:	f000 fd39 	bl	8006eec <_realloc_r>
 800647a:	4606      	mov	r6, r0
 800647c:	2800      	cmp	r0, #0
 800647e:	d1e1      	bne.n	8006444 <__ssputs_r+0x70>
 8006480:	6921      	ldr	r1, [r4, #16]
 8006482:	4650      	mov	r0, sl
 8006484:	f7ff fefc 	bl	8006280 <_free_r>
 8006488:	e7c7      	b.n	800641a <__ssputs_r+0x46>
	...

0800648c <_svfiprintf_r>:
 800648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006490:	4698      	mov	r8, r3
 8006492:	898b      	ldrh	r3, [r1, #12]
 8006494:	061b      	lsls	r3, r3, #24
 8006496:	b09d      	sub	sp, #116	; 0x74
 8006498:	4607      	mov	r7, r0
 800649a:	460d      	mov	r5, r1
 800649c:	4614      	mov	r4, r2
 800649e:	d50e      	bpl.n	80064be <_svfiprintf_r+0x32>
 80064a0:	690b      	ldr	r3, [r1, #16]
 80064a2:	b963      	cbnz	r3, 80064be <_svfiprintf_r+0x32>
 80064a4:	2140      	movs	r1, #64	; 0x40
 80064a6:	f7ff ff3b 	bl	8006320 <_malloc_r>
 80064aa:	6028      	str	r0, [r5, #0]
 80064ac:	6128      	str	r0, [r5, #16]
 80064ae:	b920      	cbnz	r0, 80064ba <_svfiprintf_r+0x2e>
 80064b0:	230c      	movs	r3, #12
 80064b2:	603b      	str	r3, [r7, #0]
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295
 80064b8:	e0d1      	b.n	800665e <_svfiprintf_r+0x1d2>
 80064ba:	2340      	movs	r3, #64	; 0x40
 80064bc:	616b      	str	r3, [r5, #20]
 80064be:	2300      	movs	r3, #0
 80064c0:	9309      	str	r3, [sp, #36]	; 0x24
 80064c2:	2320      	movs	r3, #32
 80064c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80064cc:	2330      	movs	r3, #48	; 0x30
 80064ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006678 <_svfiprintf_r+0x1ec>
 80064d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064d6:	f04f 0901 	mov.w	r9, #1
 80064da:	4623      	mov	r3, r4
 80064dc:	469a      	mov	sl, r3
 80064de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064e2:	b10a      	cbz	r2, 80064e8 <_svfiprintf_r+0x5c>
 80064e4:	2a25      	cmp	r2, #37	; 0x25
 80064e6:	d1f9      	bne.n	80064dc <_svfiprintf_r+0x50>
 80064e8:	ebba 0b04 	subs.w	fp, sl, r4
 80064ec:	d00b      	beq.n	8006506 <_svfiprintf_r+0x7a>
 80064ee:	465b      	mov	r3, fp
 80064f0:	4622      	mov	r2, r4
 80064f2:	4629      	mov	r1, r5
 80064f4:	4638      	mov	r0, r7
 80064f6:	f7ff ff6d 	bl	80063d4 <__ssputs_r>
 80064fa:	3001      	adds	r0, #1
 80064fc:	f000 80aa 	beq.w	8006654 <_svfiprintf_r+0x1c8>
 8006500:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006502:	445a      	add	r2, fp
 8006504:	9209      	str	r2, [sp, #36]	; 0x24
 8006506:	f89a 3000 	ldrb.w	r3, [sl]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 80a2 	beq.w	8006654 <_svfiprintf_r+0x1c8>
 8006510:	2300      	movs	r3, #0
 8006512:	f04f 32ff 	mov.w	r2, #4294967295
 8006516:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800651a:	f10a 0a01 	add.w	sl, sl, #1
 800651e:	9304      	str	r3, [sp, #16]
 8006520:	9307      	str	r3, [sp, #28]
 8006522:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006526:	931a      	str	r3, [sp, #104]	; 0x68
 8006528:	4654      	mov	r4, sl
 800652a:	2205      	movs	r2, #5
 800652c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006530:	4851      	ldr	r0, [pc, #324]	; (8006678 <_svfiprintf_r+0x1ec>)
 8006532:	f7f9 fe8d 	bl	8000250 <memchr>
 8006536:	9a04      	ldr	r2, [sp, #16]
 8006538:	b9d8      	cbnz	r0, 8006572 <_svfiprintf_r+0xe6>
 800653a:	06d0      	lsls	r0, r2, #27
 800653c:	bf44      	itt	mi
 800653e:	2320      	movmi	r3, #32
 8006540:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006544:	0711      	lsls	r1, r2, #28
 8006546:	bf44      	itt	mi
 8006548:	232b      	movmi	r3, #43	; 0x2b
 800654a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800654e:	f89a 3000 	ldrb.w	r3, [sl]
 8006552:	2b2a      	cmp	r3, #42	; 0x2a
 8006554:	d015      	beq.n	8006582 <_svfiprintf_r+0xf6>
 8006556:	9a07      	ldr	r2, [sp, #28]
 8006558:	4654      	mov	r4, sl
 800655a:	2000      	movs	r0, #0
 800655c:	f04f 0c0a 	mov.w	ip, #10
 8006560:	4621      	mov	r1, r4
 8006562:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006566:	3b30      	subs	r3, #48	; 0x30
 8006568:	2b09      	cmp	r3, #9
 800656a:	d94e      	bls.n	800660a <_svfiprintf_r+0x17e>
 800656c:	b1b0      	cbz	r0, 800659c <_svfiprintf_r+0x110>
 800656e:	9207      	str	r2, [sp, #28]
 8006570:	e014      	b.n	800659c <_svfiprintf_r+0x110>
 8006572:	eba0 0308 	sub.w	r3, r0, r8
 8006576:	fa09 f303 	lsl.w	r3, r9, r3
 800657a:	4313      	orrs	r3, r2
 800657c:	9304      	str	r3, [sp, #16]
 800657e:	46a2      	mov	sl, r4
 8006580:	e7d2      	b.n	8006528 <_svfiprintf_r+0x9c>
 8006582:	9b03      	ldr	r3, [sp, #12]
 8006584:	1d19      	adds	r1, r3, #4
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	9103      	str	r1, [sp, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	bfbb      	ittet	lt
 800658e:	425b      	neglt	r3, r3
 8006590:	f042 0202 	orrlt.w	r2, r2, #2
 8006594:	9307      	strge	r3, [sp, #28]
 8006596:	9307      	strlt	r3, [sp, #28]
 8006598:	bfb8      	it	lt
 800659a:	9204      	strlt	r2, [sp, #16]
 800659c:	7823      	ldrb	r3, [r4, #0]
 800659e:	2b2e      	cmp	r3, #46	; 0x2e
 80065a0:	d10c      	bne.n	80065bc <_svfiprintf_r+0x130>
 80065a2:	7863      	ldrb	r3, [r4, #1]
 80065a4:	2b2a      	cmp	r3, #42	; 0x2a
 80065a6:	d135      	bne.n	8006614 <_svfiprintf_r+0x188>
 80065a8:	9b03      	ldr	r3, [sp, #12]
 80065aa:	1d1a      	adds	r2, r3, #4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	9203      	str	r2, [sp, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	bfb8      	it	lt
 80065b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80065b8:	3402      	adds	r4, #2
 80065ba:	9305      	str	r3, [sp, #20]
 80065bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006688 <_svfiprintf_r+0x1fc>
 80065c0:	7821      	ldrb	r1, [r4, #0]
 80065c2:	2203      	movs	r2, #3
 80065c4:	4650      	mov	r0, sl
 80065c6:	f7f9 fe43 	bl	8000250 <memchr>
 80065ca:	b140      	cbz	r0, 80065de <_svfiprintf_r+0x152>
 80065cc:	2340      	movs	r3, #64	; 0x40
 80065ce:	eba0 000a 	sub.w	r0, r0, sl
 80065d2:	fa03 f000 	lsl.w	r0, r3, r0
 80065d6:	9b04      	ldr	r3, [sp, #16]
 80065d8:	4303      	orrs	r3, r0
 80065da:	3401      	adds	r4, #1
 80065dc:	9304      	str	r3, [sp, #16]
 80065de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e2:	4826      	ldr	r0, [pc, #152]	; (800667c <_svfiprintf_r+0x1f0>)
 80065e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065e8:	2206      	movs	r2, #6
 80065ea:	f7f9 fe31 	bl	8000250 <memchr>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d038      	beq.n	8006664 <_svfiprintf_r+0x1d8>
 80065f2:	4b23      	ldr	r3, [pc, #140]	; (8006680 <_svfiprintf_r+0x1f4>)
 80065f4:	bb1b      	cbnz	r3, 800663e <_svfiprintf_r+0x1b2>
 80065f6:	9b03      	ldr	r3, [sp, #12]
 80065f8:	3307      	adds	r3, #7
 80065fa:	f023 0307 	bic.w	r3, r3, #7
 80065fe:	3308      	adds	r3, #8
 8006600:	9303      	str	r3, [sp, #12]
 8006602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006604:	4433      	add	r3, r6
 8006606:	9309      	str	r3, [sp, #36]	; 0x24
 8006608:	e767      	b.n	80064da <_svfiprintf_r+0x4e>
 800660a:	fb0c 3202 	mla	r2, ip, r2, r3
 800660e:	460c      	mov	r4, r1
 8006610:	2001      	movs	r0, #1
 8006612:	e7a5      	b.n	8006560 <_svfiprintf_r+0xd4>
 8006614:	2300      	movs	r3, #0
 8006616:	3401      	adds	r4, #1
 8006618:	9305      	str	r3, [sp, #20]
 800661a:	4619      	mov	r1, r3
 800661c:	f04f 0c0a 	mov.w	ip, #10
 8006620:	4620      	mov	r0, r4
 8006622:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006626:	3a30      	subs	r2, #48	; 0x30
 8006628:	2a09      	cmp	r2, #9
 800662a:	d903      	bls.n	8006634 <_svfiprintf_r+0x1a8>
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0c5      	beq.n	80065bc <_svfiprintf_r+0x130>
 8006630:	9105      	str	r1, [sp, #20]
 8006632:	e7c3      	b.n	80065bc <_svfiprintf_r+0x130>
 8006634:	fb0c 2101 	mla	r1, ip, r1, r2
 8006638:	4604      	mov	r4, r0
 800663a:	2301      	movs	r3, #1
 800663c:	e7f0      	b.n	8006620 <_svfiprintf_r+0x194>
 800663e:	ab03      	add	r3, sp, #12
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	462a      	mov	r2, r5
 8006644:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <_svfiprintf_r+0x1f8>)
 8006646:	a904      	add	r1, sp, #16
 8006648:	4638      	mov	r0, r7
 800664a:	f7fd ff7d 	bl	8004548 <_printf_float>
 800664e:	1c42      	adds	r2, r0, #1
 8006650:	4606      	mov	r6, r0
 8006652:	d1d6      	bne.n	8006602 <_svfiprintf_r+0x176>
 8006654:	89ab      	ldrh	r3, [r5, #12]
 8006656:	065b      	lsls	r3, r3, #25
 8006658:	f53f af2c 	bmi.w	80064b4 <_svfiprintf_r+0x28>
 800665c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800665e:	b01d      	add	sp, #116	; 0x74
 8006660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006664:	ab03      	add	r3, sp, #12
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	462a      	mov	r2, r5
 800666a:	4b06      	ldr	r3, [pc, #24]	; (8006684 <_svfiprintf_r+0x1f8>)
 800666c:	a904      	add	r1, sp, #16
 800666e:	4638      	mov	r0, r7
 8006670:	f7fe f9f6 	bl	8004a60 <_printf_i>
 8006674:	e7eb      	b.n	800664e <_svfiprintf_r+0x1c2>
 8006676:	bf00      	nop
 8006678:	0800736c 	.word	0x0800736c
 800667c:	08007376 	.word	0x08007376
 8006680:	08004549 	.word	0x08004549
 8006684:	080063d5 	.word	0x080063d5
 8006688:	08007372 	.word	0x08007372

0800668c <__sfputc_r>:
 800668c:	6893      	ldr	r3, [r2, #8]
 800668e:	3b01      	subs	r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	b410      	push	{r4}
 8006694:	6093      	str	r3, [r2, #8]
 8006696:	da08      	bge.n	80066aa <__sfputc_r+0x1e>
 8006698:	6994      	ldr	r4, [r2, #24]
 800669a:	42a3      	cmp	r3, r4
 800669c:	db01      	blt.n	80066a2 <__sfputc_r+0x16>
 800669e:	290a      	cmp	r1, #10
 80066a0:	d103      	bne.n	80066aa <__sfputc_r+0x1e>
 80066a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066a6:	f000 b99f 	b.w	80069e8 <__swbuf_r>
 80066aa:	6813      	ldr	r3, [r2, #0]
 80066ac:	1c58      	adds	r0, r3, #1
 80066ae:	6010      	str	r0, [r2, #0]
 80066b0:	7019      	strb	r1, [r3, #0]
 80066b2:	4608      	mov	r0, r1
 80066b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <__sfputs_r>:
 80066ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066bc:	4606      	mov	r6, r0
 80066be:	460f      	mov	r7, r1
 80066c0:	4614      	mov	r4, r2
 80066c2:	18d5      	adds	r5, r2, r3
 80066c4:	42ac      	cmp	r4, r5
 80066c6:	d101      	bne.n	80066cc <__sfputs_r+0x12>
 80066c8:	2000      	movs	r0, #0
 80066ca:	e007      	b.n	80066dc <__sfputs_r+0x22>
 80066cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066d0:	463a      	mov	r2, r7
 80066d2:	4630      	mov	r0, r6
 80066d4:	f7ff ffda 	bl	800668c <__sfputc_r>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d1f3      	bne.n	80066c4 <__sfputs_r+0xa>
 80066dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066e0 <_vfiprintf_r>:
 80066e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e4:	460d      	mov	r5, r1
 80066e6:	b09d      	sub	sp, #116	; 0x74
 80066e8:	4614      	mov	r4, r2
 80066ea:	4698      	mov	r8, r3
 80066ec:	4606      	mov	r6, r0
 80066ee:	b118      	cbz	r0, 80066f8 <_vfiprintf_r+0x18>
 80066f0:	6983      	ldr	r3, [r0, #24]
 80066f2:	b90b      	cbnz	r3, 80066f8 <_vfiprintf_r+0x18>
 80066f4:	f7ff f97a 	bl	80059ec <__sinit>
 80066f8:	4b89      	ldr	r3, [pc, #548]	; (8006920 <_vfiprintf_r+0x240>)
 80066fa:	429d      	cmp	r5, r3
 80066fc:	d11b      	bne.n	8006736 <_vfiprintf_r+0x56>
 80066fe:	6875      	ldr	r5, [r6, #4]
 8006700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006702:	07d9      	lsls	r1, r3, #31
 8006704:	d405      	bmi.n	8006712 <_vfiprintf_r+0x32>
 8006706:	89ab      	ldrh	r3, [r5, #12]
 8006708:	059a      	lsls	r2, r3, #22
 800670a:	d402      	bmi.n	8006712 <_vfiprintf_r+0x32>
 800670c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800670e:	f7ff fa10 	bl	8005b32 <__retarget_lock_acquire_recursive>
 8006712:	89ab      	ldrh	r3, [r5, #12]
 8006714:	071b      	lsls	r3, r3, #28
 8006716:	d501      	bpl.n	800671c <_vfiprintf_r+0x3c>
 8006718:	692b      	ldr	r3, [r5, #16]
 800671a:	b9eb      	cbnz	r3, 8006758 <_vfiprintf_r+0x78>
 800671c:	4629      	mov	r1, r5
 800671e:	4630      	mov	r0, r6
 8006720:	f000 f9c6 	bl	8006ab0 <__swsetup_r>
 8006724:	b1c0      	cbz	r0, 8006758 <_vfiprintf_r+0x78>
 8006726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006728:	07dc      	lsls	r4, r3, #31
 800672a:	d50e      	bpl.n	800674a <_vfiprintf_r+0x6a>
 800672c:	f04f 30ff 	mov.w	r0, #4294967295
 8006730:	b01d      	add	sp, #116	; 0x74
 8006732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006736:	4b7b      	ldr	r3, [pc, #492]	; (8006924 <_vfiprintf_r+0x244>)
 8006738:	429d      	cmp	r5, r3
 800673a:	d101      	bne.n	8006740 <_vfiprintf_r+0x60>
 800673c:	68b5      	ldr	r5, [r6, #8]
 800673e:	e7df      	b.n	8006700 <_vfiprintf_r+0x20>
 8006740:	4b79      	ldr	r3, [pc, #484]	; (8006928 <_vfiprintf_r+0x248>)
 8006742:	429d      	cmp	r5, r3
 8006744:	bf08      	it	eq
 8006746:	68f5      	ldreq	r5, [r6, #12]
 8006748:	e7da      	b.n	8006700 <_vfiprintf_r+0x20>
 800674a:	89ab      	ldrh	r3, [r5, #12]
 800674c:	0598      	lsls	r0, r3, #22
 800674e:	d4ed      	bmi.n	800672c <_vfiprintf_r+0x4c>
 8006750:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006752:	f7ff f9ef 	bl	8005b34 <__retarget_lock_release_recursive>
 8006756:	e7e9      	b.n	800672c <_vfiprintf_r+0x4c>
 8006758:	2300      	movs	r3, #0
 800675a:	9309      	str	r3, [sp, #36]	; 0x24
 800675c:	2320      	movs	r3, #32
 800675e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006762:	f8cd 800c 	str.w	r8, [sp, #12]
 8006766:	2330      	movs	r3, #48	; 0x30
 8006768:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800692c <_vfiprintf_r+0x24c>
 800676c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006770:	f04f 0901 	mov.w	r9, #1
 8006774:	4623      	mov	r3, r4
 8006776:	469a      	mov	sl, r3
 8006778:	f813 2b01 	ldrb.w	r2, [r3], #1
 800677c:	b10a      	cbz	r2, 8006782 <_vfiprintf_r+0xa2>
 800677e:	2a25      	cmp	r2, #37	; 0x25
 8006780:	d1f9      	bne.n	8006776 <_vfiprintf_r+0x96>
 8006782:	ebba 0b04 	subs.w	fp, sl, r4
 8006786:	d00b      	beq.n	80067a0 <_vfiprintf_r+0xc0>
 8006788:	465b      	mov	r3, fp
 800678a:	4622      	mov	r2, r4
 800678c:	4629      	mov	r1, r5
 800678e:	4630      	mov	r0, r6
 8006790:	f7ff ff93 	bl	80066ba <__sfputs_r>
 8006794:	3001      	adds	r0, #1
 8006796:	f000 80aa 	beq.w	80068ee <_vfiprintf_r+0x20e>
 800679a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800679c:	445a      	add	r2, fp
 800679e:	9209      	str	r2, [sp, #36]	; 0x24
 80067a0:	f89a 3000 	ldrb.w	r3, [sl]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 80a2 	beq.w	80068ee <_vfiprintf_r+0x20e>
 80067aa:	2300      	movs	r3, #0
 80067ac:	f04f 32ff 	mov.w	r2, #4294967295
 80067b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067b4:	f10a 0a01 	add.w	sl, sl, #1
 80067b8:	9304      	str	r3, [sp, #16]
 80067ba:	9307      	str	r3, [sp, #28]
 80067bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067c0:	931a      	str	r3, [sp, #104]	; 0x68
 80067c2:	4654      	mov	r4, sl
 80067c4:	2205      	movs	r2, #5
 80067c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ca:	4858      	ldr	r0, [pc, #352]	; (800692c <_vfiprintf_r+0x24c>)
 80067cc:	f7f9 fd40 	bl	8000250 <memchr>
 80067d0:	9a04      	ldr	r2, [sp, #16]
 80067d2:	b9d8      	cbnz	r0, 800680c <_vfiprintf_r+0x12c>
 80067d4:	06d1      	lsls	r1, r2, #27
 80067d6:	bf44      	itt	mi
 80067d8:	2320      	movmi	r3, #32
 80067da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067de:	0713      	lsls	r3, r2, #28
 80067e0:	bf44      	itt	mi
 80067e2:	232b      	movmi	r3, #43	; 0x2b
 80067e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067e8:	f89a 3000 	ldrb.w	r3, [sl]
 80067ec:	2b2a      	cmp	r3, #42	; 0x2a
 80067ee:	d015      	beq.n	800681c <_vfiprintf_r+0x13c>
 80067f0:	9a07      	ldr	r2, [sp, #28]
 80067f2:	4654      	mov	r4, sl
 80067f4:	2000      	movs	r0, #0
 80067f6:	f04f 0c0a 	mov.w	ip, #10
 80067fa:	4621      	mov	r1, r4
 80067fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006800:	3b30      	subs	r3, #48	; 0x30
 8006802:	2b09      	cmp	r3, #9
 8006804:	d94e      	bls.n	80068a4 <_vfiprintf_r+0x1c4>
 8006806:	b1b0      	cbz	r0, 8006836 <_vfiprintf_r+0x156>
 8006808:	9207      	str	r2, [sp, #28]
 800680a:	e014      	b.n	8006836 <_vfiprintf_r+0x156>
 800680c:	eba0 0308 	sub.w	r3, r0, r8
 8006810:	fa09 f303 	lsl.w	r3, r9, r3
 8006814:	4313      	orrs	r3, r2
 8006816:	9304      	str	r3, [sp, #16]
 8006818:	46a2      	mov	sl, r4
 800681a:	e7d2      	b.n	80067c2 <_vfiprintf_r+0xe2>
 800681c:	9b03      	ldr	r3, [sp, #12]
 800681e:	1d19      	adds	r1, r3, #4
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	9103      	str	r1, [sp, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	bfbb      	ittet	lt
 8006828:	425b      	neglt	r3, r3
 800682a:	f042 0202 	orrlt.w	r2, r2, #2
 800682e:	9307      	strge	r3, [sp, #28]
 8006830:	9307      	strlt	r3, [sp, #28]
 8006832:	bfb8      	it	lt
 8006834:	9204      	strlt	r2, [sp, #16]
 8006836:	7823      	ldrb	r3, [r4, #0]
 8006838:	2b2e      	cmp	r3, #46	; 0x2e
 800683a:	d10c      	bne.n	8006856 <_vfiprintf_r+0x176>
 800683c:	7863      	ldrb	r3, [r4, #1]
 800683e:	2b2a      	cmp	r3, #42	; 0x2a
 8006840:	d135      	bne.n	80068ae <_vfiprintf_r+0x1ce>
 8006842:	9b03      	ldr	r3, [sp, #12]
 8006844:	1d1a      	adds	r2, r3, #4
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	9203      	str	r2, [sp, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	bfb8      	it	lt
 800684e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006852:	3402      	adds	r4, #2
 8006854:	9305      	str	r3, [sp, #20]
 8006856:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800693c <_vfiprintf_r+0x25c>
 800685a:	7821      	ldrb	r1, [r4, #0]
 800685c:	2203      	movs	r2, #3
 800685e:	4650      	mov	r0, sl
 8006860:	f7f9 fcf6 	bl	8000250 <memchr>
 8006864:	b140      	cbz	r0, 8006878 <_vfiprintf_r+0x198>
 8006866:	2340      	movs	r3, #64	; 0x40
 8006868:	eba0 000a 	sub.w	r0, r0, sl
 800686c:	fa03 f000 	lsl.w	r0, r3, r0
 8006870:	9b04      	ldr	r3, [sp, #16]
 8006872:	4303      	orrs	r3, r0
 8006874:	3401      	adds	r4, #1
 8006876:	9304      	str	r3, [sp, #16]
 8006878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800687c:	482c      	ldr	r0, [pc, #176]	; (8006930 <_vfiprintf_r+0x250>)
 800687e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006882:	2206      	movs	r2, #6
 8006884:	f7f9 fce4 	bl	8000250 <memchr>
 8006888:	2800      	cmp	r0, #0
 800688a:	d03f      	beq.n	800690c <_vfiprintf_r+0x22c>
 800688c:	4b29      	ldr	r3, [pc, #164]	; (8006934 <_vfiprintf_r+0x254>)
 800688e:	bb1b      	cbnz	r3, 80068d8 <_vfiprintf_r+0x1f8>
 8006890:	9b03      	ldr	r3, [sp, #12]
 8006892:	3307      	adds	r3, #7
 8006894:	f023 0307 	bic.w	r3, r3, #7
 8006898:	3308      	adds	r3, #8
 800689a:	9303      	str	r3, [sp, #12]
 800689c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800689e:	443b      	add	r3, r7
 80068a0:	9309      	str	r3, [sp, #36]	; 0x24
 80068a2:	e767      	b.n	8006774 <_vfiprintf_r+0x94>
 80068a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80068a8:	460c      	mov	r4, r1
 80068aa:	2001      	movs	r0, #1
 80068ac:	e7a5      	b.n	80067fa <_vfiprintf_r+0x11a>
 80068ae:	2300      	movs	r3, #0
 80068b0:	3401      	adds	r4, #1
 80068b2:	9305      	str	r3, [sp, #20]
 80068b4:	4619      	mov	r1, r3
 80068b6:	f04f 0c0a 	mov.w	ip, #10
 80068ba:	4620      	mov	r0, r4
 80068bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068c0:	3a30      	subs	r2, #48	; 0x30
 80068c2:	2a09      	cmp	r2, #9
 80068c4:	d903      	bls.n	80068ce <_vfiprintf_r+0x1ee>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0c5      	beq.n	8006856 <_vfiprintf_r+0x176>
 80068ca:	9105      	str	r1, [sp, #20]
 80068cc:	e7c3      	b.n	8006856 <_vfiprintf_r+0x176>
 80068ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80068d2:	4604      	mov	r4, r0
 80068d4:	2301      	movs	r3, #1
 80068d6:	e7f0      	b.n	80068ba <_vfiprintf_r+0x1da>
 80068d8:	ab03      	add	r3, sp, #12
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	462a      	mov	r2, r5
 80068de:	4b16      	ldr	r3, [pc, #88]	; (8006938 <_vfiprintf_r+0x258>)
 80068e0:	a904      	add	r1, sp, #16
 80068e2:	4630      	mov	r0, r6
 80068e4:	f7fd fe30 	bl	8004548 <_printf_float>
 80068e8:	4607      	mov	r7, r0
 80068ea:	1c78      	adds	r0, r7, #1
 80068ec:	d1d6      	bne.n	800689c <_vfiprintf_r+0x1bc>
 80068ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068f0:	07d9      	lsls	r1, r3, #31
 80068f2:	d405      	bmi.n	8006900 <_vfiprintf_r+0x220>
 80068f4:	89ab      	ldrh	r3, [r5, #12]
 80068f6:	059a      	lsls	r2, r3, #22
 80068f8:	d402      	bmi.n	8006900 <_vfiprintf_r+0x220>
 80068fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068fc:	f7ff f91a 	bl	8005b34 <__retarget_lock_release_recursive>
 8006900:	89ab      	ldrh	r3, [r5, #12]
 8006902:	065b      	lsls	r3, r3, #25
 8006904:	f53f af12 	bmi.w	800672c <_vfiprintf_r+0x4c>
 8006908:	9809      	ldr	r0, [sp, #36]	; 0x24
 800690a:	e711      	b.n	8006730 <_vfiprintf_r+0x50>
 800690c:	ab03      	add	r3, sp, #12
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	462a      	mov	r2, r5
 8006912:	4b09      	ldr	r3, [pc, #36]	; (8006938 <_vfiprintf_r+0x258>)
 8006914:	a904      	add	r1, sp, #16
 8006916:	4630      	mov	r0, r6
 8006918:	f7fe f8a2 	bl	8004a60 <_printf_i>
 800691c:	e7e4      	b.n	80068e8 <_vfiprintf_r+0x208>
 800691e:	bf00      	nop
 8006920:	080071d0 	.word	0x080071d0
 8006924:	080071f0 	.word	0x080071f0
 8006928:	080071b0 	.word	0x080071b0
 800692c:	0800736c 	.word	0x0800736c
 8006930:	08007376 	.word	0x08007376
 8006934:	08004549 	.word	0x08004549
 8006938:	080066bb 	.word	0x080066bb
 800693c:	08007372 	.word	0x08007372

08006940 <_sbrk_r>:
 8006940:	b538      	push	{r3, r4, r5, lr}
 8006942:	4d06      	ldr	r5, [pc, #24]	; (800695c <_sbrk_r+0x1c>)
 8006944:	2300      	movs	r3, #0
 8006946:	4604      	mov	r4, r0
 8006948:	4608      	mov	r0, r1
 800694a:	602b      	str	r3, [r5, #0]
 800694c:	f7fa fdd8 	bl	8001500 <_sbrk>
 8006950:	1c43      	adds	r3, r0, #1
 8006952:	d102      	bne.n	800695a <_sbrk_r+0x1a>
 8006954:	682b      	ldr	r3, [r5, #0]
 8006956:	b103      	cbz	r3, 800695a <_sbrk_r+0x1a>
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	bd38      	pop	{r3, r4, r5, pc}
 800695c:	2000042c 	.word	0x2000042c

08006960 <__sread>:
 8006960:	b510      	push	{r4, lr}
 8006962:	460c      	mov	r4, r1
 8006964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006968:	f000 fae6 	bl	8006f38 <_read_r>
 800696c:	2800      	cmp	r0, #0
 800696e:	bfab      	itete	ge
 8006970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006972:	89a3      	ldrhlt	r3, [r4, #12]
 8006974:	181b      	addge	r3, r3, r0
 8006976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800697a:	bfac      	ite	ge
 800697c:	6563      	strge	r3, [r4, #84]	; 0x54
 800697e:	81a3      	strhlt	r3, [r4, #12]
 8006980:	bd10      	pop	{r4, pc}

08006982 <__swrite>:
 8006982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006986:	461f      	mov	r7, r3
 8006988:	898b      	ldrh	r3, [r1, #12]
 800698a:	05db      	lsls	r3, r3, #23
 800698c:	4605      	mov	r5, r0
 800698e:	460c      	mov	r4, r1
 8006990:	4616      	mov	r6, r2
 8006992:	d505      	bpl.n	80069a0 <__swrite+0x1e>
 8006994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006998:	2302      	movs	r3, #2
 800699a:	2200      	movs	r2, #0
 800699c:	f000 f9f8 	bl	8006d90 <_lseek_r>
 80069a0:	89a3      	ldrh	r3, [r4, #12]
 80069a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069aa:	81a3      	strh	r3, [r4, #12]
 80069ac:	4632      	mov	r2, r6
 80069ae:	463b      	mov	r3, r7
 80069b0:	4628      	mov	r0, r5
 80069b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069b6:	f000 b869 	b.w	8006a8c <_write_r>

080069ba <__sseek>:
 80069ba:	b510      	push	{r4, lr}
 80069bc:	460c      	mov	r4, r1
 80069be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c2:	f000 f9e5 	bl	8006d90 <_lseek_r>
 80069c6:	1c43      	adds	r3, r0, #1
 80069c8:	89a3      	ldrh	r3, [r4, #12]
 80069ca:	bf15      	itete	ne
 80069cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80069ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069d6:	81a3      	strheq	r3, [r4, #12]
 80069d8:	bf18      	it	ne
 80069da:	81a3      	strhne	r3, [r4, #12]
 80069dc:	bd10      	pop	{r4, pc}

080069de <__sclose>:
 80069de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069e2:	f000 b8f1 	b.w	8006bc8 <_close_r>
	...

080069e8 <__swbuf_r>:
 80069e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ea:	460e      	mov	r6, r1
 80069ec:	4614      	mov	r4, r2
 80069ee:	4605      	mov	r5, r0
 80069f0:	b118      	cbz	r0, 80069fa <__swbuf_r+0x12>
 80069f2:	6983      	ldr	r3, [r0, #24]
 80069f4:	b90b      	cbnz	r3, 80069fa <__swbuf_r+0x12>
 80069f6:	f7fe fff9 	bl	80059ec <__sinit>
 80069fa:	4b21      	ldr	r3, [pc, #132]	; (8006a80 <__swbuf_r+0x98>)
 80069fc:	429c      	cmp	r4, r3
 80069fe:	d12b      	bne.n	8006a58 <__swbuf_r+0x70>
 8006a00:	686c      	ldr	r4, [r5, #4]
 8006a02:	69a3      	ldr	r3, [r4, #24]
 8006a04:	60a3      	str	r3, [r4, #8]
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	071a      	lsls	r2, r3, #28
 8006a0a:	d52f      	bpl.n	8006a6c <__swbuf_r+0x84>
 8006a0c:	6923      	ldr	r3, [r4, #16]
 8006a0e:	b36b      	cbz	r3, 8006a6c <__swbuf_r+0x84>
 8006a10:	6923      	ldr	r3, [r4, #16]
 8006a12:	6820      	ldr	r0, [r4, #0]
 8006a14:	1ac0      	subs	r0, r0, r3
 8006a16:	6963      	ldr	r3, [r4, #20]
 8006a18:	b2f6      	uxtb	r6, r6
 8006a1a:	4283      	cmp	r3, r0
 8006a1c:	4637      	mov	r7, r6
 8006a1e:	dc04      	bgt.n	8006a2a <__swbuf_r+0x42>
 8006a20:	4621      	mov	r1, r4
 8006a22:	4628      	mov	r0, r5
 8006a24:	f000 f966 	bl	8006cf4 <_fflush_r>
 8006a28:	bb30      	cbnz	r0, 8006a78 <__swbuf_r+0x90>
 8006a2a:	68a3      	ldr	r3, [r4, #8]
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	60a3      	str	r3, [r4, #8]
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	6022      	str	r2, [r4, #0]
 8006a36:	701e      	strb	r6, [r3, #0]
 8006a38:	6963      	ldr	r3, [r4, #20]
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	4283      	cmp	r3, r0
 8006a3e:	d004      	beq.n	8006a4a <__swbuf_r+0x62>
 8006a40:	89a3      	ldrh	r3, [r4, #12]
 8006a42:	07db      	lsls	r3, r3, #31
 8006a44:	d506      	bpl.n	8006a54 <__swbuf_r+0x6c>
 8006a46:	2e0a      	cmp	r6, #10
 8006a48:	d104      	bne.n	8006a54 <__swbuf_r+0x6c>
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f000 f951 	bl	8006cf4 <_fflush_r>
 8006a52:	b988      	cbnz	r0, 8006a78 <__swbuf_r+0x90>
 8006a54:	4638      	mov	r0, r7
 8006a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a58:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <__swbuf_r+0x9c>)
 8006a5a:	429c      	cmp	r4, r3
 8006a5c:	d101      	bne.n	8006a62 <__swbuf_r+0x7a>
 8006a5e:	68ac      	ldr	r4, [r5, #8]
 8006a60:	e7cf      	b.n	8006a02 <__swbuf_r+0x1a>
 8006a62:	4b09      	ldr	r3, [pc, #36]	; (8006a88 <__swbuf_r+0xa0>)
 8006a64:	429c      	cmp	r4, r3
 8006a66:	bf08      	it	eq
 8006a68:	68ec      	ldreq	r4, [r5, #12]
 8006a6a:	e7ca      	b.n	8006a02 <__swbuf_r+0x1a>
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	4628      	mov	r0, r5
 8006a70:	f000 f81e 	bl	8006ab0 <__swsetup_r>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d0cb      	beq.n	8006a10 <__swbuf_r+0x28>
 8006a78:	f04f 37ff 	mov.w	r7, #4294967295
 8006a7c:	e7ea      	b.n	8006a54 <__swbuf_r+0x6c>
 8006a7e:	bf00      	nop
 8006a80:	080071d0 	.word	0x080071d0
 8006a84:	080071f0 	.word	0x080071f0
 8006a88:	080071b0 	.word	0x080071b0

08006a8c <_write_r>:
 8006a8c:	b538      	push	{r3, r4, r5, lr}
 8006a8e:	4d07      	ldr	r5, [pc, #28]	; (8006aac <_write_r+0x20>)
 8006a90:	4604      	mov	r4, r0
 8006a92:	4608      	mov	r0, r1
 8006a94:	4611      	mov	r1, r2
 8006a96:	2200      	movs	r2, #0
 8006a98:	602a      	str	r2, [r5, #0]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	f7fa fbc8 	bl	8001230 <_write>
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	d102      	bne.n	8006aaa <_write_r+0x1e>
 8006aa4:	682b      	ldr	r3, [r5, #0]
 8006aa6:	b103      	cbz	r3, 8006aaa <_write_r+0x1e>
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	bd38      	pop	{r3, r4, r5, pc}
 8006aac:	2000042c 	.word	0x2000042c

08006ab0 <__swsetup_r>:
 8006ab0:	4b32      	ldr	r3, [pc, #200]	; (8006b7c <__swsetup_r+0xcc>)
 8006ab2:	b570      	push	{r4, r5, r6, lr}
 8006ab4:	681d      	ldr	r5, [r3, #0]
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	460c      	mov	r4, r1
 8006aba:	b125      	cbz	r5, 8006ac6 <__swsetup_r+0x16>
 8006abc:	69ab      	ldr	r3, [r5, #24]
 8006abe:	b913      	cbnz	r3, 8006ac6 <__swsetup_r+0x16>
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	f7fe ff93 	bl	80059ec <__sinit>
 8006ac6:	4b2e      	ldr	r3, [pc, #184]	; (8006b80 <__swsetup_r+0xd0>)
 8006ac8:	429c      	cmp	r4, r3
 8006aca:	d10f      	bne.n	8006aec <__swsetup_r+0x3c>
 8006acc:	686c      	ldr	r4, [r5, #4]
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ad4:	0719      	lsls	r1, r3, #28
 8006ad6:	d42c      	bmi.n	8006b32 <__swsetup_r+0x82>
 8006ad8:	06dd      	lsls	r5, r3, #27
 8006ada:	d411      	bmi.n	8006b00 <__swsetup_r+0x50>
 8006adc:	2309      	movs	r3, #9
 8006ade:	6033      	str	r3, [r6, #0]
 8006ae0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ae4:	81a3      	strh	r3, [r4, #12]
 8006ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aea:	e03e      	b.n	8006b6a <__swsetup_r+0xba>
 8006aec:	4b25      	ldr	r3, [pc, #148]	; (8006b84 <__swsetup_r+0xd4>)
 8006aee:	429c      	cmp	r4, r3
 8006af0:	d101      	bne.n	8006af6 <__swsetup_r+0x46>
 8006af2:	68ac      	ldr	r4, [r5, #8]
 8006af4:	e7eb      	b.n	8006ace <__swsetup_r+0x1e>
 8006af6:	4b24      	ldr	r3, [pc, #144]	; (8006b88 <__swsetup_r+0xd8>)
 8006af8:	429c      	cmp	r4, r3
 8006afa:	bf08      	it	eq
 8006afc:	68ec      	ldreq	r4, [r5, #12]
 8006afe:	e7e6      	b.n	8006ace <__swsetup_r+0x1e>
 8006b00:	0758      	lsls	r0, r3, #29
 8006b02:	d512      	bpl.n	8006b2a <__swsetup_r+0x7a>
 8006b04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b06:	b141      	cbz	r1, 8006b1a <__swsetup_r+0x6a>
 8006b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b0c:	4299      	cmp	r1, r3
 8006b0e:	d002      	beq.n	8006b16 <__swsetup_r+0x66>
 8006b10:	4630      	mov	r0, r6
 8006b12:	f7ff fbb5 	bl	8006280 <_free_r>
 8006b16:	2300      	movs	r3, #0
 8006b18:	6363      	str	r3, [r4, #52]	; 0x34
 8006b1a:	89a3      	ldrh	r3, [r4, #12]
 8006b1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b20:	81a3      	strh	r3, [r4, #12]
 8006b22:	2300      	movs	r3, #0
 8006b24:	6063      	str	r3, [r4, #4]
 8006b26:	6923      	ldr	r3, [r4, #16]
 8006b28:	6023      	str	r3, [r4, #0]
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	f043 0308 	orr.w	r3, r3, #8
 8006b30:	81a3      	strh	r3, [r4, #12]
 8006b32:	6923      	ldr	r3, [r4, #16]
 8006b34:	b94b      	cbnz	r3, 8006b4a <__swsetup_r+0x9a>
 8006b36:	89a3      	ldrh	r3, [r4, #12]
 8006b38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b40:	d003      	beq.n	8006b4a <__swsetup_r+0x9a>
 8006b42:	4621      	mov	r1, r4
 8006b44:	4630      	mov	r0, r6
 8006b46:	f000 f959 	bl	8006dfc <__smakebuf_r>
 8006b4a:	89a0      	ldrh	r0, [r4, #12]
 8006b4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b50:	f010 0301 	ands.w	r3, r0, #1
 8006b54:	d00a      	beq.n	8006b6c <__swsetup_r+0xbc>
 8006b56:	2300      	movs	r3, #0
 8006b58:	60a3      	str	r3, [r4, #8]
 8006b5a:	6963      	ldr	r3, [r4, #20]
 8006b5c:	425b      	negs	r3, r3
 8006b5e:	61a3      	str	r3, [r4, #24]
 8006b60:	6923      	ldr	r3, [r4, #16]
 8006b62:	b943      	cbnz	r3, 8006b76 <__swsetup_r+0xc6>
 8006b64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b68:	d1ba      	bne.n	8006ae0 <__swsetup_r+0x30>
 8006b6a:	bd70      	pop	{r4, r5, r6, pc}
 8006b6c:	0781      	lsls	r1, r0, #30
 8006b6e:	bf58      	it	pl
 8006b70:	6963      	ldrpl	r3, [r4, #20]
 8006b72:	60a3      	str	r3, [r4, #8]
 8006b74:	e7f4      	b.n	8006b60 <__swsetup_r+0xb0>
 8006b76:	2000      	movs	r0, #0
 8006b78:	e7f7      	b.n	8006b6a <__swsetup_r+0xba>
 8006b7a:	bf00      	nop
 8006b7c:	2000000c 	.word	0x2000000c
 8006b80:	080071d0 	.word	0x080071d0
 8006b84:	080071f0 	.word	0x080071f0
 8006b88:	080071b0 	.word	0x080071b0

08006b8c <__assert_func>:
 8006b8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b8e:	4614      	mov	r4, r2
 8006b90:	461a      	mov	r2, r3
 8006b92:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <__assert_func+0x2c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4605      	mov	r5, r0
 8006b98:	68d8      	ldr	r0, [r3, #12]
 8006b9a:	b14c      	cbz	r4, 8006bb0 <__assert_func+0x24>
 8006b9c:	4b07      	ldr	r3, [pc, #28]	; (8006bbc <__assert_func+0x30>)
 8006b9e:	9100      	str	r1, [sp, #0]
 8006ba0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ba4:	4906      	ldr	r1, [pc, #24]	; (8006bc0 <__assert_func+0x34>)
 8006ba6:	462b      	mov	r3, r5
 8006ba8:	f000 f8e0 	bl	8006d6c <fiprintf>
 8006bac:	f000 f9e3 	bl	8006f76 <abort>
 8006bb0:	4b04      	ldr	r3, [pc, #16]	; (8006bc4 <__assert_func+0x38>)
 8006bb2:	461c      	mov	r4, r3
 8006bb4:	e7f3      	b.n	8006b9e <__assert_func+0x12>
 8006bb6:	bf00      	nop
 8006bb8:	2000000c 	.word	0x2000000c
 8006bbc:	0800737d 	.word	0x0800737d
 8006bc0:	0800738a 	.word	0x0800738a
 8006bc4:	080073b8 	.word	0x080073b8

08006bc8 <_close_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4d06      	ldr	r5, [pc, #24]	; (8006be4 <_close_r+0x1c>)
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4604      	mov	r4, r0
 8006bd0:	4608      	mov	r0, r1
 8006bd2:	602b      	str	r3, [r5, #0]
 8006bd4:	f7fa fc5f 	bl	8001496 <_close>
 8006bd8:	1c43      	adds	r3, r0, #1
 8006bda:	d102      	bne.n	8006be2 <_close_r+0x1a>
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	b103      	cbz	r3, 8006be2 <_close_r+0x1a>
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	bd38      	pop	{r3, r4, r5, pc}
 8006be4:	2000042c 	.word	0x2000042c

08006be8 <__sflush_r>:
 8006be8:	898a      	ldrh	r2, [r1, #12]
 8006bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bee:	4605      	mov	r5, r0
 8006bf0:	0710      	lsls	r0, r2, #28
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	d458      	bmi.n	8006ca8 <__sflush_r+0xc0>
 8006bf6:	684b      	ldr	r3, [r1, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	dc05      	bgt.n	8006c08 <__sflush_r+0x20>
 8006bfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	dc02      	bgt.n	8006c08 <__sflush_r+0x20>
 8006c02:	2000      	movs	r0, #0
 8006c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c0a:	2e00      	cmp	r6, #0
 8006c0c:	d0f9      	beq.n	8006c02 <__sflush_r+0x1a>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c14:	682f      	ldr	r7, [r5, #0]
 8006c16:	602b      	str	r3, [r5, #0]
 8006c18:	d032      	beq.n	8006c80 <__sflush_r+0x98>
 8006c1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c1c:	89a3      	ldrh	r3, [r4, #12]
 8006c1e:	075a      	lsls	r2, r3, #29
 8006c20:	d505      	bpl.n	8006c2e <__sflush_r+0x46>
 8006c22:	6863      	ldr	r3, [r4, #4]
 8006c24:	1ac0      	subs	r0, r0, r3
 8006c26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c28:	b10b      	cbz	r3, 8006c2e <__sflush_r+0x46>
 8006c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c2c:	1ac0      	subs	r0, r0, r3
 8006c2e:	2300      	movs	r3, #0
 8006c30:	4602      	mov	r2, r0
 8006c32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c34:	6a21      	ldr	r1, [r4, #32]
 8006c36:	4628      	mov	r0, r5
 8006c38:	47b0      	blx	r6
 8006c3a:	1c43      	adds	r3, r0, #1
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	d106      	bne.n	8006c4e <__sflush_r+0x66>
 8006c40:	6829      	ldr	r1, [r5, #0]
 8006c42:	291d      	cmp	r1, #29
 8006c44:	d82c      	bhi.n	8006ca0 <__sflush_r+0xb8>
 8006c46:	4a2a      	ldr	r2, [pc, #168]	; (8006cf0 <__sflush_r+0x108>)
 8006c48:	40ca      	lsrs	r2, r1
 8006c4a:	07d6      	lsls	r6, r2, #31
 8006c4c:	d528      	bpl.n	8006ca0 <__sflush_r+0xb8>
 8006c4e:	2200      	movs	r2, #0
 8006c50:	6062      	str	r2, [r4, #4]
 8006c52:	04d9      	lsls	r1, r3, #19
 8006c54:	6922      	ldr	r2, [r4, #16]
 8006c56:	6022      	str	r2, [r4, #0]
 8006c58:	d504      	bpl.n	8006c64 <__sflush_r+0x7c>
 8006c5a:	1c42      	adds	r2, r0, #1
 8006c5c:	d101      	bne.n	8006c62 <__sflush_r+0x7a>
 8006c5e:	682b      	ldr	r3, [r5, #0]
 8006c60:	b903      	cbnz	r3, 8006c64 <__sflush_r+0x7c>
 8006c62:	6560      	str	r0, [r4, #84]	; 0x54
 8006c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c66:	602f      	str	r7, [r5, #0]
 8006c68:	2900      	cmp	r1, #0
 8006c6a:	d0ca      	beq.n	8006c02 <__sflush_r+0x1a>
 8006c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c70:	4299      	cmp	r1, r3
 8006c72:	d002      	beq.n	8006c7a <__sflush_r+0x92>
 8006c74:	4628      	mov	r0, r5
 8006c76:	f7ff fb03 	bl	8006280 <_free_r>
 8006c7a:	2000      	movs	r0, #0
 8006c7c:	6360      	str	r0, [r4, #52]	; 0x34
 8006c7e:	e7c1      	b.n	8006c04 <__sflush_r+0x1c>
 8006c80:	6a21      	ldr	r1, [r4, #32]
 8006c82:	2301      	movs	r3, #1
 8006c84:	4628      	mov	r0, r5
 8006c86:	47b0      	blx	r6
 8006c88:	1c41      	adds	r1, r0, #1
 8006c8a:	d1c7      	bne.n	8006c1c <__sflush_r+0x34>
 8006c8c:	682b      	ldr	r3, [r5, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d0c4      	beq.n	8006c1c <__sflush_r+0x34>
 8006c92:	2b1d      	cmp	r3, #29
 8006c94:	d001      	beq.n	8006c9a <__sflush_r+0xb2>
 8006c96:	2b16      	cmp	r3, #22
 8006c98:	d101      	bne.n	8006c9e <__sflush_r+0xb6>
 8006c9a:	602f      	str	r7, [r5, #0]
 8006c9c:	e7b1      	b.n	8006c02 <__sflush_r+0x1a>
 8006c9e:	89a3      	ldrh	r3, [r4, #12]
 8006ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ca4:	81a3      	strh	r3, [r4, #12]
 8006ca6:	e7ad      	b.n	8006c04 <__sflush_r+0x1c>
 8006ca8:	690f      	ldr	r7, [r1, #16]
 8006caa:	2f00      	cmp	r7, #0
 8006cac:	d0a9      	beq.n	8006c02 <__sflush_r+0x1a>
 8006cae:	0793      	lsls	r3, r2, #30
 8006cb0:	680e      	ldr	r6, [r1, #0]
 8006cb2:	bf08      	it	eq
 8006cb4:	694b      	ldreq	r3, [r1, #20]
 8006cb6:	600f      	str	r7, [r1, #0]
 8006cb8:	bf18      	it	ne
 8006cba:	2300      	movne	r3, #0
 8006cbc:	eba6 0807 	sub.w	r8, r6, r7
 8006cc0:	608b      	str	r3, [r1, #8]
 8006cc2:	f1b8 0f00 	cmp.w	r8, #0
 8006cc6:	dd9c      	ble.n	8006c02 <__sflush_r+0x1a>
 8006cc8:	6a21      	ldr	r1, [r4, #32]
 8006cca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ccc:	4643      	mov	r3, r8
 8006cce:	463a      	mov	r2, r7
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	47b0      	blx	r6
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	dc06      	bgt.n	8006ce6 <__sflush_r+0xfe>
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cde:	81a3      	strh	r3, [r4, #12]
 8006ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce4:	e78e      	b.n	8006c04 <__sflush_r+0x1c>
 8006ce6:	4407      	add	r7, r0
 8006ce8:	eba8 0800 	sub.w	r8, r8, r0
 8006cec:	e7e9      	b.n	8006cc2 <__sflush_r+0xda>
 8006cee:	bf00      	nop
 8006cf0:	20400001 	.word	0x20400001

08006cf4 <_fflush_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	690b      	ldr	r3, [r1, #16]
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	b913      	cbnz	r3, 8006d04 <_fflush_r+0x10>
 8006cfe:	2500      	movs	r5, #0
 8006d00:	4628      	mov	r0, r5
 8006d02:	bd38      	pop	{r3, r4, r5, pc}
 8006d04:	b118      	cbz	r0, 8006d0e <_fflush_r+0x1a>
 8006d06:	6983      	ldr	r3, [r0, #24]
 8006d08:	b90b      	cbnz	r3, 8006d0e <_fflush_r+0x1a>
 8006d0a:	f7fe fe6f 	bl	80059ec <__sinit>
 8006d0e:	4b14      	ldr	r3, [pc, #80]	; (8006d60 <_fflush_r+0x6c>)
 8006d10:	429c      	cmp	r4, r3
 8006d12:	d11b      	bne.n	8006d4c <_fflush_r+0x58>
 8006d14:	686c      	ldr	r4, [r5, #4]
 8006d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0ef      	beq.n	8006cfe <_fflush_r+0xa>
 8006d1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d20:	07d0      	lsls	r0, r2, #31
 8006d22:	d404      	bmi.n	8006d2e <_fflush_r+0x3a>
 8006d24:	0599      	lsls	r1, r3, #22
 8006d26:	d402      	bmi.n	8006d2e <_fflush_r+0x3a>
 8006d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d2a:	f7fe ff02 	bl	8005b32 <__retarget_lock_acquire_recursive>
 8006d2e:	4628      	mov	r0, r5
 8006d30:	4621      	mov	r1, r4
 8006d32:	f7ff ff59 	bl	8006be8 <__sflush_r>
 8006d36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d38:	07da      	lsls	r2, r3, #31
 8006d3a:	4605      	mov	r5, r0
 8006d3c:	d4e0      	bmi.n	8006d00 <_fflush_r+0xc>
 8006d3e:	89a3      	ldrh	r3, [r4, #12]
 8006d40:	059b      	lsls	r3, r3, #22
 8006d42:	d4dd      	bmi.n	8006d00 <_fflush_r+0xc>
 8006d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d46:	f7fe fef5 	bl	8005b34 <__retarget_lock_release_recursive>
 8006d4a:	e7d9      	b.n	8006d00 <_fflush_r+0xc>
 8006d4c:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <_fflush_r+0x70>)
 8006d4e:	429c      	cmp	r4, r3
 8006d50:	d101      	bne.n	8006d56 <_fflush_r+0x62>
 8006d52:	68ac      	ldr	r4, [r5, #8]
 8006d54:	e7df      	b.n	8006d16 <_fflush_r+0x22>
 8006d56:	4b04      	ldr	r3, [pc, #16]	; (8006d68 <_fflush_r+0x74>)
 8006d58:	429c      	cmp	r4, r3
 8006d5a:	bf08      	it	eq
 8006d5c:	68ec      	ldreq	r4, [r5, #12]
 8006d5e:	e7da      	b.n	8006d16 <_fflush_r+0x22>
 8006d60:	080071d0 	.word	0x080071d0
 8006d64:	080071f0 	.word	0x080071f0
 8006d68:	080071b0 	.word	0x080071b0

08006d6c <fiprintf>:
 8006d6c:	b40e      	push	{r1, r2, r3}
 8006d6e:	b503      	push	{r0, r1, lr}
 8006d70:	4601      	mov	r1, r0
 8006d72:	ab03      	add	r3, sp, #12
 8006d74:	4805      	ldr	r0, [pc, #20]	; (8006d8c <fiprintf+0x20>)
 8006d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d7a:	6800      	ldr	r0, [r0, #0]
 8006d7c:	9301      	str	r3, [sp, #4]
 8006d7e:	f7ff fcaf 	bl	80066e0 <_vfiprintf_r>
 8006d82:	b002      	add	sp, #8
 8006d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d88:	b003      	add	sp, #12
 8006d8a:	4770      	bx	lr
 8006d8c:	2000000c 	.word	0x2000000c

08006d90 <_lseek_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	4d07      	ldr	r5, [pc, #28]	; (8006db0 <_lseek_r+0x20>)
 8006d94:	4604      	mov	r4, r0
 8006d96:	4608      	mov	r0, r1
 8006d98:	4611      	mov	r1, r2
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	602a      	str	r2, [r5, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f7fa fba0 	bl	80014e4 <_lseek>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d102      	bne.n	8006dae <_lseek_r+0x1e>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	b103      	cbz	r3, 8006dae <_lseek_r+0x1e>
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	2000042c 	.word	0x2000042c

08006db4 <__swhatbuf_r>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	460e      	mov	r6, r1
 8006db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dbc:	2900      	cmp	r1, #0
 8006dbe:	b096      	sub	sp, #88	; 0x58
 8006dc0:	4614      	mov	r4, r2
 8006dc2:	461d      	mov	r5, r3
 8006dc4:	da07      	bge.n	8006dd6 <__swhatbuf_r+0x22>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	602b      	str	r3, [r5, #0]
 8006dca:	89b3      	ldrh	r3, [r6, #12]
 8006dcc:	061a      	lsls	r2, r3, #24
 8006dce:	d410      	bmi.n	8006df2 <__swhatbuf_r+0x3e>
 8006dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dd4:	e00e      	b.n	8006df4 <__swhatbuf_r+0x40>
 8006dd6:	466a      	mov	r2, sp
 8006dd8:	f000 f8d4 	bl	8006f84 <_fstat_r>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	dbf2      	blt.n	8006dc6 <__swhatbuf_r+0x12>
 8006de0:	9a01      	ldr	r2, [sp, #4]
 8006de2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006de6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006dea:	425a      	negs	r2, r3
 8006dec:	415a      	adcs	r2, r3
 8006dee:	602a      	str	r2, [r5, #0]
 8006df0:	e7ee      	b.n	8006dd0 <__swhatbuf_r+0x1c>
 8006df2:	2340      	movs	r3, #64	; 0x40
 8006df4:	2000      	movs	r0, #0
 8006df6:	6023      	str	r3, [r4, #0]
 8006df8:	b016      	add	sp, #88	; 0x58
 8006dfa:	bd70      	pop	{r4, r5, r6, pc}

08006dfc <__smakebuf_r>:
 8006dfc:	898b      	ldrh	r3, [r1, #12]
 8006dfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e00:	079d      	lsls	r5, r3, #30
 8006e02:	4606      	mov	r6, r0
 8006e04:	460c      	mov	r4, r1
 8006e06:	d507      	bpl.n	8006e18 <__smakebuf_r+0x1c>
 8006e08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	6123      	str	r3, [r4, #16]
 8006e10:	2301      	movs	r3, #1
 8006e12:	6163      	str	r3, [r4, #20]
 8006e14:	b002      	add	sp, #8
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
 8006e18:	ab01      	add	r3, sp, #4
 8006e1a:	466a      	mov	r2, sp
 8006e1c:	f7ff ffca 	bl	8006db4 <__swhatbuf_r>
 8006e20:	9900      	ldr	r1, [sp, #0]
 8006e22:	4605      	mov	r5, r0
 8006e24:	4630      	mov	r0, r6
 8006e26:	f7ff fa7b 	bl	8006320 <_malloc_r>
 8006e2a:	b948      	cbnz	r0, 8006e40 <__smakebuf_r+0x44>
 8006e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e30:	059a      	lsls	r2, r3, #22
 8006e32:	d4ef      	bmi.n	8006e14 <__smakebuf_r+0x18>
 8006e34:	f023 0303 	bic.w	r3, r3, #3
 8006e38:	f043 0302 	orr.w	r3, r3, #2
 8006e3c:	81a3      	strh	r3, [r4, #12]
 8006e3e:	e7e3      	b.n	8006e08 <__smakebuf_r+0xc>
 8006e40:	4b0d      	ldr	r3, [pc, #52]	; (8006e78 <__smakebuf_r+0x7c>)
 8006e42:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	6020      	str	r0, [r4, #0]
 8006e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4c:	81a3      	strh	r3, [r4, #12]
 8006e4e:	9b00      	ldr	r3, [sp, #0]
 8006e50:	6163      	str	r3, [r4, #20]
 8006e52:	9b01      	ldr	r3, [sp, #4]
 8006e54:	6120      	str	r0, [r4, #16]
 8006e56:	b15b      	cbz	r3, 8006e70 <__smakebuf_r+0x74>
 8006e58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f000 f8a3 	bl	8006fa8 <_isatty_r>
 8006e62:	b128      	cbz	r0, 8006e70 <__smakebuf_r+0x74>
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	f023 0303 	bic.w	r3, r3, #3
 8006e6a:	f043 0301 	orr.w	r3, r3, #1
 8006e6e:	81a3      	strh	r3, [r4, #12]
 8006e70:	89a0      	ldrh	r0, [r4, #12]
 8006e72:	4305      	orrs	r5, r0
 8006e74:	81a5      	strh	r5, [r4, #12]
 8006e76:	e7cd      	b.n	8006e14 <__smakebuf_r+0x18>
 8006e78:	08005985 	.word	0x08005985

08006e7c <__ascii_mbtowc>:
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	b901      	cbnz	r1, 8006e82 <__ascii_mbtowc+0x6>
 8006e80:	a901      	add	r1, sp, #4
 8006e82:	b142      	cbz	r2, 8006e96 <__ascii_mbtowc+0x1a>
 8006e84:	b14b      	cbz	r3, 8006e9a <__ascii_mbtowc+0x1e>
 8006e86:	7813      	ldrb	r3, [r2, #0]
 8006e88:	600b      	str	r3, [r1, #0]
 8006e8a:	7812      	ldrb	r2, [r2, #0]
 8006e8c:	1e10      	subs	r0, r2, #0
 8006e8e:	bf18      	it	ne
 8006e90:	2001      	movne	r0, #1
 8006e92:	b002      	add	sp, #8
 8006e94:	4770      	bx	lr
 8006e96:	4610      	mov	r0, r2
 8006e98:	e7fb      	b.n	8006e92 <__ascii_mbtowc+0x16>
 8006e9a:	f06f 0001 	mvn.w	r0, #1
 8006e9e:	e7f8      	b.n	8006e92 <__ascii_mbtowc+0x16>

08006ea0 <memmove>:
 8006ea0:	4288      	cmp	r0, r1
 8006ea2:	b510      	push	{r4, lr}
 8006ea4:	eb01 0402 	add.w	r4, r1, r2
 8006ea8:	d902      	bls.n	8006eb0 <memmove+0x10>
 8006eaa:	4284      	cmp	r4, r0
 8006eac:	4623      	mov	r3, r4
 8006eae:	d807      	bhi.n	8006ec0 <memmove+0x20>
 8006eb0:	1e43      	subs	r3, r0, #1
 8006eb2:	42a1      	cmp	r1, r4
 8006eb4:	d008      	beq.n	8006ec8 <memmove+0x28>
 8006eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ebe:	e7f8      	b.n	8006eb2 <memmove+0x12>
 8006ec0:	4402      	add	r2, r0
 8006ec2:	4601      	mov	r1, r0
 8006ec4:	428a      	cmp	r2, r1
 8006ec6:	d100      	bne.n	8006eca <memmove+0x2a>
 8006ec8:	bd10      	pop	{r4, pc}
 8006eca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ece:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ed2:	e7f7      	b.n	8006ec4 <memmove+0x24>

08006ed4 <__malloc_lock>:
 8006ed4:	4801      	ldr	r0, [pc, #4]	; (8006edc <__malloc_lock+0x8>)
 8006ed6:	f7fe be2c 	b.w	8005b32 <__retarget_lock_acquire_recursive>
 8006eda:	bf00      	nop
 8006edc:	20000424 	.word	0x20000424

08006ee0 <__malloc_unlock>:
 8006ee0:	4801      	ldr	r0, [pc, #4]	; (8006ee8 <__malloc_unlock+0x8>)
 8006ee2:	f7fe be27 	b.w	8005b34 <__retarget_lock_release_recursive>
 8006ee6:	bf00      	nop
 8006ee8:	20000424 	.word	0x20000424

08006eec <_realloc_r>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	4607      	mov	r7, r0
 8006ef0:	4614      	mov	r4, r2
 8006ef2:	460e      	mov	r6, r1
 8006ef4:	b921      	cbnz	r1, 8006f00 <_realloc_r+0x14>
 8006ef6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006efa:	4611      	mov	r1, r2
 8006efc:	f7ff ba10 	b.w	8006320 <_malloc_r>
 8006f00:	b922      	cbnz	r2, 8006f0c <_realloc_r+0x20>
 8006f02:	f7ff f9bd 	bl	8006280 <_free_r>
 8006f06:	4625      	mov	r5, r4
 8006f08:	4628      	mov	r0, r5
 8006f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f0c:	f000 f85c 	bl	8006fc8 <_malloc_usable_size_r>
 8006f10:	42a0      	cmp	r0, r4
 8006f12:	d20f      	bcs.n	8006f34 <_realloc_r+0x48>
 8006f14:	4621      	mov	r1, r4
 8006f16:	4638      	mov	r0, r7
 8006f18:	f7ff fa02 	bl	8006320 <_malloc_r>
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	d0f2      	beq.n	8006f08 <_realloc_r+0x1c>
 8006f22:	4631      	mov	r1, r6
 8006f24:	4622      	mov	r2, r4
 8006f26:	f7fe fe0f 	bl	8005b48 <memcpy>
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	f7ff f9a7 	bl	8006280 <_free_r>
 8006f32:	e7e9      	b.n	8006f08 <_realloc_r+0x1c>
 8006f34:	4635      	mov	r5, r6
 8006f36:	e7e7      	b.n	8006f08 <_realloc_r+0x1c>

08006f38 <_read_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	4d07      	ldr	r5, [pc, #28]	; (8006f58 <_read_r+0x20>)
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	4608      	mov	r0, r1
 8006f40:	4611      	mov	r1, r2
 8006f42:	2200      	movs	r2, #0
 8006f44:	602a      	str	r2, [r5, #0]
 8006f46:	461a      	mov	r2, r3
 8006f48:	f7fa fa88 	bl	800145c <_read>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d102      	bne.n	8006f56 <_read_r+0x1e>
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	b103      	cbz	r3, 8006f56 <_read_r+0x1e>
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
 8006f58:	2000042c 	.word	0x2000042c

08006f5c <__ascii_wctomb>:
 8006f5c:	b149      	cbz	r1, 8006f72 <__ascii_wctomb+0x16>
 8006f5e:	2aff      	cmp	r2, #255	; 0xff
 8006f60:	bf85      	ittet	hi
 8006f62:	238a      	movhi	r3, #138	; 0x8a
 8006f64:	6003      	strhi	r3, [r0, #0]
 8006f66:	700a      	strbls	r2, [r1, #0]
 8006f68:	f04f 30ff 	movhi.w	r0, #4294967295
 8006f6c:	bf98      	it	ls
 8006f6e:	2001      	movls	r0, #1
 8006f70:	4770      	bx	lr
 8006f72:	4608      	mov	r0, r1
 8006f74:	4770      	bx	lr

08006f76 <abort>:
 8006f76:	b508      	push	{r3, lr}
 8006f78:	2006      	movs	r0, #6
 8006f7a:	f000 f855 	bl	8007028 <raise>
 8006f7e:	2001      	movs	r0, #1
 8006f80:	f7fa fa62 	bl	8001448 <_exit>

08006f84 <_fstat_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4d07      	ldr	r5, [pc, #28]	; (8006fa4 <_fstat_r+0x20>)
 8006f88:	2300      	movs	r3, #0
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	4608      	mov	r0, r1
 8006f8e:	4611      	mov	r1, r2
 8006f90:	602b      	str	r3, [r5, #0]
 8006f92:	f7fa fa8c 	bl	80014ae <_fstat>
 8006f96:	1c43      	adds	r3, r0, #1
 8006f98:	d102      	bne.n	8006fa0 <_fstat_r+0x1c>
 8006f9a:	682b      	ldr	r3, [r5, #0]
 8006f9c:	b103      	cbz	r3, 8006fa0 <_fstat_r+0x1c>
 8006f9e:	6023      	str	r3, [r4, #0]
 8006fa0:	bd38      	pop	{r3, r4, r5, pc}
 8006fa2:	bf00      	nop
 8006fa4:	2000042c 	.word	0x2000042c

08006fa8 <_isatty_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4d06      	ldr	r5, [pc, #24]	; (8006fc4 <_isatty_r+0x1c>)
 8006fac:	2300      	movs	r3, #0
 8006fae:	4604      	mov	r4, r0
 8006fb0:	4608      	mov	r0, r1
 8006fb2:	602b      	str	r3, [r5, #0]
 8006fb4:	f7fa fa8b 	bl	80014ce <_isatty>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d102      	bne.n	8006fc2 <_isatty_r+0x1a>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	b103      	cbz	r3, 8006fc2 <_isatty_r+0x1a>
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	2000042c 	.word	0x2000042c

08006fc8 <_malloc_usable_size_r>:
 8006fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fcc:	1f18      	subs	r0, r3, #4
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	bfbc      	itt	lt
 8006fd2:	580b      	ldrlt	r3, [r1, r0]
 8006fd4:	18c0      	addlt	r0, r0, r3
 8006fd6:	4770      	bx	lr

08006fd8 <_raise_r>:
 8006fd8:	291f      	cmp	r1, #31
 8006fda:	b538      	push	{r3, r4, r5, lr}
 8006fdc:	4604      	mov	r4, r0
 8006fde:	460d      	mov	r5, r1
 8006fe0:	d904      	bls.n	8006fec <_raise_r+0x14>
 8006fe2:	2316      	movs	r3, #22
 8006fe4:	6003      	str	r3, [r0, #0]
 8006fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006fee:	b112      	cbz	r2, 8006ff6 <_raise_r+0x1e>
 8006ff0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ff4:	b94b      	cbnz	r3, 800700a <_raise_r+0x32>
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f000 f830 	bl	800705c <_getpid_r>
 8006ffc:	462a      	mov	r2, r5
 8006ffe:	4601      	mov	r1, r0
 8007000:	4620      	mov	r0, r4
 8007002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007006:	f000 b817 	b.w	8007038 <_kill_r>
 800700a:	2b01      	cmp	r3, #1
 800700c:	d00a      	beq.n	8007024 <_raise_r+0x4c>
 800700e:	1c59      	adds	r1, r3, #1
 8007010:	d103      	bne.n	800701a <_raise_r+0x42>
 8007012:	2316      	movs	r3, #22
 8007014:	6003      	str	r3, [r0, #0]
 8007016:	2001      	movs	r0, #1
 8007018:	e7e7      	b.n	8006fea <_raise_r+0x12>
 800701a:	2400      	movs	r4, #0
 800701c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007020:	4628      	mov	r0, r5
 8007022:	4798      	blx	r3
 8007024:	2000      	movs	r0, #0
 8007026:	e7e0      	b.n	8006fea <_raise_r+0x12>

08007028 <raise>:
 8007028:	4b02      	ldr	r3, [pc, #8]	; (8007034 <raise+0xc>)
 800702a:	4601      	mov	r1, r0
 800702c:	6818      	ldr	r0, [r3, #0]
 800702e:	f7ff bfd3 	b.w	8006fd8 <_raise_r>
 8007032:	bf00      	nop
 8007034:	2000000c 	.word	0x2000000c

08007038 <_kill_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4d07      	ldr	r5, [pc, #28]	; (8007058 <_kill_r+0x20>)
 800703c:	2300      	movs	r3, #0
 800703e:	4604      	mov	r4, r0
 8007040:	4608      	mov	r0, r1
 8007042:	4611      	mov	r1, r2
 8007044:	602b      	str	r3, [r5, #0]
 8007046:	f7fa f9ef 	bl	8001428 <_kill>
 800704a:	1c43      	adds	r3, r0, #1
 800704c:	d102      	bne.n	8007054 <_kill_r+0x1c>
 800704e:	682b      	ldr	r3, [r5, #0]
 8007050:	b103      	cbz	r3, 8007054 <_kill_r+0x1c>
 8007052:	6023      	str	r3, [r4, #0]
 8007054:	bd38      	pop	{r3, r4, r5, pc}
 8007056:	bf00      	nop
 8007058:	2000042c 	.word	0x2000042c

0800705c <_getpid_r>:
 800705c:	f7fa b9dc 	b.w	8001418 <_getpid>

08007060 <_init>:
 8007060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007062:	bf00      	nop
 8007064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007066:	bc08      	pop	{r3}
 8007068:	469e      	mov	lr, r3
 800706a:	4770      	bx	lr

0800706c <_fini>:
 800706c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706e:	bf00      	nop
 8007070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007072:	bc08      	pop	{r3}
 8007074:	469e      	mov	lr, r3
 8007076:	4770      	bx	lr
