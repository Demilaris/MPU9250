
Example_lib_imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ef0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  080080f0  080080f0  000180f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085d0  080085d0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080085d0  080085d0  000185d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085d8  080085d8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085d8  080085d8  000185d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085dc  080085dc  000185dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080085e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200001e0  080087c0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  080087c0  00020434  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a57  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267d  00000000  00000000  00030c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  000332e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  00033ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e68  00000000  00000000  00034970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f561  00000000  00000000  0005d7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4608  00000000  00000000  0006cd39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00161341  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000412c  00000000  00000000  00161394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	080080d8 	.word	0x080080d8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	080080d8 	.word	0x080080d8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MPU9250_Init>:

static inline float deg2rad(float x);

MPU9250_Result_t MPU9250_Init(MPU9250_t *MPU9250, MPU9250_Device_t dev,
		MPU9250_Accel_Scale_t accScale, MPU9250_Gyro_Scale_t gyroScale,
		MPU9250_Mag_Scale_t magScale) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	4608      	mov	r0, r1
 80005f2:	4611      	mov	r1, r2
 80005f4:	461a      	mov	r2, r3
 80005f6:	4603      	mov	r3, r0
 80005f8:	70fb      	strb	r3, [r7, #3]
 80005fa:	460b      	mov	r3, r1
 80005fc:	70bb      	strb	r3, [r7, #2]
 80005fe:	4613      	mov	r3, r2
 8000600:	707b      	strb	r3, [r7, #1]
	uint8_t data;
	MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t) dev;
 8000602:	78fb      	ldrb	r3, [r7, #3]
 8000604:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8000608:	b2da      	uxtb	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	MPU9250->I2C_Addr_Mag = MPU9250_I2C_ADDR_MAG;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2218      	movs	r2, #24
 8000614:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	/* Gyro & Acc Device Connection Check */
	if (isMPU9250Ready(&hi2c1, MPU9250->I2C_Addr) != MPU9250_RESULT_OK)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800061e:	4619      	mov	r1, r3
 8000620:	48c4      	ldr	r0, [pc, #784]	; (8000934 <MPU9250_Init+0x34c>)
 8000622:	f000 fbca 	bl	8000dba <isMPU9250Ready>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MPU9250_Init+0x48>
		return MPU9250_RESULT_NC;
 800062c:	2302      	movs	r3, #2
 800062e:	e199      	b.n	8000964 <MPU9250_Init+0x37c>

	/* Who Am I Check */
	readByte(&hi2c1, MPU9250->I2C_Addr, WHO_AM_I, &data);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000636:	f107 030f 	add.w	r3, r7, #15
 800063a:	2275      	movs	r2, #117	; 0x75
 800063c:	48bd      	ldr	r0, [pc, #756]	; (8000934 <MPU9250_Init+0x34c>)
 800063e:	f000 fb56 	bl	8000cee <readByte>
	if (data != 0x71)
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b71      	cmp	r3, #113	; 0x71
 8000646:	d001      	beq.n	800064c <MPU9250_Init+0x64>
		return MPU9250_RESULT_NC;
 8000648:	2302      	movs	r3, #2
 800064a:	e18b      	b.n	8000964 <MPU9250_Init+0x37c>

	/* Device Wake Up */
	writeByte(&hi2c1, MPU9250->I2C_Addr, PWR_MGMT_1, 0x00);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000652:	2300      	movs	r3, #0
 8000654:	226b      	movs	r2, #107	; 0x6b
 8000656:	48b7      	ldr	r0, [pc, #732]	; (8000934 <MPU9250_Init+0x34c>)
 8000658:	f000 fb20 	bl	8000c9c <writeByte>
	HAL_Delay(100);
 800065c:	2064      	movs	r0, #100	; 0x64
 800065e:	f001 fcbb 	bl	8001fd8 <HAL_Delay>

	/* Auto-select best (stable) available clock source */
	writeByte(&hi2c1, MPU9250->I2C_Addr, PWR_MGMT_1, 0x01);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000668:	2301      	movs	r3, #1
 800066a:	226b      	movs	r2, #107	; 0x6b
 800066c:	48b1      	ldr	r0, [pc, #708]	; (8000934 <MPU9250_Init+0x34c>)
 800066e:	f000 fb15 	bl	8000c9c <writeByte>
	HAL_Delay(200);
 8000672:	20c8      	movs	r0, #200	; 0xc8
 8000674:	f001 fcb0 	bl	8001fd8 <HAL_Delay>

	writeByte(&hi2c1, MPU9250->I2C_Addr, CONFIG, 0x03);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800067e:	2303      	movs	r3, #3
 8000680:	221a      	movs	r2, #26
 8000682:	48ac      	ldr	r0, [pc, #688]	; (8000934 <MPU9250_Init+0x34c>)
 8000684:	f000 fb0a 	bl	8000c9c <writeByte>

	writeByte(&hi2c1, MPU9250->I2C_Addr, SMPLRT_DIV, 0x04);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800068e:	2304      	movs	r3, #4
 8000690:	2219      	movs	r2, #25
 8000692:	48a8      	ldr	r0, [pc, #672]	; (8000934 <MPU9250_Init+0x34c>)
 8000694:	f000 fb02 	bl	8000c9c <writeByte>

	/* Gyro Configuration */
	readByte(&hi2c1, MPU9250->I2C_Addr, GYRO_CONFIG, &data);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800069e:	f107 030f 	add.w	r3, r7, #15
 80006a2:	221b      	movs	r2, #27
 80006a4:	48a3      	ldr	r0, [pc, #652]	; (8000934 <MPU9250_Init+0x34c>)
 80006a6:	f000 fb22 	bl	8000cee <readByte>
	data &= ~0x02; /* [1:0] - Clear Fchoice_b[1:0] bits */
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	f023 0302 	bic.w	r3, r3, #2
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	73fb      	strb	r3, [r7, #15]
	data &= ~0x18; /* [4:3] - Clear GYRO_FS_SEL[1:0] bits */
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	f023 0318 	bic.w	r3, r3, #24
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	73fb      	strb	r3, [r7, #15]
	data |= gyroScale;
 80006be:	7bfa      	ldrb	r2, [r7, #15]
 80006c0:	787b      	ldrb	r3, [r7, #1]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	73fb      	strb	r3, [r7, #15]
	writeByte(&hi2c1, MPU9250->I2C_Addr, GYRO_CONFIG, data);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	221b      	movs	r2, #27
 80006d2:	4898      	ldr	r0, [pc, #608]	; (8000934 <MPU9250_Init+0x34c>)
 80006d4:	f000 fae2 	bl	8000c9c <writeByte>

	/* Accel Configuraiton */

	readByte(&hi2c1, MPU9250->I2C_Addr, ACCEL_CONFIG, &data);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 80006de:	f107 030f 	add.w	r3, r7, #15
 80006e2:	221c      	movs	r2, #28
 80006e4:	4893      	ldr	r0, [pc, #588]	; (8000934 <MPU9250_Init+0x34c>)
 80006e6:	f000 fb02 	bl	8000cee <readByte>
	data &= ~0x18; /* [4:3] - Clear ACCEL_FS_SEL[1:0] bits */
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	f023 0318 	bic.w	r3, r3, #24
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	73fb      	strb	r3, [r7, #15]
	data |= accScale;
 80006f4:	7bfa      	ldrb	r2, [r7, #15]
 80006f6:	78bb      	ldrb	r3, [r7, #2]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	73fb      	strb	r3, [r7, #15]
	writeByte(&hi2c1, MPU9250->I2C_Addr, ACCEL_CONFIG, data);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	221c      	movs	r2, #28
 8000708:	488a      	ldr	r0, [pc, #552]	; (8000934 <MPU9250_Init+0x34c>)
 800070a:	f000 fac7 	bl	8000c9c <writeByte>

	/* Accel_2 Configuration */

	readByte(&hi2c1, MPU9250->I2C_Addr, ACCEL_CONFIG_2, &data);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000714:	f107 030f 	add.w	r3, r7, #15
 8000718:	221d      	movs	r2, #29
 800071a:	4886      	ldr	r0, [pc, #536]	; (8000934 <MPU9250_Init+0x34c>)
 800071c:	f000 fae7 	bl	8000cee <readByte>
	data &= ~0x0F; /* Clear ACCEL_CONFIG_2[3:0] Bits */
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	f023 030f 	bic.w	r3, r3, #15
 8000726:	b2db      	uxtb	r3, r3
 8000728:	73fb      	strb	r3, [r7, #15]
	data |= 0x03; /* A_DLPFCFG[2:0] bits are set to 011*/
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	f043 0303 	orr.w	r3, r3, #3
 8000730:	b2db      	uxtb	r3, r3
 8000732:	73fb      	strb	r3, [r7, #15]
	writeByte(&hi2c1, MPU9250->I2C_Addr, ACCEL_CONFIG_2, data);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	221d      	movs	r2, #29
 800073e:	487d      	ldr	r0, [pc, #500]	; (8000934 <MPU9250_Init+0x34c>)
 8000740:	f000 faac 	bl	8000c9c <writeByte>

	readByte(&hi2c1, MPU9250->I2C_Addr, LP_ACCEL_ODR, &data);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800074a:	f107 030f 	add.w	r3, r7, #15
 800074e:	221e      	movs	r2, #30
 8000750:	4878      	ldr	r0, [pc, #480]	; (8000934 <MPU9250_Init+0x34c>)
 8000752:	f000 facc 	bl	8000cee <readByte>

	printf("LP_ACCEL_ODR = %x\r\n", data);
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	4619      	mov	r1, r3
 800075a:	4877      	ldr	r0, [pc, #476]	; (8000938 <MPU9250_Init+0x350>)
 800075c:	f004 ff16 	bl	800558c <iprintf>
//	status = HAL_UART_Transmit (&huart4, pTxData, strlen((char *)pTxData), 200);

	writeByte(&hi2c1, MPU9250->I2C_Addr, LP_ACCEL_ODR, 0x02);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000766:	2302      	movs	r3, #2
 8000768:	221e      	movs	r2, #30
 800076a:	4872      	ldr	r0, [pc, #456]	; (8000934 <MPU9250_Init+0x34c>)
 800076c:	f000 fa96 	bl	8000c9c <writeByte>

	writeByte(&hi2c1, MPU9250->I2C_Addr, INT_PIN_CFG, 0x22);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	2237      	movs	r2, #55	; 0x37
 800077a:	486e      	ldr	r0, [pc, #440]	; (8000934 <MPU9250_Init+0x34c>)
 800077c:	f000 fa8e 	bl	8000c9c <writeByte>
	writeByte(&hi2c1, MPU9250->I2C_Addr, INT_ENABLE, 0x01);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000786:	2301      	movs	r3, #1
 8000788:	2238      	movs	r2, #56	; 0x38
 800078a:	486a      	ldr	r0, [pc, #424]	; (8000934 <MPU9250_Init+0x34c>)
 800078c:	f000 fa86 	bl	8000c9c <writeByte>

	/* Magnetometer Device Connection Check */
	if (isMPU9250Ready(&hi2c1, MPU9250->I2C_Addr_Mag) != MPU9250_RESULT_OK)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8000796:	4619      	mov	r1, r3
 8000798:	4866      	ldr	r0, [pc, #408]	; (8000934 <MPU9250_Init+0x34c>)
 800079a:	f000 fb0e 	bl	8000dba <isMPU9250Ready>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MPU9250_Init+0x1c0>
		return MPU9250_RESULT_NC;
 80007a4:	2302      	movs	r3, #2
 80007a6:	e0dd      	b.n	8000964 <MPU9250_Init+0x37c>

	/* Magnetometer Power Down */
	writeByte(&hi2c1, MPU9250->I2C_Addr_Mag, CNTL, 0x00);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 80007ae:	2300      	movs	r3, #0
 80007b0:	220a      	movs	r2, #10
 80007b2:	4860      	ldr	r0, [pc, #384]	; (8000934 <MPU9250_Init+0x34c>)
 80007b4:	f000 fa72 	bl	8000c9c <writeByte>
	HAL_Delay(10);
 80007b8:	200a      	movs	r0, #10
 80007ba:	f001 fc0d 	bl	8001fd8 <HAL_Delay>
	/* Magnetometer Fuse ROM Access Mode ON */
	writeByte(&hi2c1, MPU9250->I2C_Addr_Mag, CNTL, 0x0F);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 80007c4:	230f      	movs	r3, #15
 80007c6:	220a      	movs	r2, #10
 80007c8:	485a      	ldr	r0, [pc, #360]	; (8000934 <MPU9250_Init+0x34c>)
 80007ca:	f000 fa67 	bl	8000c9c <writeByte>
	HAL_Delay(10);
 80007ce:	200a      	movs	r0, #10
 80007d0:	f001 fc02 	bl	8001fd8 <HAL_Delay>
	/* Magnetometer Power Down */
	writeByte(&hi2c1, MPU9250->I2C_Addr_Mag, CNTL, 0x00);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 80007da:	2300      	movs	r3, #0
 80007dc:	220a      	movs	r2, #10
 80007de:	4855      	ldr	r0, [pc, #340]	; (8000934 <MPU9250_Init+0x34c>)
 80007e0:	f000 fa5c 	bl	8000c9c <writeByte>
	HAL_Delay(10);
 80007e4:	200a      	movs	r0, #10
 80007e6:	f001 fbf7 	bl	8001fd8 <HAL_Delay>

	writeByte(&hi2c1, MPU9250->I2C_Addr_Mag, CNTL, (1 << 4) | 2);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 80007f0:	2312      	movs	r3, #18
 80007f2:	220a      	movs	r2, #10
 80007f4:	484f      	ldr	r0, [pc, #316]	; (8000934 <MPU9250_Init+0x34c>)
 80007f6:	f000 fa51 	bl	8000c9c <writeByte>
	HAL_Delay(10);
 80007fa:	200a      	movs	r0, #10
 80007fc:	f001 fbec 	bl	8001fd8 <HAL_Delay>
	 * Gyroscope Full Scale:		±2000 degree/s
	 * Magnetometer Full Scale:		±4912 uT
	 */

	/* Accelerometer Resolution Multiplicator: LSB / g 			*/
	switch (accScale) {
 8000800:	78bb      	ldrb	r3, [r7, #2]
 8000802:	2b18      	cmp	r3, #24
 8000804:	d848      	bhi.n	8000898 <MPU9250_Init+0x2b0>
 8000806:	a201      	add	r2, pc, #4	; (adr r2, 800080c <MPU9250_Init+0x224>)
 8000808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080c:	08000871 	.word	0x08000871
 8000810:	08000899 	.word	0x08000899
 8000814:	08000899 	.word	0x08000899
 8000818:	08000899 	.word	0x08000899
 800081c:	08000899 	.word	0x08000899
 8000820:	08000899 	.word	0x08000899
 8000824:	08000899 	.word	0x08000899
 8000828:	08000899 	.word	0x08000899
 800082c:	0800087b 	.word	0x0800087b
 8000830:	08000899 	.word	0x08000899
 8000834:	08000899 	.word	0x08000899
 8000838:	08000899 	.word	0x08000899
 800083c:	08000899 	.word	0x08000899
 8000840:	08000899 	.word	0x08000899
 8000844:	08000899 	.word	0x08000899
 8000848:	08000899 	.word	0x08000899
 800084c:	08000885 	.word	0x08000885
 8000850:	08000899 	.word	0x08000899
 8000854:	08000899 	.word	0x08000899
 8000858:	08000899 	.word	0x08000899
 800085c:	08000899 	.word	0x08000899
 8000860:	08000899 	.word	0x08000899
 8000864:	08000899 	.word	0x08000899
 8000868:	08000899 	.word	0x08000899
 800086c:	0800088f 	.word	0x0800088f
	case ACCEL_SCALE_2G:
		MPU9250->accMult = 2.0f / 32768.0f;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8000876:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8000878:	e00e      	b.n	8000898 <MPU9250_Init+0x2b0>
	case ACCEL_SCALE_4G:
		MPU9250->accMult = 4.0f / 32768.0f;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8000880:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8000882:	e009      	b.n	8000898 <MPU9250_Init+0x2b0>
	case ACCEL_SCALE_8G:
		MPU9250->accMult = 8.0f / 32768.0f;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800088a:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800088c:	e004      	b.n	8000898 <MPU9250_Init+0x2b0>
	case ACCEL_SCALE_16G:
		MPU9250->accMult = 16.0f / 32768.0f;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8000894:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8000896:	bf00      	nop
	}

	/* Gyroscope Resolution Multiplicator: LSB / (degree/s) 	*/
	switch (gyroScale) {
 8000898:	787b      	ldrb	r3, [r7, #1]
 800089a:	2b18      	cmp	r3, #24
 800089c:	d844      	bhi.n	8000928 <MPU9250_Init+0x340>
 800089e:	a201      	add	r2, pc, #4	; (adr r2, 80008a4 <MPU9250_Init+0x2bc>)
 80008a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a4:	08000909 	.word	0x08000909
 80008a8:	08000929 	.word	0x08000929
 80008ac:	08000929 	.word	0x08000929
 80008b0:	08000929 	.word	0x08000929
 80008b4:	08000929 	.word	0x08000929
 80008b8:	08000929 	.word	0x08000929
 80008bc:	08000929 	.word	0x08000929
 80008c0:	08000929 	.word	0x08000929
 80008c4:	08000911 	.word	0x08000911
 80008c8:	08000929 	.word	0x08000929
 80008cc:	08000929 	.word	0x08000929
 80008d0:	08000929 	.word	0x08000929
 80008d4:	08000929 	.word	0x08000929
 80008d8:	08000929 	.word	0x08000929
 80008dc:	08000929 	.word	0x08000929
 80008e0:	08000929 	.word	0x08000929
 80008e4:	08000919 	.word	0x08000919
 80008e8:	08000929 	.word	0x08000929
 80008ec:	08000929 	.word	0x08000929
 80008f0:	08000929 	.word	0x08000929
 80008f4:	08000929 	.word	0x08000929
 80008f8:	08000929 	.word	0x08000929
 80008fc:	08000929 	.word	0x08000929
 8000900:	08000929 	.word	0x08000929
 8000904:	08000921 	.word	0x08000921
	case GYRO_SCALE_250dps:
		MPU9250->gyroMult = 250.0f / 32768.0f;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a0c      	ldr	r2, [pc, #48]	; (800093c <MPU9250_Init+0x354>)
 800090c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800090e:	e00b      	b.n	8000928 <MPU9250_Init+0x340>
	case GYRO_SCALE_500dps:
		MPU9250->gyroMult = 500.0f / 32768.0f;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a0b      	ldr	r2, [pc, #44]	; (8000940 <MPU9250_Init+0x358>)
 8000914:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000916:	e007      	b.n	8000928 <MPU9250_Init+0x340>
	case GYRO_SCALE_1000dps:
		MPU9250->gyroMult = 1000.0f / 32768.0f;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <MPU9250_Init+0x35c>)
 800091c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800091e:	e003      	b.n	8000928 <MPU9250_Init+0x340>
	case GYRO_SCALE_2000dps:
		MPU9250->gyroMult = 2000.0f / 32768.0f;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a09      	ldr	r2, [pc, #36]	; (8000948 <MPU9250_Init+0x360>)
 8000924:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000926:	bf00      	nop
	}

	/* Magnetometer Resolution Multiplicator: LSB / 0.15uT 		*/
	switch (magScale) {
 8000928:	7e3b      	ldrb	r3, [r7, #24]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d00e      	beq.n	800094c <MPU9250_Init+0x364>
 800092e:	2b01      	cmp	r3, #1
 8000930:	d010      	beq.n	8000954 <MPU9250_Init+0x36c>
 8000932:	e013      	b.n	800095c <MPU9250_Init+0x374>
 8000934:	2000025c 	.word	0x2000025c
 8000938:	080080f0 	.word	0x080080f0
 800093c:	3bfa0000 	.word	0x3bfa0000
 8000940:	3c7a0000 	.word	0x3c7a0000
 8000944:	3cfa0000 	.word	0x3cfa0000
 8000948:	3d7a0000 	.word	0x3d7a0000
	case MAG_SCALE_14bit:
		MPU9250->magMult = 10.0 * 4219.0 / 8190.0;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a07      	ldr	r2, [pc, #28]	; (800096c <MPU9250_Init+0x384>)
 8000950:	645a      	str	r2, [r3, #68]	; 0x44
		break;
 8000952:	e003      	b.n	800095c <MPU9250_Init+0x374>
	case MAG_SCALE_16bit:
		MPU9250->magMult = 10.0 * 4219.0 / 32760.0;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a06      	ldr	r2, [pc, #24]	; (8000970 <MPU9250_Init+0x388>)
 8000958:	645a      	str	r2, [r3, #68]	; 0x44
		break;
 800095a:	bf00      	nop
	}

	/* Temperature Resolution Multiplicator: LSB / degreeC		*/
	MPU9250->tempMult = 333.87f;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <MPU9250_Init+0x38c>)
 8000960:	649a      	str	r2, [r3, #72]	; 0x48

	return MPU9250_RESULT_OK;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40a4d84e 	.word	0x40a4d84e
 8000970:	3fa4d84e 	.word	0x3fa4d84e
 8000974:	43a6ef5c 	.word	0x43a6ef5c

08000978 <MPU9250_ReadAcc>:

	         	return MPU9250_RESULT_OK;

}

MPU9250_Result_t MPU9250_ReadAcc(MPU9250_t *MPU9250) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af02      	add	r7, sp, #8
 800097e:	6078      	str	r0, [r7, #4]
	uint8_t data[6];

	readMultiBytes(&hi2c1, MPU9250->I2C_Addr, ACCEL_XOUT_H, data, 6);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	2206      	movs	r2, #6
 800098c:	9200      	str	r2, [sp, #0]
 800098e:	223b      	movs	r2, #59	; 0x3b
 8000990:	4827      	ldr	r0, [pc, #156]	; (8000a30 <MPU9250_ReadAcc+0xb8>)
 8000992:	f000 f9df 	bl	8000d54 <readMultiBytes>

	MPU9250->acc_raw[0] = (int16_t) (((int16_t) data[0] << 8) | data[1]); // Turn the MSB and LSB into a signed 16-bit value
 8000996:	7a3b      	ldrb	r3, [r7, #8]
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	b21a      	sxth	r2, r3
 800099c:	7a7b      	ldrb	r3, [r7, #9]
 800099e:	b21b      	sxth	r3, r3
 80009a0:	4313      	orrs	r3, r2
 80009a2:	b21a      	sxth	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	851a      	strh	r2, [r3, #40]	; 0x28
	MPU9250->acc_raw[1] = (int16_t) (((int16_t) data[2] << 8) | data[3]);
 80009a8:	7abb      	ldrb	r3, [r7, #10]
 80009aa:	021b      	lsls	r3, r3, #8
 80009ac:	b21a      	sxth	r2, r3
 80009ae:	7afb      	ldrb	r3, [r7, #11]
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	4313      	orrs	r3, r2
 80009b4:	b21a      	sxth	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	855a      	strh	r2, [r3, #42]	; 0x2a
	MPU9250->acc_raw[2] = (int16_t) (((int16_t) data[4] << 8) | data[5]);
 80009ba:	7b3b      	ldrb	r3, [r7, #12]
 80009bc:	021b      	lsls	r3, r3, #8
 80009be:	b21a      	sxth	r2, r3
 80009c0:	7b7b      	ldrb	r3, [r7, #13]
 80009c2:	b21b      	sxth	r3, r3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	b21a      	sxth	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	859a      	strh	r2, [r3, #44]	; 0x2c
//
//	MPU9250->acc_raw[0] = (int16_t)((int16_t)data[0] << 8) | data[1];
//	MPU9250->acc_raw[1] = ((int16_t)data[2] << 8) | data[3];
//	MPU9250->acc_raw[2] = ((int16_t)data[4] << 8) | data[5];

	MPU9250->acc[0] = (float) MPU9250->acc_raw[0] * MPU9250->accMult;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80009d2:	ee07 3a90 	vmov	s15, r3
 80009d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80009e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	edc3 7a00 	vstr	s15, [r3]
	MPU9250->acc[1] = (float) MPU9250->acc_raw[1] * MPU9250->accMult;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80009f0:	ee07 3a90 	vmov	s15, r3
 80009f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80009fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	edc3 7a01 	vstr	s15, [r3, #4]
	MPU9250->acc[2] = (float) MPU9250->acc_raw[2] * MPU9250->accMult;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8000a0e:	ee07 3a90 	vmov	s15, r3
 8000a12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8000a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	edc3 7a02 	vstr	s15, [r3, #8]

	return MPU9250_RESULT_OK;
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	2000025c 	.word	0x2000025c

08000a34 <MPU9250_ReadGyro>:

MPU9250_Result_t MPU9250_ReadGyro(MPU9250_t *MPU9250) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	6078      	str	r0, [r7, #4]
	uint8_t data[6];

	readMultiBytes(&hi2c1, MPU9250->I2C_Addr, GYRO_XOUT_H, data, 6);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	2206      	movs	r2, #6
 8000a48:	9200      	str	r2, [sp, #0]
 8000a4a:	2243      	movs	r2, #67	; 0x43
 8000a4c:	4827      	ldr	r0, [pc, #156]	; (8000aec <MPU9250_ReadGyro+0xb8>)
 8000a4e:	f000 f981 	bl	8000d54 <readMultiBytes>

	MPU9250->gyro_raw[0] = ((int16_t) data[0] << 8) | data[1];
 8000a52:	7a3b      	ldrb	r3, [r7, #8]
 8000a54:	021b      	lsls	r3, r3, #8
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	7a7b      	ldrb	r3, [r7, #9]
 8000a5a:	b21b      	sxth	r3, r3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	b21a      	sxth	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	85da      	strh	r2, [r3, #46]	; 0x2e
	MPU9250->gyro_raw[1] = ((int16_t) data[2] << 8) | data[3];
 8000a64:	7abb      	ldrb	r3, [r7, #10]
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	b21a      	sxth	r2, r3
 8000a6a:	7afb      	ldrb	r3, [r7, #11]
 8000a6c:	b21b      	sxth	r3, r3
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	b21a      	sxth	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	861a      	strh	r2, [r3, #48]	; 0x30
	MPU9250->gyro_raw[2] = ((int16_t) data[4] << 8) | data[5];
 8000a76:	7b3b      	ldrb	r3, [r7, #12]
 8000a78:	021b      	lsls	r3, r3, #8
 8000a7a:	b21a      	sxth	r2, r3
 8000a7c:	7b7b      	ldrb	r3, [r7, #13]
 8000a7e:	b21b      	sxth	r3, r3
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b21a      	sxth	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	865a      	strh	r2, [r3, #50]	; 0x32

	MPU9250->gyro[0] = (float) MPU9250->gyro_raw[0] * MPU9250->gyroMult;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000a8e:	ee07 3a90 	vmov	s15, r3
 8000a92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	edc3 7a03 	vstr	s15, [r3, #12]
	MPU9250->gyro[1] = (float) MPU9250->gyro_raw[1] * MPU9250->gyroMult;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8000aac:	ee07 3a90 	vmov	s15, r3
 8000ab0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	edc3 7a04 	vstr	s15, [r3, #16]
	MPU9250->gyro[2] = (float) MPU9250->gyro_raw[2] * MPU9250->gyroMult;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8000aca:	ee07 3a90 	vmov	s15, r3
 8000ace:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	edc3 7a05 	vstr	s15, [r3, #20]

	return MPU9250_RESULT_OK;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2000025c 	.word	0x2000025c

08000af0 <MPU9250_ReadMag>:

MPU9250_Result_t MPU9250_ReadMag(MPU9250_t *MPU9250) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	6078      	str	r0, [r7, #4]
	uint8_t data[7];
	uint8_t check;

	/* Check Mag Data Ready Status */
	readByte(&hi2c1, MPU9250->I2C_Addr_Mag, ST1, &check);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 8000afe:	f107 030f 	add.w	r3, r7, #15
 8000b02:	2202      	movs	r2, #2
 8000b04:	483d      	ldr	r0, [pc, #244]	; (8000bfc <MPU9250_ReadMag+0x10c>)
 8000b06:	f000 f8f2 	bl	8000cee <readByte>

	if (check & 0x01) {
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d06d      	beq.n	8000bf0 <MPU9250_ReadMag+0x100>
		readMultiBytes(&hi2c1, MPU9250->I2C_Addr_Mag, HXL, data, 7);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	2207      	movs	r2, #7
 8000b20:	9200      	str	r2, [sp, #0]
 8000b22:	2203      	movs	r2, #3
 8000b24:	4835      	ldr	r0, [pc, #212]	; (8000bfc <MPU9250_ReadMag+0x10c>)
 8000b26:	f000 f915 	bl	8000d54 <readMultiBytes>
		/* Check (ST2 Register) If Magnetic Sensor Overflow Occured */
		if (!(data[6] & 0x08)) {
 8000b2a:	7dbb      	ldrb	r3, [r7, #22]
 8000b2c:	f003 0308 	and.w	r3, r3, #8
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d15b      	bne.n	8000bec <MPU9250_ReadMag+0xfc>
			MPU9250->mag_raw[0] = ((int16_t) data[1] << 8) | data[0];
 8000b34:	7c7b      	ldrb	r3, [r7, #17]
 8000b36:	021b      	lsls	r3, r3, #8
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	7c3b      	ldrb	r3, [r7, #16]
 8000b3c:	b21b      	sxth	r3, r3
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	b21a      	sxth	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	869a      	strh	r2, [r3, #52]	; 0x34
			MPU9250->mag_raw[1] = ((int16_t) data[3] << 8) | data[2];
 8000b46:	7cfb      	ldrb	r3, [r7, #19]
 8000b48:	021b      	lsls	r3, r3, #8
 8000b4a:	b21a      	sxth	r2, r3
 8000b4c:	7cbb      	ldrb	r3, [r7, #18]
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	4313      	orrs	r3, r2
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	86da      	strh	r2, [r3, #54]	; 0x36
			MPU9250->mag_raw[2] = ((int16_t) data[5] << 8) | data[4];
 8000b58:	7d7b      	ldrb	r3, [r7, #21]
 8000b5a:	021b      	lsls	r3, r3, #8
 8000b5c:	b21a      	sxth	r2, r3
 8000b5e:	7d3b      	ldrb	r3, [r7, #20]
 8000b60:	b21b      	sxth	r3, r3
 8000b62:	4313      	orrs	r3, r2
 8000b64:	b21a      	sxth	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	871a      	strh	r2, [r3, #56]	; 0x38

			MPU9250->mag[0] = deg2rad(
					(float) MPU9250->mag_raw[0] * MPU9250->magMult);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8000b70:	ee07 3a90 	vmov	s15, r3
 8000b74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
			MPU9250->mag[0] = deg2rad(
 8000b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b82:	eeb0 0a67 	vmov.f32	s0, s15
 8000b86:	f000 f92f 	bl	8000de8 <deg2rad>
 8000b8a:	eef0 7a40 	vmov.f32	s15, s0
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	edc3 7a06 	vstr	s15, [r3, #24]
			MPU9250->mag[1] = deg2rad(
					(float) MPU9250->mag_raw[1] * MPU9250->magMult);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8000b9a:	ee07 3a90 	vmov	s15, r3
 8000b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
			MPU9250->mag[1] = deg2rad(
 8000ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bac:	eeb0 0a67 	vmov.f32	s0, s15
 8000bb0:	f000 f91a 	bl	8000de8 <deg2rad>
 8000bb4:	eef0 7a40 	vmov.f32	s15, s0
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	edc3 7a07 	vstr	s15, [r3, #28]
			MPU9250->mag[2] = deg2rad(
					(float) MPU9250->mag_raw[2] * MPU9250->magMult);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000bc4:	ee07 3a90 	vmov	s15, r3
 8000bc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
			MPU9250->mag[2] = deg2rad(
 8000bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000bda:	f000 f905 	bl	8000de8 <deg2rad>
 8000bde:	eef0 7a40 	vmov.f32	s15, s0
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	edc3 7a08 	vstr	s15, [r3, #32]

			return MPU9250_RESULT_OK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	e002      	b.n	8000bf2 <MPU9250_ReadMag+0x102>
		}
		return MPU9250_RESULT_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	e000      	b.n	8000bf2 <MPU9250_ReadMag+0x102>
	}
	return MPU9250_RESULT_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000025c 	.word	0x2000025c

08000c00 <MPU9250_ReadTemperature>:

MPU9250_Result_t MPU9250_ReadTemperature(MPU9250_t *MPU9250) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	6078      	str	r0, [r7, #4]
	uint8_t data[2];

	readMultiBytes(&hi2c1, MPU9250->I2C_Addr, TEMP_OUT_H, data, 2);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	2202      	movs	r2, #2
 8000c14:	9200      	str	r2, [sp, #0]
 8000c16:	2241      	movs	r2, #65	; 0x41
 8000c18:	4811      	ldr	r0, [pc, #68]	; (8000c60 <MPU9250_ReadTemperature+0x60>)
 8000c1a:	f000 f89b 	bl	8000d54 <readMultiBytes>

	MPU9250->temp_raw = ((int16_t) data[0] << 8) | data[1];
 8000c1e:	7b3b      	ldrb	r3, [r7, #12]
 8000c20:	021b      	lsls	r3, r3, #8
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	7b7b      	ldrb	r3, [r7, #13]
 8000c26:	b21b      	sxth	r3, r3
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	b21a      	sxth	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	875a      	strh	r2, [r3, #58]	; 0x3a

	MPU9250->temp = ((float) MPU9250->temp_raw / MPU9250->tempMult) + 21.0f;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000c36:	ee07 3a90 	vmov	s15, r3
 8000c3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8000c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c48:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8000c4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return MPU9250_RESULT_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	2000025c 	.word	0x2000025c

08000c64 <MPU9250_DataReady>:

MPU9250_Result_t MPU9250_DataReady(MPU9250_t *MPU9250) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	uint8_t data;
	readByte(&hi2c1, MPU9250->I2C_Addr, INT_STATUS, &data);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8000c72:	f107 030f 	add.w	r3, r7, #15
 8000c76:	2239      	movs	r2, #57	; 0x39
 8000c78:	4807      	ldr	r0, [pc, #28]	; (8000c98 <MPU9250_DataReady+0x34>)
 8000c7a:	f000 f838 	bl	8000cee <readByte>
	if (data & 0x01)
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MPU9250_DataReady+0x28>
		return MPU9250_RESULT_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e000      	b.n	8000c8e <MPU9250_DataReady+0x2a>

	return MPU9250_RESULT_ERROR;
 8000c8c:	2301      	movs	r3, #1
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000025c 	.word	0x2000025c

08000c9c <writeByte>:

HAL_StatusTypeDef writeByte(I2C_HandleTypeDef *hi2c1, uint8_t device_addr,
		uint8_t register_addr, uint8_t data) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af02      	add	r7, sp, #8
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4603      	mov	r3, r0
 8000cac:	70fb      	strb	r3, [r7, #3]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	70bb      	strb	r3, [r7, #2]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	707b      	strb	r3, [r7, #1]
	uint8_t buffer[2];
	buffer[0] = register_addr;
 8000cb6:	78bb      	ldrb	r3, [r7, #2]
 8000cb8:	733b      	strb	r3, [r7, #12]
	buffer[1] = data;
 8000cba:	787b      	ldrb	r3, [r7, #1]
 8000cbc:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(hi2c1, (uint16_t) device_addr,
 8000cbe:	78fb      	ldrb	r3, [r7, #3]
 8000cc0:	b299      	uxth	r1, r3
 8000cc2:	f107 020c 	add.w	r2, r7, #12
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	2302      	movs	r3, #2
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f001 fcc8 	bl	8002664 <HAL_I2C_Master_Transmit>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d004      	beq.n	8000ce4 <writeByte+0x48>
			(uint8_t*) buffer, 2, 1000) != HAL_OK) {
		if (HAL_I2C_GetError(hi2c1) != HAL_I2C_ERROR_AF) {
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f001 ffb4 	bl	8002c48 <HAL_I2C_GetError>
		}
		return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e000      	b.n	8000ce6 <writeByte+0x4a>
	}
	return HAL_OK;
 8000ce4:	2300      	movs	r3, #0

}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <readByte>:

HAL_StatusTypeDef readByte(I2C_HandleTypeDef *hi2c1, uint8_t device_addr,
		uint8_t register_addr, uint8_t *data) {
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b086      	sub	sp, #24
 8000cf2:	af02      	add	r7, sp, #8
 8000cf4:	60f8      	str	r0, [r7, #12]
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	72fb      	strb	r3, [r7, #11]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	72bb      	strb	r3, [r7, #10]
	/* Transmit Register Address */
	if (HAL_I2C_Master_Transmit(hi2c1, (uint16_t) device_addr, &register_addr,
 8000d00:	7afb      	ldrb	r3, [r7, #11]
 8000d02:	b299      	uxth	r1, r3
 8000d04:	f107 020a 	add.w	r2, r7, #10
 8000d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2301      	movs	r3, #1
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f001 fca7 	bl	8002664 <HAL_I2C_Master_Transmit>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d004      	beq.n	8000d26 <readByte+0x38>
			1, 1000) != HAL_OK) {
		{
			if (HAL_I2C_GetError(hi2c1) != HAL_I2C_ERROR_AF) {
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	f001 ff93 	bl	8002c48 <HAL_I2C_GetError>
			}
			return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e012      	b.n	8000d4c <readByte+0x5e>
		}
	}

	/* Receive Register Data */
	if (HAL_I2C_Master_Receive(hi2c1, (uint16_t) device_addr, data, 1, 1000)
 8000d26:	7afb      	ldrb	r3, [r7, #11]
 8000d28:	b299      	uxth	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	2301      	movs	r3, #1
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68f8      	ldr	r0, [r7, #12]
 8000d36:	f001 fd89 	bl	800284c <HAL_I2C_Master_Receive>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d004      	beq.n	8000d4a <readByte+0x5c>
			!= HAL_OK) {
		{
			if (HAL_I2C_GetError(hi2c1) != HAL_I2C_ERROR_AF) {
 8000d40:	68f8      	ldr	r0, [r7, #12]
 8000d42:	f001 ff81 	bl	8002c48 <HAL_I2C_GetError>
			}
			return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <readByte+0x5e>
		}
	}
	return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <readMultiBytes>:
	}
	return HAL_OK;
}

HAL_StatusTypeDef readMultiBytes(I2C_HandleTypeDef *hi2c1, uint8_t device_addr,
		uint8_t register_addr, uint8_t *data, uint16_t count) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	460b      	mov	r3, r1
 8000d60:	72fb      	strb	r3, [r7, #11]
 8000d62:	4613      	mov	r3, r2
 8000d64:	72bb      	strb	r3, [r7, #10]
	/* Transmit Register Address */
	if (HAL_I2C_Master_Transmit(hi2c1, (uint16_t) device_addr, &register_addr,
 8000d66:	7afb      	ldrb	r3, [r7, #11]
 8000d68:	b299      	uxth	r1, r3
 8000d6a:	f107 020a 	add.w	r2, r7, #10
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2301      	movs	r3, #1
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f001 fc74 	bl	8002664 <HAL_I2C_Master_Transmit>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d004      	beq.n	8000d8c <readMultiBytes+0x38>
			1, 1000) != HAL_OK) {
		if (HAL_I2C_GetError(hi2c1) != HAL_I2C_ERROR_AF) {
 8000d82:	68f8      	ldr	r0, [r7, #12]
 8000d84:	f001 ff60 	bl	8002c48 <HAL_I2C_GetError>
		}
		return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e012      	b.n	8000db2 <readMultiBytes+0x5e>
	}

	/* Receive Multiple Register Data */
	if (HAL_I2C_Master_Receive(hi2c1, (uint16_t) device_addr, data, count, 1000)
 8000d8c:	7afb      	ldrb	r3, [r7, #11]
 8000d8e:	b299      	uxth	r1, r3
 8000d90:	8b3b      	ldrh	r3, [r7, #24]
 8000d92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d96:	9200      	str	r2, [sp, #0]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f001 fd56 	bl	800284c <HAL_I2C_Master_Receive>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d004      	beq.n	8000db0 <readMultiBytes+0x5c>
			!= HAL_OK) {
		if (HAL_I2C_GetError(hi2c1) != HAL_I2C_ERROR_AF) {
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f001 ff4e 	bl	8002c48 <HAL_I2C_GetError>
		}
		return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e000      	b.n	8000db2 <readMultiBytes+0x5e>
	}
	return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <isMPU9250Ready>:

MPU9250_Result_t isMPU9250Ready(I2C_HandleTypeDef *hi2c1, uint8_t device_addr) {
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	70fb      	strb	r3, [r7, #3]
	/* Checks if device is ready to communicate */
	if (HAL_I2C_IsDeviceReady(hi2c1, (uint16_t) device_addr, 2, 5) != HAL_OK)
 8000dc6:	78fb      	ldrb	r3, [r7, #3]
 8000dc8:	b299      	uxth	r1, r3
 8000dca:	2305      	movs	r3, #5
 8000dcc:	2202      	movs	r2, #2
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f001 fe32 	bl	8002a38 <HAL_I2C_IsDeviceReady>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <isMPU9250Ready+0x24>
		return MPU9250_RESULT_NC;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	e000      	b.n	8000de0 <isMPU9250Ready+0x26>

	return MPU9250_RESULT_OK;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <deg2rad>:

static inline float deg2rad(float x) {
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	ed87 0a01 	vstr	s0, [r7, #4]
	return ((PI / 180.0f) * x);
 8000df2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000df6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000e0c <deg2rad+0x24>
 8000dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	3c8efa35 	.word	0x3c8efa35

08000e10 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e16:	f001 f882 	bl	8001f1e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e1a:	f000 f8c1 	bl	8000fa0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e1e:	f000 f9c1 	bl	80011a4 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000e22:	f000 f94f 	bl	80010c4 <MX_I2C1_Init>
	MX_UART4_Init();
 8000e26:	f000 f98d 	bl	8001144 <MX_UART4_Init>
	/* USER CODE BEGIN 2 */
//
	sprintf((char*) pTxData, "UART IS WORKS!!!\r\n");
 8000e2a:	4951      	ldr	r1, [pc, #324]	; (8000f70 <main+0x160>)
 8000e2c:	4851      	ldr	r0, [pc, #324]	; (8000f74 <main+0x164>)
 8000e2e:	f004 fc3b 	bl	80056a8 <siprintf>
	status = HAL_UART_Transmit(&huart4, pTxData, strlen((char*) pTxData), 200);
 8000e32:	4850      	ldr	r0, [pc, #320]	; (8000f74 <main+0x164>)
 8000e34:	f7ff fa04 	bl	8000240 <strlen>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	23c8      	movs	r3, #200	; 0xc8
 8000e3e:	494d      	ldr	r1, [pc, #308]	; (8000f74 <main+0x164>)
 8000e40:	484d      	ldr	r0, [pc, #308]	; (8000f78 <main+0x168>)
 8000e42:	f003 facf 	bl	80043e4 <HAL_UART_Transmit>
 8000e46:	4603      	mov	r3, r0
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b4c      	ldr	r3, [pc, #304]	; (8000f7c <main+0x16c>)
 8000e4c:	701a      	strb	r2, [r3, #0]
//	I2C_Scan();

	MPU9250_Init(&mpu9250, MPU9250_Device_0, ACCEL_SCALE_2G, GYRO_SCALE_250dps,
 8000e4e:	2301      	movs	r3, #1
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2300      	movs	r3, #0
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	4849      	ldr	r0, [pc, #292]	; (8000f80 <main+0x170>)
 8000e5a:	f7ff fbc5 	bl	80005e8 <MPU9250_Init>
			MAG_SCALE_16bit);


//	MPU9250_Calibrate(&mpu9250);

	if (whoAmI_Check(&mpu9250) != HAL_ERROR) {
 8000e5e:	4848      	ldr	r0, [pc, #288]	; (8000f80 <main+0x170>)
 8000e60:	f000 f9d0 	bl	8001204 <whoAmI_Check>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d018      	beq.n	8000e9c <main+0x8c>
		isDeviceConnected = 1;
 8000e6a:	4b46      	ldr	r3, [pc, #280]	; (8000f84 <main+0x174>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
		sprintf((char*) pTxData, "IMU connected. Status = %d\r\n",
 8000e70:	4b44      	ldr	r3, [pc, #272]	; (8000f84 <main+0x174>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4944      	ldr	r1, [pc, #272]	; (8000f88 <main+0x178>)
 8000e78:	483e      	ldr	r0, [pc, #248]	; (8000f74 <main+0x164>)
 8000e7a:	f004 fc15 	bl	80056a8 <siprintf>
				isDeviceConnected);
		status = HAL_UART_Transmit(&huart4, pTxData, strlen((char*) pTxData),
 8000e7e:	483d      	ldr	r0, [pc, #244]	; (8000f74 <main+0x164>)
 8000e80:	f7ff f9de 	bl	8000240 <strlen>
 8000e84:	4603      	mov	r3, r0
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	23c8      	movs	r3, #200	; 0xc8
 8000e8a:	493a      	ldr	r1, [pc, #232]	; (8000f74 <main+0x164>)
 8000e8c:	483a      	ldr	r0, [pc, #232]	; (8000f78 <main+0x168>)
 8000e8e:	f003 faa9 	bl	80043e4 <HAL_UART_Transmit>
 8000e92:	4603      	mov	r3, r0
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b39      	ldr	r3, [pc, #228]	; (8000f7c <main+0x16c>)
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	e002      	b.n	8000ea2 <main+0x92>
				200);
	} else
		isDeviceConnected = 0;
 8000e9c:	4b39      	ldr	r3, [pc, #228]	; (8000f84 <main+0x174>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]

	//library for roll pitch yaw
	TM_AHRSIMU_Init(&IMU, 1000, 0.5, 0);
 8000ea2:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8000f8c <main+0x17c>
 8000ea6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000eaa:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8000f90 <main+0x180>
 8000eae:	4839      	ldr	r0, [pc, #228]	; (8000f94 <main+0x184>)
 8000eb0:	f000 fcc6 	bl	8001840 <TM_AHRSIMU_Init>
	/* USER CODE END 2 */
	  printf("Hello SWO in new project!\r\n");
 8000eb4:	4838      	ldr	r0, [pc, #224]	; (8000f98 <main+0x188>)
 8000eb6:	f004 fbef 	bl	8005698 <puts>

		/* USER CODE BEGIN 3 */

//		 sprintf((char *)pTxData, "Is data ready ? = %x\r ", MPU9250_DataReady(&mpu9250));
//		 status = HAL_UART_Transmit (&huart4, pTxData, strlen((char *)pTxData), 200);
		if (MPU9250_DataReady(&mpu9250)) {
 8000eba:	4831      	ldr	r0, [pc, #196]	; (8000f80 <main+0x170>)
 8000ebc:	f7ff fed2 	bl	8000c64 <MPU9250_DataReady>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f9      	beq.n	8000eba <main+0xaa>
			MPU9250_ReadAcc(&mpu9250);
 8000ec6:	482e      	ldr	r0, [pc, #184]	; (8000f80 <main+0x170>)
 8000ec8:	f7ff fd56 	bl	8000978 <MPU9250_ReadAcc>
			MPU9250_ReadGyro(&mpu9250);
 8000ecc:	482c      	ldr	r0, [pc, #176]	; (8000f80 <main+0x170>)
 8000ece:	f7ff fdb1 	bl	8000a34 <MPU9250_ReadGyro>
			MPU9250_ReadMag(&mpu9250);
 8000ed2:	482b      	ldr	r0, [pc, #172]	; (8000f80 <main+0x170>)
 8000ed4:	f7ff fe0c 	bl	8000af0 <MPU9250_ReadMag>

			MPU9250_ReadTemperature(&mpu9250);
 8000ed8:	4829      	ldr	r0, [pc, #164]	; (8000f80 <main+0x170>)
 8000eda:	f7ff fe91 	bl	8000c00 <MPU9250_ReadTemperature>

			TM_AHRSIMU_UpdateIMU(&IMU, mpu9250.gyro[0]  , mpu9250.gyro[1] , mpu9250.gyro[2] , mpu9250.acc[0], mpu9250.acc[1], mpu9250.acc[2]);
 8000ede:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <main+0x170>)
 8000ee0:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ee4:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <main+0x170>)
 8000ee6:	ed93 7a04 	vldr	s14, [r3, #16]
 8000eea:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <main+0x170>)
 8000eec:	edd3 6a05 	vldr	s13, [r3, #20]
 8000ef0:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <main+0x170>)
 8000ef2:	ed93 6a00 	vldr	s12, [r3]
 8000ef6:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <main+0x170>)
 8000ef8:	edd3 5a01 	vldr	s11, [r3, #4]
 8000efc:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <main+0x170>)
 8000efe:	ed93 5a02 	vldr	s10, [r3, #8]
 8000f02:	eef0 2a45 	vmov.f32	s5, s10
 8000f06:	eeb0 2a65 	vmov.f32	s4, s11
 8000f0a:	eef0 1a46 	vmov.f32	s3, s12
 8000f0e:	eeb0 1a66 	vmov.f32	s2, s13
 8000f12:	eef0 0a47 	vmov.f32	s1, s14
 8000f16:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1a:	481e      	ldr	r0, [pc, #120]	; (8000f94 <main+0x184>)
 8000f1c:	f000 fcbf 	bl	800189e <TM_AHRSIMU_UpdateIMU>
//						status = HAL_UART_Transmit(&huart4, pTxData,
//								strlen((char*) pTxData), 200);


		//	*0.00875 *180/PI
			sprintf((char*) pTxData, "%f,%f,%f\r\n",mpu9250.gyro[0], mpu9250.gyro[1], mpu9250.gyro[2]);
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <main+0x170>)
 8000f22:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f26:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <main+0x170>)
 8000f2c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <main+0x170>)
 8000f36:	edd3 6a05 	vldr	s13, [r3, #20]
 8000f3a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000f3e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000f42:	ed8d 7b00 	vstr	d7, [sp]
 8000f46:	ec53 2b15 	vmov	r2, r3, d5
 8000f4a:	4914      	ldr	r1, [pc, #80]	; (8000f9c <main+0x18c>)
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <main+0x164>)
 8000f4e:	f004 fbab 	bl	80056a8 <siprintf>
//			sprintf((char*) pTxData, "%f,%f,%f\r\n",mpu9250.mag[0], mpu9250.mag[1], mpu9250.mag[2]);
//			sprintf((char*) pTxData, "%f,%f,%f\r\n", IMU.Roll,IMU.Pitch,IMU.Yaw);
			status = HAL_UART_Transmit(&huart4, pTxData,
					strlen((char*) pTxData), 200);
 8000f52:	4808      	ldr	r0, [pc, #32]	; (8000f74 <main+0x164>)
 8000f54:	f7ff f974 	bl	8000240 <strlen>
 8000f58:	4603      	mov	r3, r0
			status = HAL_UART_Transmit(&huart4, pTxData,
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	23c8      	movs	r3, #200	; 0xc8
 8000f5e:	4905      	ldr	r1, [pc, #20]	; (8000f74 <main+0x164>)
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <main+0x168>)
 8000f62:	f003 fa3f 	bl	80043e4 <HAL_UART_Transmit>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <main+0x16c>)
 8000f6c:	701a      	strb	r2, [r3, #0]
		if (MPU9250_DataReady(&mpu9250)) {
 8000f6e:	e7a4      	b.n	8000eba <main+0xaa>
 8000f70:	08008108 	.word	0x08008108
 8000f74:	20000354 	.word	0x20000354
 8000f78:	200002d0 	.word	0x200002d0
 8000f7c:	2000041c 	.word	0x2000041c
 8000f80:	2000020c 	.word	0x2000020c
 8000f84:	200001fc 	.word	0x200001fc
 8000f88:	0800811c 	.word	0x0800811c
 8000f8c:	00000000 	.word	0x00000000
 8000f90:	447a0000 	.word	0x447a0000
 8000f94:	200002a8 	.word	0x200002a8
 8000f98:	0800813c 	.word	0x0800813c
 8000f9c:	08008158 	.word	0x08008158

08000fa0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b0b8      	sub	sp, #224	; 0xe0
 8000fa4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fa6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000faa:	2234      	movs	r2, #52	; 0x34
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 fea0 	bl	8004cf4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000fb4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	2290      	movs	r2, #144	; 0x90
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f003 fe91 	bl	8004cf4 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <SystemClock_Config+0x11c>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a39      	ldr	r2, [pc, #228]	; (80010bc <SystemClock_Config+0x11c>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b37      	ldr	r3, [pc, #220]	; (80010bc <SystemClock_Config+0x11c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fea:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <SystemClock_Config+0x120>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a34      	ldr	r2, [pc, #208]	; (80010c0 <SystemClock_Config+0x120>)
 8000ff0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b32      	ldr	r3, [pc, #200]	; (80010c0 <SystemClock_Config+0x120>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001002:	2302      	movs	r3, #2
 8001004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001008:	2301      	movs	r3, #1
 800100a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100e:	2310      	movs	r3, #16
 8001010:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001014:	2302      	movs	r3, #2
 8001016:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001020:	2308      	movs	r3, #8
 8001022:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 216;
 8001026:	23d8      	movs	r3, #216	; 0xd8
 8001028:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800102c:	2302      	movs	r3, #2
 800102e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001032:	2302      	movs	r3, #2
 8001034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001038:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800103c:	4618      	mov	r0, r3
 800103e:	f002 f8d7 	bl	80031f0 <HAL_RCC_OscConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0xac>
		Error_Handler();
 8001048:	f000 f90a 	bl	8001260 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800104c:	f002 f880 	bl	8003150 <HAL_PWREx_EnableOverDrive>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xba>
		Error_Handler();
 8001056:	f000 f903 	bl	8001260 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800105a:	230f      	movs	r3, #15
 800105c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001060:	2302      	movs	r3, #2
 8001062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800106c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001070:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001078:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 800107c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001080:	2107      	movs	r1, #7
 8001082:	4618      	mov	r0, r3
 8001084:	f002 fb62 	bl	800374c <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0xf2>
		Error_Handler();
 800108e:	f000 f8e7 	bl	8001260 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4
 8001092:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001096:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001098:	2300      	movs	r3, #0
 800109a:	65bb      	str	r3, [r7, #88]	; 0x58
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800109c:	2300      	movs	r3, #0
 800109e:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 fd27 	bl	8003af8 <HAL_RCCEx_PeriphCLKConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x114>
		Error_Handler();
 80010b0:	f000 f8d6 	bl	8001260 <Error_Handler>
	}
}
 80010b4:	bf00      	nop
 80010b6:	37e0      	adds	r7, #224	; 0xe0
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40007000 	.word	0x40007000

080010c4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_I2C1_Init+0x74>)
 80010ca:	4a1c      	ldr	r2, [pc, #112]	; (800113c <MX_I2C1_Init+0x78>)
 80010cc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20404768;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_I2C1_Init+0x74>)
 80010d0:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <MX_I2C1_Init+0x7c>)
 80010d2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_I2C1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_I2C1_Init+0x74>)
 80010dc:	2201      	movs	r2, #1
 80010de:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_I2C1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_I2C1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_I2C1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_I2C1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80010fe:	480e      	ldr	r0, [pc, #56]	; (8001138 <MX_I2C1_Init+0x74>)
 8001100:	f001 fa20 	bl	8002544 <HAL_I2C_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_I2C1_Init+0x4a>
		Error_Handler();
 800110a:	f000 f8a9 	bl	8001260 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800110e:	2100      	movs	r1, #0
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <MX_I2C1_Init+0x74>)
 8001112:	f001 ff85 	bl	8003020 <HAL_I2CEx_ConfigAnalogFilter>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 800111c:	f000 f8a0 	bl	8001260 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001120:	2100      	movs	r1, #0
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_I2C1_Init+0x74>)
 8001124:	f001 ffc7 	bl	80030b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2C1_Init+0x6e>
		Error_Handler();
 800112e:	f000 f897 	bl	8001260 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000025c 	.word	0x2000025c
 800113c:	40005400 	.word	0x40005400
 8001140:	20404768 	.word	0x20404768

08001144 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_UART4_Init+0x58>)
 800114a:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <MX_UART4_Init+0x5c>)
 800114c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 9600;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_UART4_Init+0x58>)
 8001150:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001154:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_UART4_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_UART4_Init+0x58>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_UART4_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_UART4_Init+0x58>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <MX_UART4_Init+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_UART4_Init+0x58>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <MX_UART4_Init+0x58>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_UART4_Init+0x58>)
 8001182:	2200      	movs	r2, #0
 8001184:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_UART4_Init+0x58>)
 8001188:	f003 f8de 	bl	8004348 <HAL_UART_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_UART4_Init+0x52>
		Error_Handler();
 8001192:	f000 f865 	bl	8001260 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200002d0 	.word	0x200002d0
 80011a0:	40004c00 	.word	0x40004c00

080011a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_GPIO_Init+0x5c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a14      	ldr	r2, [pc, #80]	; (8001200 <MX_GPIO_Init+0x5c>)
 80011b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_GPIO_Init+0x5c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_GPIO_Init+0x5c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <MX_GPIO_Init+0x5c>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_GPIO_Init+0x5c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_GPIO_Init+0x5c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a08      	ldr	r2, [pc, #32]	; (8001200 <MX_GPIO_Init+0x5c>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_GPIO_Init+0x5c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800

08001204 <whoAmI_Check>:
//
//	}
//	HAL_UART_Transmit(&huart4, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
//}

HAL_StatusTypeDef whoAmI_Check(MPU9250_t *mpu9250) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

	uint8_t data;
	/* MPU9250 Who Am I Register Check */
	if (readByte(&hi2c1, mpu9250->I2C_Addr, WHO_AM_I, &data) != HAL_OK) {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8001212:	f107 030f 	add.w	r3, r7, #15
 8001216:	2275      	movs	r2, #117	; 0x75
 8001218:	4810      	ldr	r0, [pc, #64]	; (800125c <whoAmI_Check+0x58>)
 800121a:	f7ff fd68 	bl	8000cee <readByte>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d004      	beq.n	800122e <whoAmI_Check+0x2a>

		if (data != 0x71)
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	2b71      	cmp	r3, #113	; 0x71
 8001228:	d001      	beq.n	800122e <whoAmI_Check+0x2a>
			return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e011      	b.n	8001252 <whoAmI_Check+0x4e>
	}
//	sprintf((char *)pTxData, "status = %x\r\n", data);
//	status = HAL_UART_Transmit (&huart4, pTxData, strlen((char *)pTxData), 200);

	/* AK8963 Who Am I Register Check */
	if (readByte(&hi2c1, mpu9250->I2C_Addr_Mag, WIA, &data) != HAL_OK) {
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 8001234:	f107 030f 	add.w	r3, r7, #15
 8001238:	2200      	movs	r2, #0
 800123a:	4808      	ldr	r0, [pc, #32]	; (800125c <whoAmI_Check+0x58>)
 800123c:	f7ff fd57 	bl	8000cee <readByte>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d004      	beq.n	8001250 <whoAmI_Check+0x4c>
		if (data != 0x48)
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	2b48      	cmp	r3, #72	; 0x48
 800124a:	d001      	beq.n	8001250 <whoAmI_Check+0x4c>
			return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e000      	b.n	8001252 <whoAmI_Check+0x4e>
	}

	return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000025c 	.word	0x2000025c

08001260 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
}
 8001266:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001268:	e7fe      	b.n	8001268 <Error_Handler+0x8>

0800126a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001272:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001276:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d013      	beq.n	80012aa <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001282:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001286:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800128a:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001292:	e000      	b.n	8001296 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001294:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001296:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f9      	beq.n	8001294 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80012a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80012aa:	687b      	ldr	r3, [r7, #4]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <_write>:
#include "printf_SWO.h"

char test_msg[300];

int _write(int file, char *ptr, int len)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
    //return usart_write(platform_get_console(), (u8 *)ptr, len);
      int i=0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
      for(i=0 ; i<len ; i++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e009      	b.n	80012e2 <_write+0x2a>
        ITM_SendChar((*ptr++));
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	60ba      	str	r2, [r7, #8]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ffc7 	bl	800126a <ITM_SendChar>
      for(i=0 ; i<len ; i++)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	dbf1      	blt.n	80012ce <_write+0x16>
      return len;
 80012ea:	687b      	ldr	r3, [r7, #4]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_MspInit+0x44>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <HAL_MspInit+0x44>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001304:	6413      	str	r3, [r2, #64]	; 0x40
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_MspInit+0x44>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_MspInit+0x44>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <HAL_MspInit+0x44>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_MspInit+0x44>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800

0800133c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <HAL_I2C_MspInit+0x7c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d128      	bne.n	80013b0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <HAL_I2C_MspInit+0x80>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a16      	ldr	r2, [pc, #88]	; (80013bc <HAL_I2C_MspInit+0x80>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <HAL_I2C_MspInit+0x80>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001376:	f44f 7340 	mov.w	r3, #768	; 0x300
 800137a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800137c:	2312      	movs	r3, #18
 800137e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001380:	2301      	movs	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001388:	2304      	movs	r3, #4
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	480b      	ldr	r0, [pc, #44]	; (80013c0 <HAL_I2C_MspInit+0x84>)
 8001394:	f000 ff2a 	bl	80021ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_I2C_MspInit+0x80>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_I2C_MspInit+0x80>)
 800139e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013a2:	6413      	str	r3, [r2, #64]	; 0x40
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_I2C_MspInit+0x80>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40005400 	.word	0x40005400
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020400 	.word	0x40020400

080013c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a17      	ldr	r2, [pc, #92]	; (8001440 <HAL_UART_MspInit+0x7c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d127      	bne.n	8001436 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <HAL_UART_MspInit+0x80>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	4a16      	ldr	r2, [pc, #88]	; (8001444 <HAL_UART_MspInit+0x80>)
 80013ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013f0:	6413      	str	r3, [r2, #64]	; 0x40
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_UART_MspInit+0x80>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <HAL_UART_MspInit+0x80>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a10      	ldr	r2, [pc, #64]	; (8001444 <HAL_UART_MspInit+0x80>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HAL_UART_MspInit+0x80>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001416:	2303      	movs	r3, #3
 8001418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001426:	2308      	movs	r3, #8
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <HAL_UART_MspInit+0x84>)
 8001432:	f000 fedb 	bl	80021ec <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	; 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40004c00 	.word	0x40004c00
 8001444:	40023800 	.word	0x40023800
 8001448:	40020000 	.word	0x40020000

0800144c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <NMI_Handler+0x4>

08001452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <MemManage_Handler+0x4>

0800145e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <UsageFault_Handler+0x4>

0800146a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001498:	f000 fd7e 	bl	8001f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
	return 1;
 80014a4:	2301      	movs	r3, #1
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <_kill>:

int _kill(int pid, int sig)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014ba:	f003 fbf1 	bl	8004ca0 <__errno>
 80014be:	4603      	mov	r3, r0
 80014c0:	2216      	movs	r2, #22
 80014c2:	601a      	str	r2, [r3, #0]
	return -1;
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_exit>:

void _exit (int status)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ffe7 	bl	80014b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014e2:	e7fe      	b.n	80014e2 <_exit+0x12>

080014e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	e00a      	b.n	800150c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014f6:	f3af 8000 	nop.w
 80014fa:	4601      	mov	r1, r0
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	60ba      	str	r2, [r7, #8]
 8001502:	b2ca      	uxtb	r2, r1
 8001504:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbf0      	blt.n	80014f6 <_read+0x12>
	}

return len;
 8001514:	687b      	ldr	r3, [r7, #4]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_close>:
	}
	return len;
}

int _close(int file)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
	return -1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001546:	605a      	str	r2, [r3, #4]
	return 0;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <_isatty>:

int _isatty(int file)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
	return 1;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
	return 0;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001590:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <_sbrk+0x5c>)
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <_sbrk+0x60>)
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <_sbrk+0x64>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <_sbrk+0x68>)
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d207      	bcs.n	80015c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b8:	f003 fb72 	bl	8004ca0 <__errno>
 80015bc:	4603      	mov	r3, r0
 80015be:	220c      	movs	r2, #12
 80015c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e009      	b.n	80015dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <_sbrk+0x64>)
 80015d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20080000 	.word	0x20080000
 80015e8:	00000400 	.word	0x00000400
 80015ec:	20000200 	.word	0x20000200
 80015f0:	20000438 	.word	0x20000438

080015f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <SystemInit+0x20>)
 80015fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <SystemInit+0x20>)
 8001600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <oneOverSqrt>:
 */
#include "tm_stm32_ahrs_imu.h"

/* Calculate 1/sqrt(x) with magic number support */
static
float oneOverSqrt(float x) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / (float) sqrt(x);
 8001622:	edd7 7a01 	vldr	s15, [r7, #4]
 8001626:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800162a:	eeb0 0b47 	vmov.f64	d0, d7
 800162e:	f006 fa2f 	bl	8007a90 <sqrt>
 8001632:	eeb0 7b40 	vmov.f64	d7, d0
 8001636:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800163a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800163e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001642:	eef0 7a66 	vmov.f32	s15, s13
}
 8001646:	eeb0 0a67 	vmov.f32	s0, s15
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <calculateAngles>:

static
void calculateAngles(TM_AHRSIMU_t* AHRSIMU) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
    AHRSIMU->Roll = (float) atan2(AHRSIMU->_q0 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q1 * AHRSIMU->_q1 - AHRSIMU->_q2 * AHRSIMU->_q2);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	ed93 7a05 	vldr	s14, [r3, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	edd3 7a06 	vldr	s15, [r3, #24]
 8001664:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	edd3 6a07 	vldr	s13, [r3, #28]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	edd3 7a08 	vldr	s15, [r3, #32]
 8001674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	ed93 6a06 	vldr	s12, [r3, #24]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	edd3 6a06 	vldr	s13, [r3, #24]
 800168c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001690:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001694:	ee36 6a66 	vsub.f32	s12, s12, s13
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	edd3 5a07 	vldr	s11, [r3, #28]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edd3 6a07 	vldr	s13, [r3, #28]
 80016a4:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80016a8:	ee76 6a66 	vsub.f32	s13, s12, s13
 80016ac:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80016b0:	eeb0 1b46 	vmov.f64	d1, d6
 80016b4:	eeb0 0b47 	vmov.f64	d0, d7
 80016b8:	f006 f9e8 	bl	8007a8c <atan2>
 80016bc:	eeb0 7b40 	vmov.f64	d7, d0
 80016c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	edc3 7a00 	vstr	s15, [r3]
    AHRSIMU->Pitch = (float) asin(-2.0f * (AHRSIMU->_q1 * AHRSIMU->_q3 - AHRSIMU->_q0 * AHRSIMU->_q2));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	ed93 7a06 	vldr	s14, [r3, #24]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	edd3 7a08 	vldr	s15, [r3, #32]
 80016d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	edd3 6a05 	vldr	s13, [r3, #20]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80016e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ee:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80016f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016fa:	eeb0 0b47 	vmov.f64	d0, d7
 80016fe:	f006 f993 	bl	8007a28 <asin>
 8001702:	eeb0 7b40 	vmov.f64	d7, d0
 8001706:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	edc3 7a01 	vstr	s15, [r3, #4]
    AHRSIMU->Yaw = (float) atan2(AHRSIMU->_q1 * AHRSIMU->_q2 + AHRSIMU->_q0 * AHRSIMU->_q3, 0.5f - AHRSIMU->_q2 * AHRSIMU->_q2 - AHRSIMU->_q3 * AHRSIMU->_q3);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	ed93 7a06 	vldr	s14, [r3, #24]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	edd3 7a07 	vldr	s15, [r3, #28]
 800171c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	edd3 6a05 	vldr	s13, [r3, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	edd3 7a08 	vldr	s15, [r3, #32]
 800172c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001734:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	ed93 6a07 	vldr	s12, [r3, #28]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	edd3 6a07 	vldr	s13, [r3, #28]
 8001744:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001748:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800174c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	edd3 5a08 	vldr	s11, [r3, #32]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	edd3 6a08 	vldr	s13, [r3, #32]
 800175c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8001760:	ee76 6a66 	vsub.f32	s13, s12, s13
 8001764:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001768:	eeb0 1b46 	vmov.f64	d1, d6
 800176c:	eeb0 0b47 	vmov.f64	d0, d7
 8001770:	f006 f98c 	bl	8007a8c <atan2>
 8001774:	eeb0 7b40 	vmov.f64	d7, d0
 8001778:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	edc3 7a02 	vstr	s15, [r3, #8]

    /* Calculate degrees and remove inclination */
    AHRSIMU->Roll *= AHRSIMU_RAD2DEG(1);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001834 <calculateAngles+0x1e4>
 800178c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	edc3 7a00 	vstr	s15, [r3]
    AHRSIMU->Pitch *= AHRSIMU_RAD2DEG(1);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	edd3 7a01 	vldr	s15, [r3, #4]
 800179c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001834 <calculateAngles+0x1e4>
 80017a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	edc3 7a01 	vstr	s15, [r3, #4]
    AHRSIMU->Yaw = AHRSIMU->Yaw * AHRSIMU_RAD2DEG(1) - AHRSIMU->Inclination;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80017b0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001834 <calculateAngles+0x1e4>
 80017b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80017be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	edc3 7a02 	vstr	s15, [r3, #8]
    
    /* Check values because of inclination */
    if (AHRSIMU->Yaw < -180) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80017ce:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001838 <calculateAngles+0x1e8>
 80017d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	d50e      	bpl.n	80017fa <calculateAngles+0x1aa>
        AHRSIMU->Yaw = 180.0f - (-180.0f - AHRSIMU->Yaw);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	edd3 7a02 	vldr	s15, [r3, #8]
 80017e2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001838 <calculateAngles+0x1e8>
 80017e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ea:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800183c <calculateAngles+0x1ec>
 80017ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	edc3 7a02 	vstr	s15, [r3, #8]
    } else if (AHRSIMU->Yaw > 180) {
        AHRSIMU->Yaw = -180.0f - (180.0f - AHRSIMU->Yaw);
    }
}
 80017f8:	e018      	b.n	800182c <calculateAngles+0x1dc>
    } else if (AHRSIMU->Yaw > 180) {
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001800:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800183c <calculateAngles+0x1ec>
 8001804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180c:	dc00      	bgt.n	8001810 <calculateAngles+0x1c0>
}
 800180e:	e00d      	b.n	800182c <calculateAngles+0x1dc>
        AHRSIMU->Yaw = -180.0f - (180.0f - AHRSIMU->Yaw);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	edd3 7a02 	vldr	s15, [r3, #8]
 8001816:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800183c <calculateAngles+0x1ec>
 800181a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001838 <calculateAngles+0x1e8>
 8001822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	42652ee1 	.word	0x42652ee1
 8001838:	c3340000 	.word	0xc3340000
 800183c:	43340000 	.word	0x43340000

08001840 <TM_AHRSIMU_Init>:

void TM_AHRSIMU_Init(TM_AHRSIMU_t* AHRSIMU, float beta, float sampleRate, float inclination) {
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	ed87 0a02 	vstr	s0, [r7, #8]
 800184c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001850:	ed87 1a00 	vstr	s2, [r7]
    AHRSIMU->_beta = beta;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	611a      	str	r2, [r3, #16]
    AHRSIMU->_sampleRate = 1 / sampleRate;
 800185a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800185e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    AHRSIMU->Inclination = inclination;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	60da      	str	r2, [r3, #12]
    
    AHRSIMU->_q0 = 1.0f;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001878:	615a      	str	r2, [r3, #20]
    AHRSIMU->_q1 = 0.0f;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
    AHRSIMU->_q2 = 0.0f;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
    AHRSIMU->_q3 = 0.0f;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	621a      	str	r2, [r3, #32]
}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <TM_AHRSIMU_UpdateIMU>:
    
    /* Calculate new angles */
    calculateAngles(AHRSIMU);
}

void TM_AHRSIMU_UpdateIMU(TM_AHRSIMU_t* AHRSIMU, float gx, float gy, float gz, float ax, float ay, float az) {
 800189e:	b580      	push	{r7, lr}
 80018a0:	b09e      	sub	sp, #120	; 0x78
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	61f8      	str	r0, [r7, #28]
 80018a6:	ed87 0a06 	vstr	s0, [r7, #24]
 80018aa:	edc7 0a05 	vstr	s1, [r7, #20]
 80018ae:	ed87 1a04 	vstr	s2, [r7, #16]
 80018b2:	edc7 1a03 	vstr	s3, [r7, #12]
 80018b6:	ed87 2a02 	vstr	s4, [r7, #8]
 80018ba:	edc7 2a01 	vstr	s5, [r7, #4]
    float s0, s1, s2, s3;
    float qDot1, qDot2, qDot3, qDot4;
    float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

    /* Rate of change of quaternion from gyroscope */
    qDot1 = 0.5f * (-AHRSIMU->_q1 * gx - AHRSIMU->_q2 * gy - AHRSIMU->_q3 * gz);
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80018c4:	eeb1 7a67 	vneg.f32	s14, s15
 80018c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80018cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	edd3 6a07 	vldr	s13, [r3, #28]
 80018d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80018da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	edd3 6a08 	vldr	s13, [r3, #32]
 80018e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018fc:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    qDot2 = 0.5f * (AHRSIMU->_q0 * gx + AHRSIMU->_q2 * gz - AHRSIMU->_q3 * gy);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	ed93 7a05 	vldr	s14, [r3, #20]
 8001906:	edd7 7a06 	vldr	s15, [r7, #24]
 800190a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	edd3 6a07 	vldr	s13, [r3, #28]
 8001914:	edd7 7a04 	vldr	s15, [r7, #16]
 8001918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800191c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	edd3 6a08 	vldr	s13, [r3, #32]
 8001926:	edd7 7a05 	vldr	s15, [r7, #20]
 800192a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800192e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001932:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    qDot3 = 0.5f * (AHRSIMU->_q0 * gy - AHRSIMU->_q1 * gz + AHRSIMU->_q3 * gx);
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	ed93 7a05 	vldr	s14, [r3, #20]
 8001944:	edd7 7a05 	vldr	s15, [r7, #20]
 8001948:	ee27 7a27 	vmul.f32	s14, s14, s15
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001952:	edd7 7a04 	vldr	s15, [r7, #16]
 8001956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	edd3 6a08 	vldr	s13, [r3, #32]
 8001964:	edd7 7a06 	vldr	s15, [r7, #24]
 8001968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800196c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001970:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001974:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001978:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    qDot4 = 0.5f * (AHRSIMU->_q0 * gz + AHRSIMU->_q1 * gy - AHRSIMU->_q2 * gx);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001982:	edd7 7a04 	vldr	s15, [r7, #16]
 8001986:	ee27 7a27 	vmul.f32	s14, s14, s15
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001990:	edd7 7a05 	vldr	s15, [r7, #20]
 8001994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001998:	ee37 7a27 	vadd.f32	s14, s14, s15
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	edd3 6a07 	vldr	s13, [r3, #28]
 80019a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80019a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

    /* Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation) */
    if (!(ax == 0.0f && ay == 0.0f && az == 0.0f)) {
 80019ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80019be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	d10e      	bne.n	80019e6 <TM_AHRSIMU_UpdateIMU+0x148>
 80019c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80019cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	d107      	bne.n	80019e6 <TM_AHRSIMU_UpdateIMU+0x148>
 80019d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80019da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	f000 81db 	beq.w	8001d9c <TM_AHRSIMU_UpdateIMU+0x4fe>

        /* Normalise accelerometer measurement */
        recipNorm = oneOverSqrt(ax * ax + ay * ay + az * az);
 80019e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ea:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80019f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80019fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a06:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0a:	f7ff fe05 	bl	8001618 <oneOverSqrt>
 8001a0e:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
        ax *= recipNorm;
 8001a12:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a16:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1e:	edc7 7a03 	vstr	s15, [r7, #12]
        ay *= recipNorm;
 8001a22:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a26:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2e:	edc7 7a02 	vstr	s15, [r7, #8]
        az *= recipNorm;
 8001a32:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a36:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3e:	edc7 7a01 	vstr	s15, [r7, #4]

        /* Auxiliary variables to avoid repeated arithmetic */
        _2q0 = 2.0f * AHRSIMU->_q0;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a4c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        _2q1 = 2.0f * AHRSIMU->_q1;
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a56:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a5a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        _2q2 = 2.0f * AHRSIMU->_q2;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a68:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        _2q3 = 2.0f * AHRSIMU->_q3;
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a76:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        _4q0 = 4.0f * AHRSIMU->_q0;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a80:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001a84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a88:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        _4q1 = 4.0f * AHRSIMU->_q1;
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a92:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001a96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a9a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        _4q2 = 4.0f * AHRSIMU->_q2;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001aa4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001aa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aac:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        _8q1 = 8.0f * AHRSIMU->_q1;
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ab6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001abe:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        _8q2 = 8.0f * AHRSIMU->_q2;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ac8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        q0q0 = AHRSIMU->_q0 * AHRSIMU->_q0;
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	ed93 7a05 	vldr	s14, [r3, #20]
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        q1q1 = AHRSIMU->_q1 * AHRSIMU->_q1;
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	ed93 7a06 	vldr	s14, [r3, #24]
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	edd3 7a06 	vldr	s15, [r3, #24]
 8001af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        q2q2 = AHRSIMU->_q2 * AHRSIMU->_q2;
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	ed93 7a07 	vldr	s14, [r3, #28]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        q3q3 = AHRSIMU->_q3 * AHRSIMU->_q3;
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b20:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

        /* Gradient decent algorithm corrective step */
        s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8001b24:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001b28:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b30:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001b34:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b40:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001b44:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b50:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001b54:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b60:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * AHRSIMU->_q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8001b64:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001b68:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b70:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001b74:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b80:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b84:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001b88:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b9a:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8001b9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001baa:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001bae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bb2:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001bb6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001bba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bc2:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001bc6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bd2:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001bd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        s2 = 4.0f * q0q0 * AHRSIMU->_q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8001be6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001bea:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001bee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	edd3 7a07 	vldr	s15, [r3, #28]
 8001bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bfc:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8001c00:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c0c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001c10:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c1c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001c20:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c2c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c34:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001c38:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c44:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001c48:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c54:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001c58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c64:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        s3 = 4.0f * q1q1 * AHRSIMU->_q3 - _2q1 * ax + 4.0f * q2q2 * AHRSIMU->_q3 - _2q2 * ay;
 8001c68:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c6c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001c70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c7e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001c82:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c8e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c92:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001c96:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ca8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001cac:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb8:	edc7 7a08 	vstr	s15, [r7, #32]
        
        /* Normalise step magnitude */
        recipNorm = oneOverSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); 
 8001cbc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cc0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001cc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001cc8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cdc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ce0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cec:	f7ff fc94 	bl	8001618 <oneOverSqrt>
 8001cf0:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
        s0 *= recipNorm;
 8001cf4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001cf8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d00:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        s1 *= recipNorm;
 8001d04:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001d08:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d10:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        s2 *= recipNorm;
 8001d14:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d18:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d20:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        s3 *= recipNorm;
 8001d24:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d28:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d30:	edc7 7a08 	vstr	s15, [r7, #32]

        /* Apply feedback step */
        qDot1 -= AHRSIMU->_beta * s0;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d3a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d42:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        qDot2 -= AHRSIMU->_beta * s1;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d54:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d5c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d64:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        qDot3 -= AHRSIMU->_beta * s2;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d76:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
        qDot4 -= AHRSIMU->_beta * s3;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d88:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d90:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d98:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    }

    /* Integrate rate of change of quaternion to yield quaternion */
    AHRSIMU->_q0 += qDot1 * AHRSIMU->_sampleRate;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001da8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001dac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	edc3 7a05 	vstr	s15, [r3, #20]
    AHRSIMU->_q1 += qDot2 * AHRSIMU->_sampleRate;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	ed93 7a06 	vldr	s14, [r3, #24]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001dc6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001dca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	edc3 7a06 	vstr	s15, [r3, #24]
    AHRSIMU->_q2 += qDot3 * AHRSIMU->_sampleRate;
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	ed93 7a07 	vldr	s14, [r3, #28]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001de4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001de8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	edc3 7a07 	vstr	s15, [r3, #28]
    AHRSIMU->_q3 += qDot4 * AHRSIMU->_sampleRate;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001e02:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	edc3 7a08 	vstr	s15, [r3, #32]

    /* Normalise quaternion */
    recipNorm = oneOverSqrt(AHRSIMU->_q0 * AHRSIMU->_q0 + AHRSIMU->_q1 * AHRSIMU->_q1 + AHRSIMU->_q2 * AHRSIMU->_q2 + AHRSIMU->_q3 * AHRSIMU->_q3);
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	edd3 6a06 	vldr	s13, [r3, #24]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	edd3 6a07 	vldr	s13, [r3, #28]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e60:	eeb0 0a67 	vmov.f32	s0, s15
 8001e64:	f7ff fbd8 	bl	8001618 <oneOverSqrt>
 8001e68:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    AHRSIMU->_q0 *= recipNorm;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e72:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	edc3 7a05 	vstr	s15, [r3, #20]
    AHRSIMU->_q1 *= recipNorm;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e86:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	edc3 7a06 	vstr	s15, [r3, #24]
    AHRSIMU->_q2 *= recipNorm;
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	ed93 7a07 	vldr	s14, [r3, #28]
 8001e9a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	edc3 7a07 	vstr	s15, [r3, #28]
    AHRSIMU->_q3 *= recipNorm;
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	ed93 7a08 	vldr	s14, [r3, #32]
 8001eae:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	edc3 7a08 	vstr	s15, [r3, #32]
    
    /* Calculate new angles */
    calculateAngles(AHRSIMU);
 8001ebc:	69f8      	ldr	r0, [r7, #28]
 8001ebe:	f7ff fbc7 	bl	8001650 <calculateAngles>
}
 8001ec2:	bf00      	nop
 8001ec4:	3778      	adds	r7, #120	; 0x78
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ed2:	490e      	ldr	r1, [pc, #56]	; (8001f0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed4:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee6:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee8:	4c0b      	ldr	r4, [pc, #44]	; (8001f18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ef6:	f7ff fb7d 	bl	80015f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efa:	f002 fed7 	bl	8004cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efe:	f7fe ff87 	bl	8000e10 <main>
  bx  lr    
 8001f02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f04:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f0c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f10:	080085e0 	.word	0x080085e0
  ldr r2, =_sbss
 8001f14:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f18:	20000434 	.word	0x20000434

08001f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f1c:	e7fe      	b.n	8001f1c <ADC_IRQHandler>

08001f1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f22:	2003      	movs	r0, #3
 8001f24:	f000 f92e 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f000 f805 	bl	8001f38 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001f2e:	f7ff f9e1 	bl	80012f4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_InitTick+0x54>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_InitTick+0x58>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f93b 	bl	80021d2 <HAL_SYSTICK_Config>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00e      	b.n	8001f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b0f      	cmp	r3, #15
 8001f6a:	d80a      	bhi.n	8001f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	f000 f911 	bl	800219a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f78:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <HAL_InitTick+0x5c>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e000      	b.n	8001f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000008 	.word	0x20000008
 8001f94:	20000004 	.word	0x20000004

08001f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_IncTick+0x20>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_IncTick+0x24>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <HAL_IncTick+0x24>)
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	20000420 	.word	0x20000420

08001fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <HAL_GetTick+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000420 	.word	0x20000420

08001fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe0:	f7ff ffee 	bl	8001fc0 <HAL_GetTick>
 8001fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff0:	d005      	beq.n	8001ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <HAL_Delay+0x44>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ffe:	bf00      	nop
 8002000:	f7ff ffde 	bl	8001fc0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	429a      	cmp	r2, r3
 800200e:	d8f7      	bhi.n	8002000 <HAL_Delay+0x28>
  {
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000008 	.word	0x20000008

08002020 <__NVIC_SetPriorityGrouping>:
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <__NVIC_SetPriorityGrouping+0x40>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 800204a:	4313      	orrs	r3, r2
 800204c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204e:	4a04      	ldr	r2, [pc, #16]	; (8002060 <__NVIC_SetPriorityGrouping+0x40>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	60d3      	str	r3, [r2, #12]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00
 8002064:	05fa0000 	.word	0x05fa0000

08002068 <__NVIC_GetPriorityGrouping>:
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <__NVIC_GetPriorityGrouping+0x18>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	f003 0307 	and.w	r3, r3, #7
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_SetPriority>:
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	; (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff47 	bl	8002020 <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff5c 	bl	8002068 <__NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff8e 	bl	80020d8 <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5d 	bl	8002084 <__NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ffb0 	bl	8002140 <SysTick_Config>
 80021e0:	4603      	mov	r3, r0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	e175      	b.n	80024f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800220c:	2201      	movs	r2, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	429a      	cmp	r2, r3
 8002226:	f040 8164 	bne.w	80024f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d00b      	beq.n	800224a <HAL_GPIO_Init+0x5e>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d007      	beq.n	800224a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800223e:	2b11      	cmp	r3, #17
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b12      	cmp	r3, #18
 8002248:	d130      	bne.n	80022ac <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	2203      	movs	r2, #3
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002280:	2201      	movs	r2, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 0201 	and.w	r2, r3, #1
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d003      	beq.n	80022ec <HAL_GPIO_Init+0x100>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b12      	cmp	r3, #18
 80022ea:	d123      	bne.n	8002334 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	08da      	lsrs	r2, r3, #3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3208      	adds	r2, #8
 80022f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	220f      	movs	r2, #15
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	08da      	lsrs	r2, r3, #3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3208      	adds	r2, #8
 800232e:	69b9      	ldr	r1, [r7, #24]
 8002330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0203 	and.w	r2, r3, #3
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80be 	beq.w	80024f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002376:	4b66      	ldr	r3, [pc, #408]	; (8002510 <HAL_GPIO_Init+0x324>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	4a65      	ldr	r2, [pc, #404]	; (8002510 <HAL_GPIO_Init+0x324>)
 800237c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002380:	6453      	str	r3, [r2, #68]	; 0x44
 8002382:	4b63      	ldr	r3, [pc, #396]	; (8002510 <HAL_GPIO_Init+0x324>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800238e:	4a61      	ldr	r2, [pc, #388]	; (8002514 <HAL_GPIO_Init+0x328>)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	3302      	adds	r3, #2
 8002396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	220f      	movs	r2, #15
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a58      	ldr	r2, [pc, #352]	; (8002518 <HAL_GPIO_Init+0x32c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d037      	beq.n	800242a <HAL_GPIO_Init+0x23e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a57      	ldr	r2, [pc, #348]	; (800251c <HAL_GPIO_Init+0x330>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d031      	beq.n	8002426 <HAL_GPIO_Init+0x23a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a56      	ldr	r2, [pc, #344]	; (8002520 <HAL_GPIO_Init+0x334>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d02b      	beq.n	8002422 <HAL_GPIO_Init+0x236>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a55      	ldr	r2, [pc, #340]	; (8002524 <HAL_GPIO_Init+0x338>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d025      	beq.n	800241e <HAL_GPIO_Init+0x232>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a54      	ldr	r2, [pc, #336]	; (8002528 <HAL_GPIO_Init+0x33c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01f      	beq.n	800241a <HAL_GPIO_Init+0x22e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a53      	ldr	r2, [pc, #332]	; (800252c <HAL_GPIO_Init+0x340>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d019      	beq.n	8002416 <HAL_GPIO_Init+0x22a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a52      	ldr	r2, [pc, #328]	; (8002530 <HAL_GPIO_Init+0x344>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d013      	beq.n	8002412 <HAL_GPIO_Init+0x226>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a51      	ldr	r2, [pc, #324]	; (8002534 <HAL_GPIO_Init+0x348>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00d      	beq.n	800240e <HAL_GPIO_Init+0x222>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a50      	ldr	r2, [pc, #320]	; (8002538 <HAL_GPIO_Init+0x34c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d007      	beq.n	800240a <HAL_GPIO_Init+0x21e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4f      	ldr	r2, [pc, #316]	; (800253c <HAL_GPIO_Init+0x350>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <HAL_GPIO_Init+0x21a>
 8002402:	2309      	movs	r3, #9
 8002404:	e012      	b.n	800242c <HAL_GPIO_Init+0x240>
 8002406:	230a      	movs	r3, #10
 8002408:	e010      	b.n	800242c <HAL_GPIO_Init+0x240>
 800240a:	2308      	movs	r3, #8
 800240c:	e00e      	b.n	800242c <HAL_GPIO_Init+0x240>
 800240e:	2307      	movs	r3, #7
 8002410:	e00c      	b.n	800242c <HAL_GPIO_Init+0x240>
 8002412:	2306      	movs	r3, #6
 8002414:	e00a      	b.n	800242c <HAL_GPIO_Init+0x240>
 8002416:	2305      	movs	r3, #5
 8002418:	e008      	b.n	800242c <HAL_GPIO_Init+0x240>
 800241a:	2304      	movs	r3, #4
 800241c:	e006      	b.n	800242c <HAL_GPIO_Init+0x240>
 800241e:	2303      	movs	r3, #3
 8002420:	e004      	b.n	800242c <HAL_GPIO_Init+0x240>
 8002422:	2302      	movs	r3, #2
 8002424:	e002      	b.n	800242c <HAL_GPIO_Init+0x240>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_GPIO_Init+0x240>
 800242a:	2300      	movs	r3, #0
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	f002 0203 	and.w	r2, r2, #3
 8002432:	0092      	lsls	r2, r2, #2
 8002434:	4093      	lsls	r3, r2
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800243c:	4935      	ldr	r1, [pc, #212]	; (8002514 <HAL_GPIO_Init+0x328>)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	3302      	adds	r3, #2
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800244a:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <HAL_GPIO_Init+0x354>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800246e:	4a34      	ldr	r2, [pc, #208]	; (8002540 <HAL_GPIO_Init+0x354>)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002474:	4b32      	ldr	r3, [pc, #200]	; (8002540 <HAL_GPIO_Init+0x354>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002498:	4a29      	ldr	r2, [pc, #164]	; (8002540 <HAL_GPIO_Init+0x354>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800249e:	4b28      	ldr	r3, [pc, #160]	; (8002540 <HAL_GPIO_Init+0x354>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024c2:	4a1f      	ldr	r2, [pc, #124]	; (8002540 <HAL_GPIO_Init+0x354>)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_GPIO_Init+0x354>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024ec:	4a14      	ldr	r2, [pc, #80]	; (8002540 <HAL_GPIO_Init+0x354>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3301      	adds	r3, #1
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	2b0f      	cmp	r3, #15
 80024fc:	f67f ae86 	bls.w	800220c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	3724      	adds	r7, #36	; 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
 8002514:	40013800 	.word	0x40013800
 8002518:	40020000 	.word	0x40020000
 800251c:	40020400 	.word	0x40020400
 8002520:	40020800 	.word	0x40020800
 8002524:	40020c00 	.word	0x40020c00
 8002528:	40021000 	.word	0x40021000
 800252c:	40021400 	.word	0x40021400
 8002530:	40021800 	.word	0x40021800
 8002534:	40021c00 	.word	0x40021c00
 8002538:	40022000 	.word	0x40022000
 800253c:	40022400 	.word	0x40022400
 8002540:	40013c00 	.word	0x40013c00

08002544 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e07f      	b.n	8002656 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe fee6 	bl	800133c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2224      	movs	r2, #36	; 0x24
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002594:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	e006      	b.n	80025cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d104      	bne.n	80025de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <HAL_I2C_Init+0x11c>)
 80025ea:	430b      	orrs	r3, r1
 80025ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	ea42 0103 	orr.w	r1, r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	021a      	lsls	r2, r3, #8
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69d9      	ldr	r1, [r3, #28]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1a      	ldr	r2, [r3, #32]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2220      	movs	r2, #32
 8002642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	02008000 	.word	0x02008000

08002664 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af02      	add	r7, sp, #8
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	461a      	mov	r2, r3
 8002670:	460b      	mov	r3, r1
 8002672:	817b      	strh	r3, [r7, #10]
 8002674:	4613      	mov	r3, r2
 8002676:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b20      	cmp	r3, #32
 8002682:	f040 80da 	bne.w	800283a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_I2C_Master_Transmit+0x30>
 8002690:	2302      	movs	r3, #2
 8002692:	e0d3      	b.n	800283c <HAL_I2C_Master_Transmit+0x1d8>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800269c:	f7ff fc90 	bl	8001fc0 <HAL_GetTick>
 80026a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2319      	movs	r3, #25
 80026a8:	2201      	movs	r2, #1
 80026aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 fafa 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0be      	b.n	800283c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2221      	movs	r2, #33	; 0x21
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2210      	movs	r2, #16
 80026ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	893a      	ldrh	r2, [r7, #8]
 80026de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2bff      	cmp	r3, #255	; 0xff
 80026ee:	d90e      	bls.n	800270e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	22ff      	movs	r2, #255	; 0xff
 80026f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	8979      	ldrh	r1, [r7, #10]
 80026fe:	4b51      	ldr	r3, [pc, #324]	; (8002844 <HAL_I2C_Master_Transmit+0x1e0>)
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fc5c 	bl	8002fc4 <I2C_TransferConfig>
 800270c:	e06c      	b.n	80027e8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	b2da      	uxtb	r2, r3
 800271e:	8979      	ldrh	r1, [r7, #10]
 8002720:	4b48      	ldr	r3, [pc, #288]	; (8002844 <HAL_I2C_Master_Transmit+0x1e0>)
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fc4b 	bl	8002fc4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800272e:	e05b      	b.n	80027e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	6a39      	ldr	r1, [r7, #32]
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 faf7 	bl	8002d28 <I2C_WaitOnTXISFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e07b      	b.n	800283c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	781a      	ldrb	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d034      	beq.n	80027e8 <HAL_I2C_Master_Transmit+0x184>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002782:	2b00      	cmp	r3, #0
 8002784:	d130      	bne.n	80027e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	2200      	movs	r2, #0
 800278e:	2180      	movs	r1, #128	; 0x80
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fa89 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e04d      	b.n	800283c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2bff      	cmp	r3, #255	; 0xff
 80027a8:	d90e      	bls.n	80027c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	22ff      	movs	r2, #255	; 0xff
 80027ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	8979      	ldrh	r1, [r7, #10]
 80027b8:	2300      	movs	r3, #0
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fbff 	bl	8002fc4 <I2C_TransferConfig>
 80027c6:	e00f      	b.n	80027e8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	8979      	ldrh	r1, [r7, #10]
 80027da:	2300      	movs	r3, #0
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fbee 	bl	8002fc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d19e      	bne.n	8002730 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	6a39      	ldr	r1, [r7, #32]
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fad6 	bl	8002da8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e01a      	b.n	800283c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2220      	movs	r2, #32
 800280c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6859      	ldr	r1, [r3, #4]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_I2C_Master_Transmit+0x1e4>)
 800281a:	400b      	ands	r3, r1
 800281c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800283a:	2302      	movs	r3, #2
  }
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	80002000 	.word	0x80002000
 8002848:	fe00e800 	.word	0xfe00e800

0800284c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	607a      	str	r2, [r7, #4]
 8002856:	461a      	mov	r2, r3
 8002858:	460b      	mov	r3, r1
 800285a:	817b      	strh	r3, [r7, #10]
 800285c:	4613      	mov	r3, r2
 800285e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b20      	cmp	r3, #32
 800286a:	f040 80db 	bne.w	8002a24 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_I2C_Master_Receive+0x30>
 8002878:	2302      	movs	r3, #2
 800287a:	e0d4      	b.n	8002a26 <HAL_I2C_Master_Receive+0x1da>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002884:	f7ff fb9c 	bl	8001fc0 <HAL_GetTick>
 8002888:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	2319      	movs	r3, #25
 8002890:	2201      	movs	r2, #1
 8002892:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fa06 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e0bf      	b.n	8002a26 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2222      	movs	r2, #34	; 0x22
 80028aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2210      	movs	r2, #16
 80028b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	893a      	ldrh	r2, [r7, #8]
 80028c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2bff      	cmp	r3, #255	; 0xff
 80028d6:	d90e      	bls.n	80028f6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	22ff      	movs	r2, #255	; 0xff
 80028dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	8979      	ldrh	r1, [r7, #10]
 80028e6:	4b52      	ldr	r3, [pc, #328]	; (8002a30 <HAL_I2C_Master_Receive+0x1e4>)
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fb68 	bl	8002fc4 <I2C_TransferConfig>
 80028f4:	e06d      	b.n	80029d2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002904:	b2da      	uxtb	r2, r3
 8002906:	8979      	ldrh	r1, [r7, #10]
 8002908:	4b49      	ldr	r3, [pc, #292]	; (8002a30 <HAL_I2C_Master_Receive+0x1e4>)
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 fb57 	bl	8002fc4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002916:	e05c      	b.n	80029d2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	6a39      	ldr	r1, [r7, #32]
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 fa7f 	bl	8002e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e07c      	b.n	8002a26 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002962:	b29b      	uxth	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d034      	beq.n	80029d2 <HAL_I2C_Master_Receive+0x186>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296c:	2b00      	cmp	r3, #0
 800296e:	d130      	bne.n	80029d2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	2200      	movs	r2, #0
 8002978:	2180      	movs	r1, #128	; 0x80
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 f994 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e04d      	b.n	8002a26 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	2bff      	cmp	r3, #255	; 0xff
 8002992:	d90e      	bls.n	80029b2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	22ff      	movs	r2, #255	; 0xff
 8002998:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	8979      	ldrh	r1, [r7, #10]
 80029a2:	2300      	movs	r3, #0
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fb0a 	bl	8002fc4 <I2C_TransferConfig>
 80029b0:	e00f      	b.n	80029d2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	8979      	ldrh	r1, [r7, #10]
 80029c4:	2300      	movs	r3, #0
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 faf9 	bl	8002fc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d19d      	bne.n	8002918 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	6a39      	ldr	r1, [r7, #32]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f9e1 	bl	8002da8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e01a      	b.n	8002a26 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2220      	movs	r2, #32
 80029f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6859      	ldr	r1, [r3, #4]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <HAL_I2C_Master_Receive+0x1e8>)
 8002a04:	400b      	ands	r3, r1
 8002a06:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	e000      	b.n	8002a26 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002a24:	2302      	movs	r3, #2
  }
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	80002400 	.word	0x80002400
 8002a34:	fe00e800 	.word	0xfe00e800

08002a38 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	460b      	mov	r3, r1
 8002a46:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	f040 80ef 	bne.w	8002c38 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a68:	d101      	bne.n	8002a6e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e0e5      	b.n	8002c3a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_I2C_IsDeviceReady+0x44>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e0de      	b.n	8002c3a <HAL_I2C_IsDeviceReady+0x202>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2224      	movs	r2, #36	; 0x24
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d105      	bne.n	8002aa6 <HAL_I2C_IsDeviceReady+0x6e>
 8002a9a:	897b      	ldrh	r3, [r7, #10]
 8002a9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002aa0:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <HAL_I2C_IsDeviceReady+0x20c>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	e004      	b.n	8002ab0 <HAL_I2C_IsDeviceReady+0x78>
 8002aa6:	897b      	ldrh	r3, [r7, #10]
 8002aa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aac:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002ab6:	f7ff fa83 	bl	8001fc0 <HAL_GetTick>
 8002aba:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	bf0c      	ite	eq
 8002aca:	2301      	moveq	r3, #1
 8002acc:	2300      	movne	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b10      	cmp	r3, #16
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002ae8:	e034      	b.n	8002b54 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d01a      	beq.n	8002b28 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002af2:	f7ff fa65 	bl	8001fc0 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d302      	bcc.n	8002b08 <HAL_I2C_IsDeviceReady+0xd0>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10f      	bne.n	8002b28 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b14:	f043 0220 	orr.w	r2, r3, #32
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e088      	b.n	8002c3a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	bf0c      	ite	eq
 8002b36:	2301      	moveq	r3, #1
 8002b38:	2300      	movne	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0310 	and.w	r3, r3, #16
 8002b48:	2b10      	cmp	r3, #16
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002b54:	7ffb      	ldrb	r3, [r7, #31]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <HAL_I2C_IsDeviceReady+0x128>
 8002b5a:	7fbb      	ldrb	r3, [r7, #30]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0c4      	beq.n	8002aea <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	d01a      	beq.n	8002ba4 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2200      	movs	r2, #0
 8002b76:	2120      	movs	r1, #32
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f895 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e058      	b.n	8002c3a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e04a      	b.n	8002c3a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2200      	movs	r2, #0
 8002bac:	2120      	movs	r1, #32
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 f87a 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e03d      	b.n	8002c3a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2210      	movs	r2, #16
 8002bc4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d118      	bne.n	8002c08 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002be4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2200      	movs	r2, #0
 8002bee:	2120      	movs	r1, #32
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f859 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e01c      	b.n	8002c3a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2220      	movs	r2, #32
 8002c06:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	f63f af3d 	bhi.w	8002a92 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
  }
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	02002000 	.word	0x02002000

08002c48 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d103      	bne.n	8002c7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d007      	beq.n	8002c9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	619a      	str	r2, [r3, #24]
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cb8:	e022      	b.n	8002d00 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d01e      	beq.n	8002d00 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc2:	f7ff f97d 	bl	8001fc0 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d302      	bcc.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d113      	bne.n	8002d00 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	f043 0220 	orr.w	r2, r3, #32
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e00f      	b.n	8002d20 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d0cd      	beq.n	8002cba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d34:	e02c      	b.n	8002d90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f8dc 	bl	8002ef8 <I2C_IsAcknowledgeFailed>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e02a      	b.n	8002da0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d50:	d01e      	beq.n	8002d90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d52:	f7ff f935 	bl	8001fc0 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d302      	bcc.n	8002d68 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d113      	bne.n	8002d90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6c:	f043 0220 	orr.w	r2, r3, #32
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e007      	b.n	8002da0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d1cb      	bne.n	8002d36 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002db4:	e028      	b.n	8002e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f89c 	bl	8002ef8 <I2C_IsAcknowledgeFailed>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e026      	b.n	8002e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dca:	f7ff f8f9 	bl	8001fc0 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d302      	bcc.n	8002de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d113      	bne.n	8002e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de4:	f043 0220 	orr.w	r2, r3, #32
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e007      	b.n	8002e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d1cf      	bne.n	8002db6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e2c:	e055      	b.n	8002eda <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f860 	bl	8002ef8 <I2C_IsAcknowledgeFailed>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e053      	b.n	8002eea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d129      	bne.n	8002ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d105      	bne.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	e03f      	b.n	8002eea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002e7e:	400b      	ands	r3, r1
 8002e80:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e022      	b.n	8002eea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea4:	f7ff f88c 	bl	8001fc0 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d302      	bcc.n	8002eba <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10f      	bne.n	8002eda <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	f043 0220 	orr.w	r2, r3, #32
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e007      	b.n	8002eea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d1a2      	bne.n	8002e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	fe00e800 	.word	0xfe00e800

08002ef8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d151      	bne.n	8002fb6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f12:	e022      	b.n	8002f5a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1a:	d01e      	beq.n	8002f5a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1c:	f7ff f850 	bl	8001fc0 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d302      	bcc.n	8002f32 <I2C_IsAcknowledgeFailed+0x3a>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d113      	bne.n	8002f5a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	f043 0220 	orr.w	r2, r3, #32
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e02e      	b.n	8002fb8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d1d5      	bne.n	8002f14 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2210      	movs	r2, #16
 8002f6e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2220      	movs	r2, #32
 8002f76:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f7ff fe71 	bl	8002c60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6859      	ldr	r1, [r3, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <I2C_IsAcknowledgeFailed+0xc8>)
 8002f8a:	400b      	ands	r3, r1
 8002f8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	f043 0204 	orr.w	r2, r3, #4
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	fe00e800 	.word	0xfe00e800

08002fc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	607b      	str	r3, [r7, #4]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	817b      	strh	r3, [r7, #10]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	0d5b      	lsrs	r3, r3, #21
 8002fe0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002fe4:	4b0d      	ldr	r3, [pc, #52]	; (800301c <I2C_TransferConfig+0x58>)
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	ea02 0103 	and.w	r1, r2, r3
 8002fee:	897b      	ldrh	r3, [r7, #10]
 8002ff0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ff4:	7a7b      	ldrb	r3, [r7, #9]
 8002ff6:	041b      	lsls	r3, r3, #16
 8002ff8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	431a      	orrs	r2, r3
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	431a      	orrs	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	03ff63ff 	.word	0x03ff63ff

08003020 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b20      	cmp	r3, #32
 8003034:	d138      	bne.n	80030a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003040:	2302      	movs	r3, #2
 8003042:	e032      	b.n	80030aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2224      	movs	r2, #36	; 0x24
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003072:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6819      	ldr	r1, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e000      	b.n	80030aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b085      	sub	sp, #20
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d139      	bne.n	8003140 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e033      	b.n	8003142 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2224      	movs	r2, #36	; 0x24
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0201 	bic.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003108:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	e000      	b.n	8003142 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003140:	2302      	movs	r3, #2
  }
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	4b23      	ldr	r3, [pc, #140]	; (80031e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	4a22      	ldr	r2, [pc, #136]	; (80031e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003164:	6413      	str	r3, [r2, #64]	; 0x40
 8003166:	4b20      	ldr	r3, [pc, #128]	; (80031e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003172:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1d      	ldr	r2, [pc, #116]	; (80031ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800317e:	f7fe ff1f 	bl	8001fc0 <HAL_GetTick>
 8003182:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003184:	e009      	b.n	800319a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003186:	f7fe ff1b 	bl	8001fc0 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003194:	d901      	bls.n	800319a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e022      	b.n	80031e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800319a:	4b14      	ldr	r3, [pc, #80]	; (80031ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a6:	d1ee      	bne.n	8003186 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80031a8:	4b10      	ldr	r3, [pc, #64]	; (80031ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0f      	ldr	r2, [pc, #60]	; (80031ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80031ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031b4:	f7fe ff04 	bl	8001fc0 <HAL_GetTick>
 80031b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031ba:	e009      	b.n	80031d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031bc:	f7fe ff00 	bl	8001fc0 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ca:	d901      	bls.n	80031d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e007      	b.n	80031e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031dc:	d1ee      	bne.n	80031bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40007000 	.word	0x40007000

080031f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031f8:	2300      	movs	r3, #0
 80031fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e29b      	b.n	800373e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 8087 	beq.w	8003322 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003214:	4b96      	ldr	r3, [pc, #600]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b04      	cmp	r3, #4
 800321e:	d00c      	beq.n	800323a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003220:	4b93      	ldr	r3, [pc, #588]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 030c 	and.w	r3, r3, #12
 8003228:	2b08      	cmp	r3, #8
 800322a:	d112      	bne.n	8003252 <HAL_RCC_OscConfig+0x62>
 800322c:	4b90      	ldr	r3, [pc, #576]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003234:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003238:	d10b      	bne.n	8003252 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323a:	4b8d      	ldr	r3, [pc, #564]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d06c      	beq.n	8003320 <HAL_RCC_OscConfig+0x130>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d168      	bne.n	8003320 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e275      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800325a:	d106      	bne.n	800326a <HAL_RCC_OscConfig+0x7a>
 800325c:	4b84      	ldr	r3, [pc, #528]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a83      	ldr	r2, [pc, #524]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	e02e      	b.n	80032c8 <HAL_RCC_OscConfig+0xd8>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10c      	bne.n	800328c <HAL_RCC_OscConfig+0x9c>
 8003272:	4b7f      	ldr	r3, [pc, #508]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a7e      	ldr	r2, [pc, #504]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	4b7c      	ldr	r3, [pc, #496]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a7b      	ldr	r2, [pc, #492]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003284:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e01d      	b.n	80032c8 <HAL_RCC_OscConfig+0xd8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003294:	d10c      	bne.n	80032b0 <HAL_RCC_OscConfig+0xc0>
 8003296:	4b76      	ldr	r3, [pc, #472]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a75      	ldr	r2, [pc, #468]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800329c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4b73      	ldr	r3, [pc, #460]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a72      	ldr	r2, [pc, #456]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e00b      	b.n	80032c8 <HAL_RCC_OscConfig+0xd8>
 80032b0:	4b6f      	ldr	r3, [pc, #444]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a6e      	ldr	r2, [pc, #440]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4b6c      	ldr	r3, [pc, #432]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a6b      	ldr	r2, [pc, #428]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d013      	beq.n	80032f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe fe76 	bl	8001fc0 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d8:	f7fe fe72 	bl	8001fc0 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e229      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	4b61      	ldr	r3, [pc, #388]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0xe8>
 80032f6:	e014      	b.n	8003322 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f8:	f7fe fe62 	bl	8001fc0 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003300:	f7fe fe5e 	bl	8001fc0 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b64      	cmp	r3, #100	; 0x64
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e215      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003312:	4b57      	ldr	r3, [pc, #348]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x110>
 800331e:	e000      	b.n	8003322 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d069      	beq.n	8003402 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800332e:	4b50      	ldr	r3, [pc, #320]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00b      	beq.n	8003352 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800333a:	4b4d      	ldr	r3, [pc, #308]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b08      	cmp	r3, #8
 8003344:	d11c      	bne.n	8003380 <HAL_RCC_OscConfig+0x190>
 8003346:	4b4a      	ldr	r3, [pc, #296]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d116      	bne.n	8003380 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003352:	4b47      	ldr	r3, [pc, #284]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d005      	beq.n	800336a <HAL_RCC_OscConfig+0x17a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d001      	beq.n	800336a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e1e9      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336a:	4b41      	ldr	r3, [pc, #260]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	493d      	ldr	r1, [pc, #244]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800337a:	4313      	orrs	r3, r2
 800337c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337e:	e040      	b.n	8003402 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d023      	beq.n	80033d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003388:	4b39      	ldr	r3, [pc, #228]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a38      	ldr	r2, [pc, #224]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fe fe14 	bl	8001fc0 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339c:	f7fe fe10 	bl	8001fc0 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e1c7      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ae:	4b30      	ldr	r3, [pc, #192]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ba:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4929      	ldr	r1, [pc, #164]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]
 80033ce:	e018      	b.n	8003402 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d0:	4b27      	ldr	r3, [pc, #156]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a26      	ldr	r2, [pc, #152]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80033d6:	f023 0301 	bic.w	r3, r3, #1
 80033da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fe fdf0 	bl	8001fc0 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e4:	f7fe fdec 	bl	8001fc0 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e1a3      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f6:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d038      	beq.n	8003480 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d019      	beq.n	800344a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003416:	4b16      	ldr	r3, [pc, #88]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341a:	4a15      	ldr	r2, [pc, #84]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003422:	f7fe fdcd 	bl	8001fc0 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800342a:	f7fe fdc9 	bl	8001fc0 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e180      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800343e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x23a>
 8003448:	e01a      	b.n	8003480 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800344a:	4b09      	ldr	r3, [pc, #36]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 800344c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344e:	4a08      	ldr	r2, [pc, #32]	; (8003470 <HAL_RCC_OscConfig+0x280>)
 8003450:	f023 0301 	bic.w	r3, r3, #1
 8003454:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003456:	f7fe fdb3 	bl	8001fc0 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345c:	e00a      	b.n	8003474 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800345e:	f7fe fdaf 	bl	8001fc0 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d903      	bls.n	8003474 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e166      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
 8003470:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003474:	4b92      	ldr	r3, [pc, #584]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1ee      	bne.n	800345e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80a4 	beq.w	80035d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348e:	4b8c      	ldr	r3, [pc, #560]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10d      	bne.n	80034b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800349a:	4b89      	ldr	r3, [pc, #548]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	4a88      	ldr	r2, [pc, #544]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80034a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a4:	6413      	str	r3, [r2, #64]	; 0x40
 80034a6:	4b86      	ldr	r3, [pc, #536]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034b2:	2301      	movs	r3, #1
 80034b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b6:	4b83      	ldr	r3, [pc, #524]	; (80036c4 <HAL_RCC_OscConfig+0x4d4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d118      	bne.n	80034f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80034c2:	4b80      	ldr	r3, [pc, #512]	; (80036c4 <HAL_RCC_OscConfig+0x4d4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a7f      	ldr	r2, [pc, #508]	; (80036c4 <HAL_RCC_OscConfig+0x4d4>)
 80034c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ce:	f7fe fd77 	bl	8001fc0 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d6:	f7fe fd73 	bl	8001fc0 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b64      	cmp	r3, #100	; 0x64
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e12a      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034e8:	4b76      	ldr	r3, [pc, #472]	; (80036c4 <HAL_RCC_OscConfig+0x4d4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d106      	bne.n	800350a <HAL_RCC_OscConfig+0x31a>
 80034fc:	4b70      	ldr	r3, [pc, #448]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	4a6f      	ldr	r2, [pc, #444]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	6713      	str	r3, [r2, #112]	; 0x70
 8003508:	e02d      	b.n	8003566 <HAL_RCC_OscConfig+0x376>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10c      	bne.n	800352c <HAL_RCC_OscConfig+0x33c>
 8003512:	4b6b      	ldr	r3, [pc, #428]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	4a6a      	ldr	r2, [pc, #424]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	6713      	str	r3, [r2, #112]	; 0x70
 800351e:	4b68      	ldr	r3, [pc, #416]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	4a67      	ldr	r2, [pc, #412]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003524:	f023 0304 	bic.w	r3, r3, #4
 8003528:	6713      	str	r3, [r2, #112]	; 0x70
 800352a:	e01c      	b.n	8003566 <HAL_RCC_OscConfig+0x376>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b05      	cmp	r3, #5
 8003532:	d10c      	bne.n	800354e <HAL_RCC_OscConfig+0x35e>
 8003534:	4b62      	ldr	r3, [pc, #392]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	4a61      	ldr	r2, [pc, #388]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 800353a:	f043 0304 	orr.w	r3, r3, #4
 800353e:	6713      	str	r3, [r2, #112]	; 0x70
 8003540:	4b5f      	ldr	r3, [pc, #380]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	4a5e      	ldr	r2, [pc, #376]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6713      	str	r3, [r2, #112]	; 0x70
 800354c:	e00b      	b.n	8003566 <HAL_RCC_OscConfig+0x376>
 800354e:	4b5c      	ldr	r3, [pc, #368]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	4a5b      	ldr	r2, [pc, #364]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	6713      	str	r3, [r2, #112]	; 0x70
 800355a:	4b59      	ldr	r3, [pc, #356]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	4a58      	ldr	r2, [pc, #352]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003560:	f023 0304 	bic.w	r3, r3, #4
 8003564:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d015      	beq.n	800359a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356e:	f7fe fd27 	bl	8001fc0 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003574:	e00a      	b.n	800358c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003576:	f7fe fd23 	bl	8001fc0 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f241 3288 	movw	r2, #5000	; 0x1388
 8003584:	4293      	cmp	r3, r2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e0d8      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358c:	4b4c      	ldr	r3, [pc, #304]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0ee      	beq.n	8003576 <HAL_RCC_OscConfig+0x386>
 8003598:	e014      	b.n	80035c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359a:	f7fe fd11 	bl	8001fc0 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a2:	f7fe fd0d 	bl	8001fc0 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e0c2      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b8:	4b41      	ldr	r3, [pc, #260]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1ee      	bne.n	80035a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d105      	bne.n	80035d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ca:	4b3d      	ldr	r3, [pc, #244]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	4a3c      	ldr	r2, [pc, #240]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80035d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80ae 	beq.w	800373c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035e0:	4b37      	ldr	r3, [pc, #220]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 030c 	and.w	r3, r3, #12
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d06d      	beq.n	80036c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d14b      	bne.n	800368c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f4:	4b32      	ldr	r3, [pc, #200]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a31      	ldr	r2, [pc, #196]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80035fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fe fcde 	bl	8001fc0 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003608:	f7fe fcda 	bl	8001fc0 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e091      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361a:	4b29      	ldr	r3, [pc, #164]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69da      	ldr	r2, [r3, #28]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	019b      	lsls	r3, r3, #6
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	3b01      	subs	r3, #1
 8003640:	041b      	lsls	r3, r3, #16
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	061b      	lsls	r3, r3, #24
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	071b      	lsls	r3, r3, #28
 8003652:	491b      	ldr	r1, [pc, #108]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003654:	4313      	orrs	r3, r2
 8003656:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003658:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a18      	ldr	r2, [pc, #96]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 800365e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fe fcac 	bl	8001fc0 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366c:	f7fe fca8 	bl	8001fc0 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e05f      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367e:	4b10      	ldr	r3, [pc, #64]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0x47c>
 800368a:	e057      	b.n	800373c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368c:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a0b      	ldr	r2, [pc, #44]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 8003692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fe fc92 	bl	8001fc0 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fe fc8e 	bl	8001fc0 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e045      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b2:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <HAL_RCC_OscConfig+0x4d0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x4b0>
 80036be:	e03d      	b.n	800373c <HAL_RCC_OscConfig+0x54c>
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80036c8:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <HAL_RCC_OscConfig+0x558>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d030      	beq.n	8003738 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d129      	bne.n	8003738 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d122      	bne.n	8003738 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036f8:	4013      	ands	r3, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003700:	4293      	cmp	r3, r2
 8003702:	d119      	bne.n	8003738 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	085b      	lsrs	r3, r3, #1
 8003710:	3b01      	subs	r3, #1
 8003712:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003714:	429a      	cmp	r2, r3
 8003716:	d10f      	bne.n	8003738 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d107      	bne.n	8003738 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800

0800374c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0d0      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003764:	4b6a      	ldr	r3, [pc, #424]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d910      	bls.n	8003794 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003772:	4b67      	ldr	r3, [pc, #412]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 020f 	bic.w	r2, r3, #15
 800377a:	4965      	ldr	r1, [pc, #404]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	4313      	orrs	r3, r2
 8003780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003782:	4b63      	ldr	r3, [pc, #396]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0b8      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d020      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037ac:	4b59      	ldr	r3, [pc, #356]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4a58      	ldr	r2, [pc, #352]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80037b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037c4:	4b53      	ldr	r3, [pc, #332]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	4a52      	ldr	r2, [pc, #328]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80037ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d0:	4b50      	ldr	r3, [pc, #320]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	494d      	ldr	r1, [pc, #308]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d040      	beq.n	8003870 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f6:	4b47      	ldr	r3, [pc, #284]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d115      	bne.n	800382e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e07f      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d107      	bne.n	800381e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380e:	4b41      	ldr	r3, [pc, #260]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e073      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381e:	4b3d      	ldr	r3, [pc, #244]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e06b      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800382e:	4b39      	ldr	r3, [pc, #228]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f023 0203 	bic.w	r2, r3, #3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4936      	ldr	r1, [pc, #216]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 800383c:	4313      	orrs	r3, r2
 800383e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003840:	f7fe fbbe 	bl	8001fc0 <HAL_GetTick>
 8003844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	e00a      	b.n	800385e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003848:	f7fe fbba 	bl	8001fc0 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f241 3288 	movw	r2, #5000	; 0x1388
 8003856:	4293      	cmp	r3, r2
 8003858:	d901      	bls.n	800385e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e053      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385e:	4b2d      	ldr	r3, [pc, #180]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 020c 	and.w	r2, r3, #12
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	429a      	cmp	r2, r3
 800386e:	d1eb      	bne.n	8003848 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003870:	4b27      	ldr	r3, [pc, #156]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d210      	bcs.n	80038a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387e:	4b24      	ldr	r3, [pc, #144]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 020f 	bic.w	r2, r3, #15
 8003886:	4922      	ldr	r1, [pc, #136]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388e:	4b20      	ldr	r3, [pc, #128]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e032      	b.n	8003906 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ac:	4b19      	ldr	r3, [pc, #100]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4916      	ldr	r1, [pc, #88]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038ca:	4b12      	ldr	r3, [pc, #72]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	490e      	ldr	r1, [pc, #56]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038de:	f000 f821 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 80038e2:	4602      	mov	r2, r0
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	490a      	ldr	r1, [pc, #40]	; (8003918 <HAL_RCC_ClockConfig+0x1cc>)
 80038f0:	5ccb      	ldrb	r3, [r1, r3]
 80038f2:	fa22 f303 	lsr.w	r3, r2, r3
 80038f6:	4a09      	ldr	r2, [pc, #36]	; (800391c <HAL_RCC_ClockConfig+0x1d0>)
 80038f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <HAL_RCC_ClockConfig+0x1d4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe fb1a 	bl	8001f38 <HAL_InitTick>

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40023c00 	.word	0x40023c00
 8003914:	40023800 	.word	0x40023800
 8003918:	08008164 	.word	0x08008164
 800391c:	20000000 	.word	0x20000000
 8003920:	20000004 	.word	0x20000004

08003924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003924:	b5b0      	push	{r4, r5, r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800392a:	2100      	movs	r1, #0
 800392c:	6079      	str	r1, [r7, #4]
 800392e:	2100      	movs	r1, #0
 8003930:	60f9      	str	r1, [r7, #12]
 8003932:	2100      	movs	r1, #0
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003936:	2100      	movs	r1, #0
 8003938:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800393a:	4952      	ldr	r1, [pc, #328]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x160>)
 800393c:	6889      	ldr	r1, [r1, #8]
 800393e:	f001 010c 	and.w	r1, r1, #12
 8003942:	2908      	cmp	r1, #8
 8003944:	d00d      	beq.n	8003962 <HAL_RCC_GetSysClockFreq+0x3e>
 8003946:	2908      	cmp	r1, #8
 8003948:	f200 8094 	bhi.w	8003a74 <HAL_RCC_GetSysClockFreq+0x150>
 800394c:	2900      	cmp	r1, #0
 800394e:	d002      	beq.n	8003956 <HAL_RCC_GetSysClockFreq+0x32>
 8003950:	2904      	cmp	r1, #4
 8003952:	d003      	beq.n	800395c <HAL_RCC_GetSysClockFreq+0x38>
 8003954:	e08e      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003956:	4b4c      	ldr	r3, [pc, #304]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x164>)
 8003958:	60bb      	str	r3, [r7, #8]
      break;
 800395a:	e08e      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800395c:	4b4b      	ldr	r3, [pc, #300]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x168>)
 800395e:	60bb      	str	r3, [r7, #8]
      break;
 8003960:	e08b      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003962:	4948      	ldr	r1, [pc, #288]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x160>)
 8003964:	6849      	ldr	r1, [r1, #4]
 8003966:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800396a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800396c:	4945      	ldr	r1, [pc, #276]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x160>)
 800396e:	6849      	ldr	r1, [r1, #4]
 8003970:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003974:	2900      	cmp	r1, #0
 8003976:	d024      	beq.n	80039c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003978:	4942      	ldr	r1, [pc, #264]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x160>)
 800397a:	6849      	ldr	r1, [r1, #4]
 800397c:	0989      	lsrs	r1, r1, #6
 800397e:	4608      	mov	r0, r1
 8003980:	f04f 0100 	mov.w	r1, #0
 8003984:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003988:	f04f 0500 	mov.w	r5, #0
 800398c:	ea00 0204 	and.w	r2, r0, r4
 8003990:	ea01 0305 	and.w	r3, r1, r5
 8003994:	493d      	ldr	r1, [pc, #244]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x168>)
 8003996:	fb01 f003 	mul.w	r0, r1, r3
 800399a:	2100      	movs	r1, #0
 800399c:	fb01 f102 	mul.w	r1, r1, r2
 80039a0:	1844      	adds	r4, r0, r1
 80039a2:	493a      	ldr	r1, [pc, #232]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x168>)
 80039a4:	fba2 0101 	umull	r0, r1, r2, r1
 80039a8:	1863      	adds	r3, r4, r1
 80039aa:	4619      	mov	r1, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	461a      	mov	r2, r3
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	f7fc fc9c 	bl	80002f0 <__aeabi_uldivmod>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4613      	mov	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	e04a      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c2:	4b30      	ldr	r3, [pc, #192]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x160>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	099b      	lsrs	r3, r3, #6
 80039c8:	461a      	mov	r2, r3
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039d2:	f04f 0100 	mov.w	r1, #0
 80039d6:	ea02 0400 	and.w	r4, r2, r0
 80039da:	ea03 0501 	and.w	r5, r3, r1
 80039de:	4620      	mov	r0, r4
 80039e0:	4629      	mov	r1, r5
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	014b      	lsls	r3, r1, #5
 80039ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039f0:	0142      	lsls	r2, r0, #5
 80039f2:	4610      	mov	r0, r2
 80039f4:	4619      	mov	r1, r3
 80039f6:	1b00      	subs	r0, r0, r4
 80039f8:	eb61 0105 	sbc.w	r1, r1, r5
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	018b      	lsls	r3, r1, #6
 8003a06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a0a:	0182      	lsls	r2, r0, #6
 8003a0c:	1a12      	subs	r2, r2, r0
 8003a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a12:	f04f 0000 	mov.w	r0, #0
 8003a16:	f04f 0100 	mov.w	r1, #0
 8003a1a:	00d9      	lsls	r1, r3, #3
 8003a1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a20:	00d0      	lsls	r0, r2, #3
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	1912      	adds	r2, r2, r4
 8003a28:	eb45 0303 	adc.w	r3, r5, r3
 8003a2c:	f04f 0000 	mov.w	r0, #0
 8003a30:	f04f 0100 	mov.w	r1, #0
 8003a34:	0299      	lsls	r1, r3, #10
 8003a36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a3a:	0290      	lsls	r0, r2, #10
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4610      	mov	r0, r2
 8003a42:	4619      	mov	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	461a      	mov	r2, r3
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	f7fc fc50 	bl	80002f0 <__aeabi_uldivmod>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4613      	mov	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	3301      	adds	r3, #1
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	60bb      	str	r3, [r7, #8]
      break;
 8003a72:	e002      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a74:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a76:	60bb      	str	r3, [r7, #8]
      break;
 8003a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bdb0      	pop	{r4, r5, r7, pc}
 8003a84:	40023800 	.word	0x40023800
 8003a88:	00f42400 	.word	0x00f42400
 8003a8c:	017d7840 	.word	0x017d7840

08003a90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a94:	4b03      	ldr	r3, [pc, #12]	; (8003aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a96:	681b      	ldr	r3, [r3, #0]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000000 	.word	0x20000000

08003aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aac:	f7ff fff0 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	0a9b      	lsrs	r3, r3, #10
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	4903      	ldr	r1, [pc, #12]	; (8003acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003abe:	5ccb      	ldrb	r3, [r1, r3]
 8003ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	08008174 	.word	0x08008174

08003ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ad4:	f7ff ffdc 	bl	8003a90 <HAL_RCC_GetHCLKFreq>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	0b5b      	lsrs	r3, r3, #13
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	4903      	ldr	r1, [pc, #12]	; (8003af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae6:	5ccb      	ldrb	r3, [r1, r3]
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40023800 	.word	0x40023800
 8003af4:	08008174 	.word	0x08008174

08003af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d012      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b20:	4b69      	ldr	r3, [pc, #420]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4a68      	ldr	r2, [pc, #416]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b2a:	6093      	str	r3, [r2, #8]
 8003b2c:	4b66      	ldr	r3, [pc, #408]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b34:	4964      	ldr	r1, [pc, #400]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b42:	2301      	movs	r3, #1
 8003b44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d017      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b52:	4b5d      	ldr	r3, [pc, #372]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b60:	4959      	ldr	r1, [pc, #356]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b70:	d101      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b72:	2301      	movs	r3, #1
 8003b74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d017      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b8e:	4b4e      	ldr	r3, [pc, #312]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	494a      	ldr	r1, [pc, #296]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 808b 	beq.w	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bdc:	4b3a      	ldr	r3, [pc, #232]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	4a39      	ldr	r2, [pc, #228]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be6:	6413      	str	r3, [r2, #64]	; 0x40
 8003be8:	4b37      	ldr	r3, [pc, #220]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bf4:	4b35      	ldr	r3, [pc, #212]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a34      	ldr	r2, [pc, #208]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c00:	f7fe f9de 	bl	8001fc0 <HAL_GetTick>
 8003c04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c08:	f7fe f9da 	bl	8001fc0 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	; 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e38f      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c1a:	4b2c      	ldr	r3, [pc, #176]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c26:	4b28      	ldr	r3, [pc, #160]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d035      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d02e      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c44:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c4e:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c58:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c5a:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5e:	4a1a      	ldr	r2, [pc, #104]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c66:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c6c:	4b16      	ldr	r3, [pc, #88]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d114      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fe f9a2 	bl	8001fc0 <HAL_GetTick>
 8003c7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c80:	f7fe f99e 	bl	8001fc0 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e351      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0ee      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003caa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cae:	d111      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cbc:	4b04      	ldr	r3, [pc, #16]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cbe:	400b      	ands	r3, r1
 8003cc0:	4901      	ldr	r1, [pc, #4]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	608b      	str	r3, [r1, #8]
 8003cc6:	e00b      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40007000 	.word	0x40007000
 8003cd0:	0ffffcff 	.word	0x0ffffcff
 8003cd4:	4bb3      	ldr	r3, [pc, #716]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	4ab2      	ldr	r2, [pc, #712]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cde:	6093      	str	r3, [r2, #8]
 8003ce0:	4bb0      	ldr	r3, [pc, #704]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ce2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cec:	49ad      	ldr	r1, [pc, #692]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d010      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cfe:	4ba9      	ldr	r3, [pc, #676]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d04:	4aa7      	ldr	r2, [pc, #668]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d0e:	4ba5      	ldr	r3, [pc, #660]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	49a2      	ldr	r1, [pc, #648]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d2c:	4b9d      	ldr	r3, [pc, #628]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d3a:	499a      	ldr	r1, [pc, #616]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d4e:	4b95      	ldr	r3, [pc, #596]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d5c:	4991      	ldr	r1, [pc, #580]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d70:	4b8c      	ldr	r3, [pc, #560]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d7e:	4989      	ldr	r1, [pc, #548]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d92:	4b84      	ldr	r3, [pc, #528]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da0:	4980      	ldr	r1, [pc, #512]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003db4:	4b7b      	ldr	r3, [pc, #492]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dba:	f023 0203 	bic.w	r2, r3, #3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	4978      	ldr	r1, [pc, #480]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dd6:	4b73      	ldr	r3, [pc, #460]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	f023 020c 	bic.w	r2, r3, #12
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de4:	496f      	ldr	r1, [pc, #444]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003df8:	4b6a      	ldr	r3, [pc, #424]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e06:	4967      	ldr	r1, [pc, #412]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e1a:	4b62      	ldr	r3, [pc, #392]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e20:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e28:	495e      	ldr	r1, [pc, #376]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e3c:	4b59      	ldr	r3, [pc, #356]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	4956      	ldr	r1, [pc, #344]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e5e:	4b51      	ldr	r3, [pc, #324]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	494d      	ldr	r1, [pc, #308]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e80:	4b48      	ldr	r3, [pc, #288]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8e:	4945      	ldr	r1, [pc, #276]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ea2:	4b40      	ldr	r3, [pc, #256]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb0:	493c      	ldr	r1, [pc, #240]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ec4:	4b37      	ldr	r3, [pc, #220]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ed2:	4934      	ldr	r1, [pc, #208]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d011      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ee6:	4b2f      	ldr	r3, [pc, #188]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ef4:	492b      	ldr	r1, [pc, #172]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f04:	d101      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f06:	2301      	movs	r3, #1
 8003f08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f16:	2301      	movs	r3, #1
 8003f18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f26:	4b1f      	ldr	r3, [pc, #124]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f34:	491b      	ldr	r1, [pc, #108]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00b      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f48:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f58:	4912      	ldr	r1, [pc, #72]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00b      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f6c:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f72:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f7c:	4909      	ldr	r1, [pc, #36]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00f      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f90:	4b04      	ldr	r3, [pc, #16]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa0:	e002      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003fa2:	bf00      	nop
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	4986      	ldr	r1, [pc, #536]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00b      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003fbc:	4b81      	ldr	r3, [pc, #516]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fc2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fcc:	497d      	ldr	r1, [pc, #500]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d006      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 80d6 	beq.w	8004194 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fe8:	4b76      	ldr	r3, [pc, #472]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a75      	ldr	r2, [pc, #468]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff4:	f7fd ffe4 	bl	8001fc0 <HAL_GetTick>
 8003ff8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ffc:	f7fd ffe0 	bl	8001fc0 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d901      	bls.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e195      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800400e:	4b6d      	ldr	r3, [pc, #436]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d021      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402a:	2b00      	cmp	r3, #0
 800402c:	d11d      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800402e:	4b65      	ldr	r3, [pc, #404]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004034:	0c1b      	lsrs	r3, r3, #16
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800403c:	4b61      	ldr	r3, [pc, #388]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800403e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004042:	0e1b      	lsrs	r3, r3, #24
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	019a      	lsls	r2, r3, #6
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	041b      	lsls	r3, r3, #16
 8004054:	431a      	orrs	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	061b      	lsls	r3, r3, #24
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	071b      	lsls	r3, r3, #28
 8004062:	4958      	ldr	r1, [pc, #352]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d004      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800407e:	d00a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004088:	2b00      	cmp	r3, #0
 800408a:	d02e      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004094:	d129      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004096:	4b4b      	ldr	r3, [pc, #300]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040a4:	4b47      	ldr	r3, [pc, #284]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040aa:	0f1b      	lsrs	r3, r3, #28
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	019a      	lsls	r2, r3, #6
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	041b      	lsls	r3, r3, #16
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	061b      	lsls	r3, r3, #24
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	071b      	lsls	r3, r3, #28
 80040ca:	493e      	ldr	r1, [pc, #248]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040d2:	4b3c      	ldr	r3, [pc, #240]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d8:	f023 021f 	bic.w	r2, r3, #31
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	3b01      	subs	r3, #1
 80040e2:	4938      	ldr	r1, [pc, #224]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d01d      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040f6:	4b33      	ldr	r3, [pc, #204]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040fc:	0e1b      	lsrs	r3, r3, #24
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004104:	4b2f      	ldr	r3, [pc, #188]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800410a:	0f1b      	lsrs	r3, r3, #28
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	019a      	lsls	r2, r3, #6
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	041b      	lsls	r3, r3, #16
 800411e:	431a      	orrs	r2, r3
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	061b      	lsls	r3, r3, #24
 8004124:	431a      	orrs	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	071b      	lsls	r3, r3, #28
 800412a:	4926      	ldr	r1, [pc, #152]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d011      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	019a      	lsls	r2, r3, #6
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	061b      	lsls	r3, r3, #24
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	071b      	lsls	r3, r3, #28
 800415a:	491a      	ldr	r1, [pc, #104]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004162:	4b18      	ldr	r3, [pc, #96]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a17      	ldr	r2, [pc, #92]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004168:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800416c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800416e:	f7fd ff27 	bl	8001fc0 <HAL_GetTick>
 8004172:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004174:	e008      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004176:	f7fd ff23 	bl	8001fc0 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b64      	cmp	r3, #100	; 0x64
 8004182:	d901      	bls.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e0d8      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004188:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2b01      	cmp	r3, #1
 8004198:	f040 80ce 	bne.w	8004338 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800419c:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a08      	ldr	r2, [pc, #32]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a8:	f7fd ff0a 	bl	8001fc0 <HAL_GetTick>
 80041ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041ae:	e00b      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041b0:	f7fd ff06 	bl	8001fc0 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	; 0x64
 80041bc:	d904      	bls.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e0bb      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80041c2:	bf00      	nop
 80041c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041c8:	4b5e      	ldr	r3, [pc, #376]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041d4:	d0ec      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d02e      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d12a      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041fe:	4b51      	ldr	r3, [pc, #324]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004204:	0c1b      	lsrs	r3, r3, #16
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800420c:	4b4d      	ldr	r3, [pc, #308]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	0f1b      	lsrs	r3, r3, #28
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	019a      	lsls	r2, r3, #6
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	041b      	lsls	r3, r3, #16
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	061b      	lsls	r3, r3, #24
 800422c:	431a      	orrs	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	071b      	lsls	r3, r3, #28
 8004232:	4944      	ldr	r1, [pc, #272]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800423a:	4b42      	ldr	r3, [pc, #264]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800423c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004240:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	3b01      	subs	r3, #1
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	493d      	ldr	r1, [pc, #244]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d022      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004268:	d11d      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800426a:	4b36      	ldr	r3, [pc, #216]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004270:	0e1b      	lsrs	r3, r3, #24
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004278:	4b32      	ldr	r3, [pc, #200]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427e:	0f1b      	lsrs	r3, r3, #28
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	019a      	lsls	r2, r3, #6
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	041b      	lsls	r3, r3, #16
 8004292:	431a      	orrs	r2, r3
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	061b      	lsls	r3, r3, #24
 8004298:	431a      	orrs	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	071b      	lsls	r3, r3, #28
 800429e:	4929      	ldr	r1, [pc, #164]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d028      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042b2:	4b24      	ldr	r3, [pc, #144]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b8:	0e1b      	lsrs	r3, r3, #24
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042c0:	4b20      	ldr	r3, [pc, #128]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	0c1b      	lsrs	r3, r3, #16
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	019a      	lsls	r2, r3, #6
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	041b      	lsls	r3, r3, #16
 80042d8:	431a      	orrs	r2, r3
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	061b      	lsls	r3, r3, #24
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	071b      	lsls	r3, r3, #28
 80042e6:	4917      	ldr	r1, [pc, #92]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042ee:	4b15      	ldr	r3, [pc, #84]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	4911      	ldr	r1, [pc, #68]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004304:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a0e      	ldr	r2, [pc, #56]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800430a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800430e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004310:	f7fd fe56 	bl	8001fc0 <HAL_GetTick>
 8004314:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004316:	e008      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004318:	f7fd fe52 	bl	8001fc0 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b64      	cmp	r3, #100	; 0x64
 8004324:	d901      	bls.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e007      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800432a:	4b06      	ldr	r3, [pc, #24]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004336:	d1ef      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3720      	adds	r7, #32
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40023800 	.word	0x40023800

08004348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e040      	b.n	80043dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fd f82a 	bl	80013c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2224      	movs	r2, #36	; 0x24
 8004374:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0201 	bic.w	r2, r2, #1
 8004384:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f8c0 	bl	800450c <UART_SetConfig>
 800438c:	4603      	mov	r3, r0
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e022      	b.n	80043dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fb16 	bl	80049d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fb9d 	bl	8004b14 <UART_CheckIdleState>
 80043da:	4603      	mov	r3, r0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	4613      	mov	r3, r2
 80043f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	f040 8081 	bne.w	8004500 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <HAL_UART_Transmit+0x26>
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e079      	b.n	8004502 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_UART_Transmit+0x38>
 8004418:	2302      	movs	r3, #2
 800441a:	e072      	b.n	8004502 <HAL_UART_Transmit+0x11e>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2221      	movs	r2, #33	; 0x21
 8004430:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004432:	f7fd fdc5 	bl	8001fc0 <HAL_GetTick>
 8004436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	88fa      	ldrh	r2, [r7, #6]
 800443c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	88fa      	ldrh	r2, [r7, #6]
 8004444:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004450:	d108      	bne.n	8004464 <HAL_UART_Transmit+0x80>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d104      	bne.n	8004464 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	e003      	b.n	800446c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004468:	2300      	movs	r3, #0
 800446a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004474:	e02c      	b.n	80044d0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2200      	movs	r2, #0
 800447e:	2180      	movs	r1, #128	; 0x80
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 fb90 	bl	8004ba6 <UART_WaitOnFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e038      	b.n	8004502 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10b      	bne.n	80044ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	3302      	adds	r3, #2
 80044aa:	61bb      	str	r3, [r7, #24]
 80044ac:	e007      	b.n	80044be <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	781a      	ldrb	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	3301      	adds	r3, #1
 80044bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1cc      	bne.n	8004476 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2200      	movs	r2, #0
 80044e4:	2140      	movs	r1, #64	; 0x40
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 fb5d 	bl	8004ba6 <UART_WaitOnFlagUntilTimeout>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e005      	b.n	8004502 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2220      	movs	r2, #32
 80044fa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	e000      	b.n	8004502 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004500:	2302      	movs	r3, #2
  }
}
 8004502:	4618      	mov	r0, r3
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	4ba7      	ldr	r3, [pc, #668]	; (80047d4 <UART_SetConfig+0x2c8>)
 8004538:	4013      	ands	r3, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	6979      	ldr	r1, [r7, #20]
 8004540:	430b      	orrs	r3, r1
 8004542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	430a      	orrs	r2, r1
 800457c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a95      	ldr	r2, [pc, #596]	; (80047d8 <UART_SetConfig+0x2cc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d120      	bne.n	80045ca <UART_SetConfig+0xbe>
 8004588:	4b94      	ldr	r3, [pc, #592]	; (80047dc <UART_SetConfig+0x2d0>)
 800458a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2b03      	cmp	r3, #3
 8004594:	d816      	bhi.n	80045c4 <UART_SetConfig+0xb8>
 8004596:	a201      	add	r2, pc, #4	; (adr r2, 800459c <UART_SetConfig+0x90>)
 8004598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459c:	080045ad 	.word	0x080045ad
 80045a0:	080045b9 	.word	0x080045b9
 80045a4:	080045b3 	.word	0x080045b3
 80045a8:	080045bf 	.word	0x080045bf
 80045ac:	2301      	movs	r3, #1
 80045ae:	77fb      	strb	r3, [r7, #31]
 80045b0:	e14f      	b.n	8004852 <UART_SetConfig+0x346>
 80045b2:	2302      	movs	r3, #2
 80045b4:	77fb      	strb	r3, [r7, #31]
 80045b6:	e14c      	b.n	8004852 <UART_SetConfig+0x346>
 80045b8:	2304      	movs	r3, #4
 80045ba:	77fb      	strb	r3, [r7, #31]
 80045bc:	e149      	b.n	8004852 <UART_SetConfig+0x346>
 80045be:	2308      	movs	r3, #8
 80045c0:	77fb      	strb	r3, [r7, #31]
 80045c2:	e146      	b.n	8004852 <UART_SetConfig+0x346>
 80045c4:	2310      	movs	r3, #16
 80045c6:	77fb      	strb	r3, [r7, #31]
 80045c8:	e143      	b.n	8004852 <UART_SetConfig+0x346>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a84      	ldr	r2, [pc, #528]	; (80047e0 <UART_SetConfig+0x2d4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d132      	bne.n	800463a <UART_SetConfig+0x12e>
 80045d4:	4b81      	ldr	r3, [pc, #516]	; (80047dc <UART_SetConfig+0x2d0>)
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	2b0c      	cmp	r3, #12
 80045e0:	d828      	bhi.n	8004634 <UART_SetConfig+0x128>
 80045e2:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <UART_SetConfig+0xdc>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	0800461d 	.word	0x0800461d
 80045ec:	08004635 	.word	0x08004635
 80045f0:	08004635 	.word	0x08004635
 80045f4:	08004635 	.word	0x08004635
 80045f8:	08004629 	.word	0x08004629
 80045fc:	08004635 	.word	0x08004635
 8004600:	08004635 	.word	0x08004635
 8004604:	08004635 	.word	0x08004635
 8004608:	08004623 	.word	0x08004623
 800460c:	08004635 	.word	0x08004635
 8004610:	08004635 	.word	0x08004635
 8004614:	08004635 	.word	0x08004635
 8004618:	0800462f 	.word	0x0800462f
 800461c:	2300      	movs	r3, #0
 800461e:	77fb      	strb	r3, [r7, #31]
 8004620:	e117      	b.n	8004852 <UART_SetConfig+0x346>
 8004622:	2302      	movs	r3, #2
 8004624:	77fb      	strb	r3, [r7, #31]
 8004626:	e114      	b.n	8004852 <UART_SetConfig+0x346>
 8004628:	2304      	movs	r3, #4
 800462a:	77fb      	strb	r3, [r7, #31]
 800462c:	e111      	b.n	8004852 <UART_SetConfig+0x346>
 800462e:	2308      	movs	r3, #8
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e10e      	b.n	8004852 <UART_SetConfig+0x346>
 8004634:	2310      	movs	r3, #16
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e10b      	b.n	8004852 <UART_SetConfig+0x346>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a69      	ldr	r2, [pc, #420]	; (80047e4 <UART_SetConfig+0x2d8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d120      	bne.n	8004686 <UART_SetConfig+0x17a>
 8004644:	4b65      	ldr	r3, [pc, #404]	; (80047dc <UART_SetConfig+0x2d0>)
 8004646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800464e:	2b30      	cmp	r3, #48	; 0x30
 8004650:	d013      	beq.n	800467a <UART_SetConfig+0x16e>
 8004652:	2b30      	cmp	r3, #48	; 0x30
 8004654:	d814      	bhi.n	8004680 <UART_SetConfig+0x174>
 8004656:	2b20      	cmp	r3, #32
 8004658:	d009      	beq.n	800466e <UART_SetConfig+0x162>
 800465a:	2b20      	cmp	r3, #32
 800465c:	d810      	bhi.n	8004680 <UART_SetConfig+0x174>
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <UART_SetConfig+0x15c>
 8004662:	2b10      	cmp	r3, #16
 8004664:	d006      	beq.n	8004674 <UART_SetConfig+0x168>
 8004666:	e00b      	b.n	8004680 <UART_SetConfig+0x174>
 8004668:	2300      	movs	r3, #0
 800466a:	77fb      	strb	r3, [r7, #31]
 800466c:	e0f1      	b.n	8004852 <UART_SetConfig+0x346>
 800466e:	2302      	movs	r3, #2
 8004670:	77fb      	strb	r3, [r7, #31]
 8004672:	e0ee      	b.n	8004852 <UART_SetConfig+0x346>
 8004674:	2304      	movs	r3, #4
 8004676:	77fb      	strb	r3, [r7, #31]
 8004678:	e0eb      	b.n	8004852 <UART_SetConfig+0x346>
 800467a:	2308      	movs	r3, #8
 800467c:	77fb      	strb	r3, [r7, #31]
 800467e:	e0e8      	b.n	8004852 <UART_SetConfig+0x346>
 8004680:	2310      	movs	r3, #16
 8004682:	77fb      	strb	r3, [r7, #31]
 8004684:	e0e5      	b.n	8004852 <UART_SetConfig+0x346>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a57      	ldr	r2, [pc, #348]	; (80047e8 <UART_SetConfig+0x2dc>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d120      	bne.n	80046d2 <UART_SetConfig+0x1c6>
 8004690:	4b52      	ldr	r3, [pc, #328]	; (80047dc <UART_SetConfig+0x2d0>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004696:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800469a:	2bc0      	cmp	r3, #192	; 0xc0
 800469c:	d013      	beq.n	80046c6 <UART_SetConfig+0x1ba>
 800469e:	2bc0      	cmp	r3, #192	; 0xc0
 80046a0:	d814      	bhi.n	80046cc <UART_SetConfig+0x1c0>
 80046a2:	2b80      	cmp	r3, #128	; 0x80
 80046a4:	d009      	beq.n	80046ba <UART_SetConfig+0x1ae>
 80046a6:	2b80      	cmp	r3, #128	; 0x80
 80046a8:	d810      	bhi.n	80046cc <UART_SetConfig+0x1c0>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <UART_SetConfig+0x1a8>
 80046ae:	2b40      	cmp	r3, #64	; 0x40
 80046b0:	d006      	beq.n	80046c0 <UART_SetConfig+0x1b4>
 80046b2:	e00b      	b.n	80046cc <UART_SetConfig+0x1c0>
 80046b4:	2300      	movs	r3, #0
 80046b6:	77fb      	strb	r3, [r7, #31]
 80046b8:	e0cb      	b.n	8004852 <UART_SetConfig+0x346>
 80046ba:	2302      	movs	r3, #2
 80046bc:	77fb      	strb	r3, [r7, #31]
 80046be:	e0c8      	b.n	8004852 <UART_SetConfig+0x346>
 80046c0:	2304      	movs	r3, #4
 80046c2:	77fb      	strb	r3, [r7, #31]
 80046c4:	e0c5      	b.n	8004852 <UART_SetConfig+0x346>
 80046c6:	2308      	movs	r3, #8
 80046c8:	77fb      	strb	r3, [r7, #31]
 80046ca:	e0c2      	b.n	8004852 <UART_SetConfig+0x346>
 80046cc:	2310      	movs	r3, #16
 80046ce:	77fb      	strb	r3, [r7, #31]
 80046d0:	e0bf      	b.n	8004852 <UART_SetConfig+0x346>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a45      	ldr	r2, [pc, #276]	; (80047ec <UART_SetConfig+0x2e0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d125      	bne.n	8004728 <UART_SetConfig+0x21c>
 80046dc:	4b3f      	ldr	r3, [pc, #252]	; (80047dc <UART_SetConfig+0x2d0>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ea:	d017      	beq.n	800471c <UART_SetConfig+0x210>
 80046ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046f0:	d817      	bhi.n	8004722 <UART_SetConfig+0x216>
 80046f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f6:	d00b      	beq.n	8004710 <UART_SetConfig+0x204>
 80046f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046fc:	d811      	bhi.n	8004722 <UART_SetConfig+0x216>
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <UART_SetConfig+0x1fe>
 8004702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004706:	d006      	beq.n	8004716 <UART_SetConfig+0x20a>
 8004708:	e00b      	b.n	8004722 <UART_SetConfig+0x216>
 800470a:	2300      	movs	r3, #0
 800470c:	77fb      	strb	r3, [r7, #31]
 800470e:	e0a0      	b.n	8004852 <UART_SetConfig+0x346>
 8004710:	2302      	movs	r3, #2
 8004712:	77fb      	strb	r3, [r7, #31]
 8004714:	e09d      	b.n	8004852 <UART_SetConfig+0x346>
 8004716:	2304      	movs	r3, #4
 8004718:	77fb      	strb	r3, [r7, #31]
 800471a:	e09a      	b.n	8004852 <UART_SetConfig+0x346>
 800471c:	2308      	movs	r3, #8
 800471e:	77fb      	strb	r3, [r7, #31]
 8004720:	e097      	b.n	8004852 <UART_SetConfig+0x346>
 8004722:	2310      	movs	r3, #16
 8004724:	77fb      	strb	r3, [r7, #31]
 8004726:	e094      	b.n	8004852 <UART_SetConfig+0x346>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a30      	ldr	r2, [pc, #192]	; (80047f0 <UART_SetConfig+0x2e4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d125      	bne.n	800477e <UART_SetConfig+0x272>
 8004732:	4b2a      	ldr	r3, [pc, #168]	; (80047dc <UART_SetConfig+0x2d0>)
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004738:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800473c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004740:	d017      	beq.n	8004772 <UART_SetConfig+0x266>
 8004742:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004746:	d817      	bhi.n	8004778 <UART_SetConfig+0x26c>
 8004748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800474c:	d00b      	beq.n	8004766 <UART_SetConfig+0x25a>
 800474e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004752:	d811      	bhi.n	8004778 <UART_SetConfig+0x26c>
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <UART_SetConfig+0x254>
 8004758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475c:	d006      	beq.n	800476c <UART_SetConfig+0x260>
 800475e:	e00b      	b.n	8004778 <UART_SetConfig+0x26c>
 8004760:	2301      	movs	r3, #1
 8004762:	77fb      	strb	r3, [r7, #31]
 8004764:	e075      	b.n	8004852 <UART_SetConfig+0x346>
 8004766:	2302      	movs	r3, #2
 8004768:	77fb      	strb	r3, [r7, #31]
 800476a:	e072      	b.n	8004852 <UART_SetConfig+0x346>
 800476c:	2304      	movs	r3, #4
 800476e:	77fb      	strb	r3, [r7, #31]
 8004770:	e06f      	b.n	8004852 <UART_SetConfig+0x346>
 8004772:	2308      	movs	r3, #8
 8004774:	77fb      	strb	r3, [r7, #31]
 8004776:	e06c      	b.n	8004852 <UART_SetConfig+0x346>
 8004778:	2310      	movs	r3, #16
 800477a:	77fb      	strb	r3, [r7, #31]
 800477c:	e069      	b.n	8004852 <UART_SetConfig+0x346>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <UART_SetConfig+0x2e8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d137      	bne.n	80047f8 <UART_SetConfig+0x2ec>
 8004788:	4b14      	ldr	r3, [pc, #80]	; (80047dc <UART_SetConfig+0x2d0>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004792:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004796:	d017      	beq.n	80047c8 <UART_SetConfig+0x2bc>
 8004798:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800479c:	d817      	bhi.n	80047ce <UART_SetConfig+0x2c2>
 800479e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047a2:	d00b      	beq.n	80047bc <UART_SetConfig+0x2b0>
 80047a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047a8:	d811      	bhi.n	80047ce <UART_SetConfig+0x2c2>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <UART_SetConfig+0x2aa>
 80047ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b2:	d006      	beq.n	80047c2 <UART_SetConfig+0x2b6>
 80047b4:	e00b      	b.n	80047ce <UART_SetConfig+0x2c2>
 80047b6:	2300      	movs	r3, #0
 80047b8:	77fb      	strb	r3, [r7, #31]
 80047ba:	e04a      	b.n	8004852 <UART_SetConfig+0x346>
 80047bc:	2302      	movs	r3, #2
 80047be:	77fb      	strb	r3, [r7, #31]
 80047c0:	e047      	b.n	8004852 <UART_SetConfig+0x346>
 80047c2:	2304      	movs	r3, #4
 80047c4:	77fb      	strb	r3, [r7, #31]
 80047c6:	e044      	b.n	8004852 <UART_SetConfig+0x346>
 80047c8:	2308      	movs	r3, #8
 80047ca:	77fb      	strb	r3, [r7, #31]
 80047cc:	e041      	b.n	8004852 <UART_SetConfig+0x346>
 80047ce:	2310      	movs	r3, #16
 80047d0:	77fb      	strb	r3, [r7, #31]
 80047d2:	e03e      	b.n	8004852 <UART_SetConfig+0x346>
 80047d4:	efff69f3 	.word	0xefff69f3
 80047d8:	40011000 	.word	0x40011000
 80047dc:	40023800 	.word	0x40023800
 80047e0:	40004400 	.word	0x40004400
 80047e4:	40004800 	.word	0x40004800
 80047e8:	40004c00 	.word	0x40004c00
 80047ec:	40005000 	.word	0x40005000
 80047f0:	40011400 	.word	0x40011400
 80047f4:	40007800 	.word	0x40007800
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a71      	ldr	r2, [pc, #452]	; (80049c4 <UART_SetConfig+0x4b8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d125      	bne.n	800484e <UART_SetConfig+0x342>
 8004802:	4b71      	ldr	r3, [pc, #452]	; (80049c8 <UART_SetConfig+0x4bc>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800480c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004810:	d017      	beq.n	8004842 <UART_SetConfig+0x336>
 8004812:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004816:	d817      	bhi.n	8004848 <UART_SetConfig+0x33c>
 8004818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800481c:	d00b      	beq.n	8004836 <UART_SetConfig+0x32a>
 800481e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004822:	d811      	bhi.n	8004848 <UART_SetConfig+0x33c>
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <UART_SetConfig+0x324>
 8004828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800482c:	d006      	beq.n	800483c <UART_SetConfig+0x330>
 800482e:	e00b      	b.n	8004848 <UART_SetConfig+0x33c>
 8004830:	2300      	movs	r3, #0
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	e00d      	b.n	8004852 <UART_SetConfig+0x346>
 8004836:	2302      	movs	r3, #2
 8004838:	77fb      	strb	r3, [r7, #31]
 800483a:	e00a      	b.n	8004852 <UART_SetConfig+0x346>
 800483c:	2304      	movs	r3, #4
 800483e:	77fb      	strb	r3, [r7, #31]
 8004840:	e007      	b.n	8004852 <UART_SetConfig+0x346>
 8004842:	2308      	movs	r3, #8
 8004844:	77fb      	strb	r3, [r7, #31]
 8004846:	e004      	b.n	8004852 <UART_SetConfig+0x346>
 8004848:	2310      	movs	r3, #16
 800484a:	77fb      	strb	r3, [r7, #31]
 800484c:	e001      	b.n	8004852 <UART_SetConfig+0x346>
 800484e:	2310      	movs	r3, #16
 8004850:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800485a:	d15b      	bne.n	8004914 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800485c:	7ffb      	ldrb	r3, [r7, #31]
 800485e:	2b08      	cmp	r3, #8
 8004860:	d827      	bhi.n	80048b2 <UART_SetConfig+0x3a6>
 8004862:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <UART_SetConfig+0x35c>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	0800488d 	.word	0x0800488d
 800486c:	08004895 	.word	0x08004895
 8004870:	0800489d 	.word	0x0800489d
 8004874:	080048b3 	.word	0x080048b3
 8004878:	080048a3 	.word	0x080048a3
 800487c:	080048b3 	.word	0x080048b3
 8004880:	080048b3 	.word	0x080048b3
 8004884:	080048b3 	.word	0x080048b3
 8004888:	080048ab 	.word	0x080048ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800488c:	f7ff f90c 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 8004890:	61b8      	str	r0, [r7, #24]
        break;
 8004892:	e013      	b.n	80048bc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004894:	f7ff f91c 	bl	8003ad0 <HAL_RCC_GetPCLK2Freq>
 8004898:	61b8      	str	r0, [r7, #24]
        break;
 800489a:	e00f      	b.n	80048bc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800489c:	4b4b      	ldr	r3, [pc, #300]	; (80049cc <UART_SetConfig+0x4c0>)
 800489e:	61bb      	str	r3, [r7, #24]
        break;
 80048a0:	e00c      	b.n	80048bc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048a2:	f7ff f83f 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 80048a6:	61b8      	str	r0, [r7, #24]
        break;
 80048a8:	e008      	b.n	80048bc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ae:	61bb      	str	r3, [r7, #24]
        break;
 80048b0:	e004      	b.n	80048bc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	77bb      	strb	r3, [r7, #30]
        break;
 80048ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d074      	beq.n	80049ac <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	005a      	lsls	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	085b      	lsrs	r3, r3, #1
 80048cc:	441a      	add	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	2b0f      	cmp	r3, #15
 80048de:	d916      	bls.n	800490e <UART_SetConfig+0x402>
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e6:	d212      	bcs.n	800490e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	f023 030f 	bic.w	r3, r3, #15
 80048f0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	085b      	lsrs	r3, r3, #1
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	89fb      	ldrh	r3, [r7, #14]
 8004900:	4313      	orrs	r3, r2
 8004902:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	89fa      	ldrh	r2, [r7, #14]
 800490a:	60da      	str	r2, [r3, #12]
 800490c:	e04e      	b.n	80049ac <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	77bb      	strb	r3, [r7, #30]
 8004912:	e04b      	b.n	80049ac <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004914:	7ffb      	ldrb	r3, [r7, #31]
 8004916:	2b08      	cmp	r3, #8
 8004918:	d827      	bhi.n	800496a <UART_SetConfig+0x45e>
 800491a:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <UART_SetConfig+0x414>)
 800491c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004920:	08004945 	.word	0x08004945
 8004924:	0800494d 	.word	0x0800494d
 8004928:	08004955 	.word	0x08004955
 800492c:	0800496b 	.word	0x0800496b
 8004930:	0800495b 	.word	0x0800495b
 8004934:	0800496b 	.word	0x0800496b
 8004938:	0800496b 	.word	0x0800496b
 800493c:	0800496b 	.word	0x0800496b
 8004940:	08004963 	.word	0x08004963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004944:	f7ff f8b0 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 8004948:	61b8      	str	r0, [r7, #24]
        break;
 800494a:	e013      	b.n	8004974 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800494c:	f7ff f8c0 	bl	8003ad0 <HAL_RCC_GetPCLK2Freq>
 8004950:	61b8      	str	r0, [r7, #24]
        break;
 8004952:	e00f      	b.n	8004974 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004954:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <UART_SetConfig+0x4c0>)
 8004956:	61bb      	str	r3, [r7, #24]
        break;
 8004958:	e00c      	b.n	8004974 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800495a:	f7fe ffe3 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 800495e:	61b8      	str	r0, [r7, #24]
        break;
 8004960:	e008      	b.n	8004974 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004966:	61bb      	str	r3, [r7, #24]
        break;
 8004968:	e004      	b.n	8004974 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	77bb      	strb	r3, [r7, #30]
        break;
 8004972:	bf00      	nop
    }

    if (pclk != 0U)
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d018      	beq.n	80049ac <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	085a      	lsrs	r2, r3, #1
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	441a      	add	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	fbb2 f3f3 	udiv	r3, r2, r3
 800498c:	b29b      	uxth	r3, r3
 800498e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	2b0f      	cmp	r3, #15
 8004994:	d908      	bls.n	80049a8 <UART_SetConfig+0x49c>
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499c:	d204      	bcs.n	80049a8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	60da      	str	r2, [r3, #12]
 80049a6:	e001      	b.n	80049ac <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3720      	adds	r7, #32
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40007c00 	.word	0x40007c00
 80049c8:	40023800 	.word	0x40023800
 80049cc:	00f42400 	.word	0x00f42400

080049d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01a      	beq.n	8004ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ace:	d10a      	bne.n	8004ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	605a      	str	r2, [r3, #4]
  }
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b24:	f7fd fa4c 	bl	8001fc0 <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0308 	and.w	r3, r3, #8
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d10e      	bne.n	8004b56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f82d 	bl	8004ba6 <UART_WaitOnFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e023      	b.n	8004b9e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d10e      	bne.n	8004b82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f817 	bl	8004ba6 <UART_WaitOnFlagUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e00d      	b.n	8004b9e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	603b      	str	r3, [r7, #0]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb6:	e05e      	b.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbe:	d05a      	beq.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc0:	f7fd f9fe 	bl	8001fc0 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d302      	bcc.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d11b      	bne.n	8004c0e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004be4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0201 	bic.w	r2, r2, #1
 8004bf4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e043      	b.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d02c      	beq.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c2a:	d124      	bne.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c44:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0201 	bic.w	r2, r2, #1
 8004c54:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e00f      	b.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	bf0c      	ite	eq
 8004c86:	2301      	moveq	r3, #1
 8004c88:	2300      	movne	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d091      	beq.n	8004bb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <__errno>:
 8004ca0:	4b01      	ldr	r3, [pc, #4]	; (8004ca8 <__errno+0x8>)
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	2000000c 	.word	0x2000000c

08004cac <__libc_init_array>:
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	4d0d      	ldr	r5, [pc, #52]	; (8004ce4 <__libc_init_array+0x38>)
 8004cb0:	4c0d      	ldr	r4, [pc, #52]	; (8004ce8 <__libc_init_array+0x3c>)
 8004cb2:	1b64      	subs	r4, r4, r5
 8004cb4:	10a4      	asrs	r4, r4, #2
 8004cb6:	2600      	movs	r6, #0
 8004cb8:	42a6      	cmp	r6, r4
 8004cba:	d109      	bne.n	8004cd0 <__libc_init_array+0x24>
 8004cbc:	4d0b      	ldr	r5, [pc, #44]	; (8004cec <__libc_init_array+0x40>)
 8004cbe:	4c0c      	ldr	r4, [pc, #48]	; (8004cf0 <__libc_init_array+0x44>)
 8004cc0:	f003 fa0a 	bl	80080d8 <_init>
 8004cc4:	1b64      	subs	r4, r4, r5
 8004cc6:	10a4      	asrs	r4, r4, #2
 8004cc8:	2600      	movs	r6, #0
 8004cca:	42a6      	cmp	r6, r4
 8004ccc:	d105      	bne.n	8004cda <__libc_init_array+0x2e>
 8004cce:	bd70      	pop	{r4, r5, r6, pc}
 8004cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cd4:	4798      	blx	r3
 8004cd6:	3601      	adds	r6, #1
 8004cd8:	e7ee      	b.n	8004cb8 <__libc_init_array+0xc>
 8004cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cde:	4798      	blx	r3
 8004ce0:	3601      	adds	r6, #1
 8004ce2:	e7f2      	b.n	8004cca <__libc_init_array+0x1e>
 8004ce4:	080085d8 	.word	0x080085d8
 8004ce8:	080085d8 	.word	0x080085d8
 8004cec:	080085d8 	.word	0x080085d8
 8004cf0:	080085dc 	.word	0x080085dc

08004cf4 <memset>:
 8004cf4:	4402      	add	r2, r0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d100      	bne.n	8004cfe <memset+0xa>
 8004cfc:	4770      	bx	lr
 8004cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004d02:	e7f9      	b.n	8004cf8 <memset+0x4>

08004d04 <__cvt>:
 8004d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d06:	ed2d 8b02 	vpush	{d8}
 8004d0a:	eeb0 8b40 	vmov.f64	d8, d0
 8004d0e:	b085      	sub	sp, #20
 8004d10:	4617      	mov	r7, r2
 8004d12:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004d14:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004d16:	ee18 2a90 	vmov	r2, s17
 8004d1a:	f025 0520 	bic.w	r5, r5, #32
 8004d1e:	2a00      	cmp	r2, #0
 8004d20:	bfb6      	itet	lt
 8004d22:	222d      	movlt	r2, #45	; 0x2d
 8004d24:	2200      	movge	r2, #0
 8004d26:	eeb1 8b40 	vneglt.f64	d8, d0
 8004d2a:	2d46      	cmp	r5, #70	; 0x46
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	701a      	strb	r2, [r3, #0]
 8004d30:	d004      	beq.n	8004d3c <__cvt+0x38>
 8004d32:	2d45      	cmp	r5, #69	; 0x45
 8004d34:	d100      	bne.n	8004d38 <__cvt+0x34>
 8004d36:	3401      	adds	r4, #1
 8004d38:	2102      	movs	r1, #2
 8004d3a:	e000      	b.n	8004d3e <__cvt+0x3a>
 8004d3c:	2103      	movs	r1, #3
 8004d3e:	ab03      	add	r3, sp, #12
 8004d40:	9301      	str	r3, [sp, #4]
 8004d42:	ab02      	add	r3, sp, #8
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	4622      	mov	r2, r4
 8004d48:	4633      	mov	r3, r6
 8004d4a:	eeb0 0b48 	vmov.f64	d0, d8
 8004d4e:	f000 fe17 	bl	8005980 <_dtoa_r>
 8004d52:	2d47      	cmp	r5, #71	; 0x47
 8004d54:	d109      	bne.n	8004d6a <__cvt+0x66>
 8004d56:	07fb      	lsls	r3, r7, #31
 8004d58:	d407      	bmi.n	8004d6a <__cvt+0x66>
 8004d5a:	9b03      	ldr	r3, [sp, #12]
 8004d5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d5e:	1a1b      	subs	r3, r3, r0
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	b005      	add	sp, #20
 8004d64:	ecbd 8b02 	vpop	{d8}
 8004d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d6a:	2d46      	cmp	r5, #70	; 0x46
 8004d6c:	eb00 0204 	add.w	r2, r0, r4
 8004d70:	d10c      	bne.n	8004d8c <__cvt+0x88>
 8004d72:	7803      	ldrb	r3, [r0, #0]
 8004d74:	2b30      	cmp	r3, #48	; 0x30
 8004d76:	d107      	bne.n	8004d88 <__cvt+0x84>
 8004d78:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d80:	bf1c      	itt	ne
 8004d82:	f1c4 0401 	rsbne	r4, r4, #1
 8004d86:	6034      	strne	r4, [r6, #0]
 8004d88:	6833      	ldr	r3, [r6, #0]
 8004d8a:	441a      	add	r2, r3
 8004d8c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d94:	bf08      	it	eq
 8004d96:	9203      	streq	r2, [sp, #12]
 8004d98:	2130      	movs	r1, #48	; 0x30
 8004d9a:	9b03      	ldr	r3, [sp, #12]
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d2dc      	bcs.n	8004d5a <__cvt+0x56>
 8004da0:	1c5c      	adds	r4, r3, #1
 8004da2:	9403      	str	r4, [sp, #12]
 8004da4:	7019      	strb	r1, [r3, #0]
 8004da6:	e7f8      	b.n	8004d9a <__cvt+0x96>

08004da8 <__exponent>:
 8004da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004daa:	4603      	mov	r3, r0
 8004dac:	2900      	cmp	r1, #0
 8004dae:	bfb8      	it	lt
 8004db0:	4249      	neglt	r1, r1
 8004db2:	f803 2b02 	strb.w	r2, [r3], #2
 8004db6:	bfb4      	ite	lt
 8004db8:	222d      	movlt	r2, #45	; 0x2d
 8004dba:	222b      	movge	r2, #43	; 0x2b
 8004dbc:	2909      	cmp	r1, #9
 8004dbe:	7042      	strb	r2, [r0, #1]
 8004dc0:	dd2a      	ble.n	8004e18 <__exponent+0x70>
 8004dc2:	f10d 0407 	add.w	r4, sp, #7
 8004dc6:	46a4      	mov	ip, r4
 8004dc8:	270a      	movs	r7, #10
 8004dca:	46a6      	mov	lr, r4
 8004dcc:	460a      	mov	r2, r1
 8004dce:	fb91 f6f7 	sdiv	r6, r1, r7
 8004dd2:	fb07 1516 	mls	r5, r7, r6, r1
 8004dd6:	3530      	adds	r5, #48	; 0x30
 8004dd8:	2a63      	cmp	r2, #99	; 0x63
 8004dda:	f104 34ff 	add.w	r4, r4, #4294967295
 8004dde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004de2:	4631      	mov	r1, r6
 8004de4:	dcf1      	bgt.n	8004dca <__exponent+0x22>
 8004de6:	3130      	adds	r1, #48	; 0x30
 8004de8:	f1ae 0502 	sub.w	r5, lr, #2
 8004dec:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004df0:	1c44      	adds	r4, r0, #1
 8004df2:	4629      	mov	r1, r5
 8004df4:	4561      	cmp	r1, ip
 8004df6:	d30a      	bcc.n	8004e0e <__exponent+0x66>
 8004df8:	f10d 0209 	add.w	r2, sp, #9
 8004dfc:	eba2 020e 	sub.w	r2, r2, lr
 8004e00:	4565      	cmp	r5, ip
 8004e02:	bf88      	it	hi
 8004e04:	2200      	movhi	r2, #0
 8004e06:	4413      	add	r3, r2
 8004e08:	1a18      	subs	r0, r3, r0
 8004e0a:	b003      	add	sp, #12
 8004e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e12:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e16:	e7ed      	b.n	8004df4 <__exponent+0x4c>
 8004e18:	2330      	movs	r3, #48	; 0x30
 8004e1a:	3130      	adds	r1, #48	; 0x30
 8004e1c:	7083      	strb	r3, [r0, #2]
 8004e1e:	70c1      	strb	r1, [r0, #3]
 8004e20:	1d03      	adds	r3, r0, #4
 8004e22:	e7f1      	b.n	8004e08 <__exponent+0x60>
 8004e24:	0000      	movs	r0, r0
	...

08004e28 <_printf_float>:
 8004e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2c:	b08b      	sub	sp, #44	; 0x2c
 8004e2e:	460c      	mov	r4, r1
 8004e30:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004e34:	4616      	mov	r6, r2
 8004e36:	461f      	mov	r7, r3
 8004e38:	4605      	mov	r5, r0
 8004e3a:	f001 fcdb 	bl	80067f4 <_localeconv_r>
 8004e3e:	f8d0 b000 	ldr.w	fp, [r0]
 8004e42:	4658      	mov	r0, fp
 8004e44:	f7fb f9fc 	bl	8000240 <strlen>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	9308      	str	r3, [sp, #32]
 8004e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e50:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004e54:	6822      	ldr	r2, [r4, #0]
 8004e56:	3307      	adds	r3, #7
 8004e58:	f023 0307 	bic.w	r3, r3, #7
 8004e5c:	f103 0108 	add.w	r1, r3, #8
 8004e60:	f8c8 1000 	str.w	r1, [r8]
 8004e64:	4682      	mov	sl, r0
 8004e66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e6a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8004e6e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80050d0 <_printf_float+0x2a8>
 8004e72:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8004e76:	eeb0 6bc0 	vabs.f64	d6, d0
 8004e7a:	eeb4 6b47 	vcmp.f64	d6, d7
 8004e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e82:	dd24      	ble.n	8004ece <_printf_float+0xa6>
 8004e84:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8c:	d502      	bpl.n	8004e94 <_printf_float+0x6c>
 8004e8e:	232d      	movs	r3, #45	; 0x2d
 8004e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e94:	4b90      	ldr	r3, [pc, #576]	; (80050d8 <_printf_float+0x2b0>)
 8004e96:	4891      	ldr	r0, [pc, #580]	; (80050dc <_printf_float+0x2b4>)
 8004e98:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004e9c:	bf94      	ite	ls
 8004e9e:	4698      	movls	r8, r3
 8004ea0:	4680      	movhi	r8, r0
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	6123      	str	r3, [r4, #16]
 8004ea6:	f022 0204 	bic.w	r2, r2, #4
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6022      	str	r2, [r4, #0]
 8004eae:	9304      	str	r3, [sp, #16]
 8004eb0:	9700      	str	r7, [sp, #0]
 8004eb2:	4633      	mov	r3, r6
 8004eb4:	aa09      	add	r2, sp, #36	; 0x24
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	4628      	mov	r0, r5
 8004eba:	f000 f9d3 	bl	8005264 <_printf_common>
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	f040 808a 	bne.w	8004fd8 <_printf_float+0x1b0>
 8004ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec8:	b00b      	add	sp, #44	; 0x2c
 8004eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ece:	eeb4 0b40 	vcmp.f64	d0, d0
 8004ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed6:	d709      	bvc.n	8004eec <_printf_float+0xc4>
 8004ed8:	ee10 3a90 	vmov	r3, s1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	bfbc      	itt	lt
 8004ee0:	232d      	movlt	r3, #45	; 0x2d
 8004ee2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ee6:	487e      	ldr	r0, [pc, #504]	; (80050e0 <_printf_float+0x2b8>)
 8004ee8:	4b7e      	ldr	r3, [pc, #504]	; (80050e4 <_printf_float+0x2bc>)
 8004eea:	e7d5      	b.n	8004e98 <_printf_float+0x70>
 8004eec:	6863      	ldr	r3, [r4, #4]
 8004eee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004ef2:	9104      	str	r1, [sp, #16]
 8004ef4:	1c59      	adds	r1, r3, #1
 8004ef6:	d13c      	bne.n	8004f72 <_printf_float+0x14a>
 8004ef8:	2306      	movs	r3, #6
 8004efa:	6063      	str	r3, [r4, #4]
 8004efc:	2300      	movs	r3, #0
 8004efe:	9303      	str	r3, [sp, #12]
 8004f00:	ab08      	add	r3, sp, #32
 8004f02:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004f06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f0a:	ab07      	add	r3, sp, #28
 8004f0c:	6861      	ldr	r1, [r4, #4]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	6022      	str	r2, [r4, #0]
 8004f12:	f10d 031b 	add.w	r3, sp, #27
 8004f16:	4628      	mov	r0, r5
 8004f18:	f7ff fef4 	bl	8004d04 <__cvt>
 8004f1c:	9b04      	ldr	r3, [sp, #16]
 8004f1e:	9907      	ldr	r1, [sp, #28]
 8004f20:	2b47      	cmp	r3, #71	; 0x47
 8004f22:	4680      	mov	r8, r0
 8004f24:	d108      	bne.n	8004f38 <_printf_float+0x110>
 8004f26:	1cc8      	adds	r0, r1, #3
 8004f28:	db02      	blt.n	8004f30 <_printf_float+0x108>
 8004f2a:	6863      	ldr	r3, [r4, #4]
 8004f2c:	4299      	cmp	r1, r3
 8004f2e:	dd41      	ble.n	8004fb4 <_printf_float+0x18c>
 8004f30:	f1a9 0902 	sub.w	r9, r9, #2
 8004f34:	fa5f f989 	uxtb.w	r9, r9
 8004f38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f3c:	d820      	bhi.n	8004f80 <_printf_float+0x158>
 8004f3e:	3901      	subs	r1, #1
 8004f40:	464a      	mov	r2, r9
 8004f42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f46:	9107      	str	r1, [sp, #28]
 8004f48:	f7ff ff2e 	bl	8004da8 <__exponent>
 8004f4c:	9a08      	ldr	r2, [sp, #32]
 8004f4e:	9004      	str	r0, [sp, #16]
 8004f50:	1813      	adds	r3, r2, r0
 8004f52:	2a01      	cmp	r2, #1
 8004f54:	6123      	str	r3, [r4, #16]
 8004f56:	dc02      	bgt.n	8004f5e <_printf_float+0x136>
 8004f58:	6822      	ldr	r2, [r4, #0]
 8004f5a:	07d2      	lsls	r2, r2, #31
 8004f5c:	d501      	bpl.n	8004f62 <_printf_float+0x13a>
 8004f5e:	3301      	adds	r3, #1
 8004f60:	6123      	str	r3, [r4, #16]
 8004f62:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0a2      	beq.n	8004eb0 <_printf_float+0x88>
 8004f6a:	232d      	movs	r3, #45	; 0x2d
 8004f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f70:	e79e      	b.n	8004eb0 <_printf_float+0x88>
 8004f72:	9904      	ldr	r1, [sp, #16]
 8004f74:	2947      	cmp	r1, #71	; 0x47
 8004f76:	d1c1      	bne.n	8004efc <_printf_float+0xd4>
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1bf      	bne.n	8004efc <_printf_float+0xd4>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e7bc      	b.n	8004efa <_printf_float+0xd2>
 8004f80:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004f84:	d118      	bne.n	8004fb8 <_printf_float+0x190>
 8004f86:	2900      	cmp	r1, #0
 8004f88:	6863      	ldr	r3, [r4, #4]
 8004f8a:	dd0b      	ble.n	8004fa4 <_printf_float+0x17c>
 8004f8c:	6121      	str	r1, [r4, #16]
 8004f8e:	b913      	cbnz	r3, 8004f96 <_printf_float+0x16e>
 8004f90:	6822      	ldr	r2, [r4, #0]
 8004f92:	07d0      	lsls	r0, r2, #31
 8004f94:	d502      	bpl.n	8004f9c <_printf_float+0x174>
 8004f96:	3301      	adds	r3, #1
 8004f98:	440b      	add	r3, r1
 8004f9a:	6123      	str	r3, [r4, #16]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004fa0:	9304      	str	r3, [sp, #16]
 8004fa2:	e7de      	b.n	8004f62 <_printf_float+0x13a>
 8004fa4:	b913      	cbnz	r3, 8004fac <_printf_float+0x184>
 8004fa6:	6822      	ldr	r2, [r4, #0]
 8004fa8:	07d2      	lsls	r2, r2, #31
 8004faa:	d501      	bpl.n	8004fb0 <_printf_float+0x188>
 8004fac:	3302      	adds	r3, #2
 8004fae:	e7f4      	b.n	8004f9a <_printf_float+0x172>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e7f2      	b.n	8004f9a <_printf_float+0x172>
 8004fb4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004fb8:	9b08      	ldr	r3, [sp, #32]
 8004fba:	4299      	cmp	r1, r3
 8004fbc:	db05      	blt.n	8004fca <_printf_float+0x1a2>
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	6121      	str	r1, [r4, #16]
 8004fc2:	07d8      	lsls	r0, r3, #31
 8004fc4:	d5ea      	bpl.n	8004f9c <_printf_float+0x174>
 8004fc6:	1c4b      	adds	r3, r1, #1
 8004fc8:	e7e7      	b.n	8004f9a <_printf_float+0x172>
 8004fca:	2900      	cmp	r1, #0
 8004fcc:	bfd4      	ite	le
 8004fce:	f1c1 0202 	rsble	r2, r1, #2
 8004fd2:	2201      	movgt	r2, #1
 8004fd4:	4413      	add	r3, r2
 8004fd6:	e7e0      	b.n	8004f9a <_printf_float+0x172>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	055a      	lsls	r2, r3, #21
 8004fdc:	d407      	bmi.n	8004fee <_printf_float+0x1c6>
 8004fde:	6923      	ldr	r3, [r4, #16]
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	4631      	mov	r1, r6
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	47b8      	blx	r7
 8004fe8:	3001      	adds	r0, #1
 8004fea:	d12a      	bne.n	8005042 <_printf_float+0x21a>
 8004fec:	e76a      	b.n	8004ec4 <_printf_float+0x9c>
 8004fee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004ff2:	f240 80e2 	bls.w	80051ba <_printf_float+0x392>
 8004ff6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004ffa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005002:	d133      	bne.n	800506c <_printf_float+0x244>
 8005004:	4a38      	ldr	r2, [pc, #224]	; (80050e8 <_printf_float+0x2c0>)
 8005006:	2301      	movs	r3, #1
 8005008:	4631      	mov	r1, r6
 800500a:	4628      	mov	r0, r5
 800500c:	47b8      	blx	r7
 800500e:	3001      	adds	r0, #1
 8005010:	f43f af58 	beq.w	8004ec4 <_printf_float+0x9c>
 8005014:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005018:	429a      	cmp	r2, r3
 800501a:	db02      	blt.n	8005022 <_printf_float+0x1fa>
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	07d8      	lsls	r0, r3, #31
 8005020:	d50f      	bpl.n	8005042 <_printf_float+0x21a>
 8005022:	4653      	mov	r3, sl
 8005024:	465a      	mov	r2, fp
 8005026:	4631      	mov	r1, r6
 8005028:	4628      	mov	r0, r5
 800502a:	47b8      	blx	r7
 800502c:	3001      	adds	r0, #1
 800502e:	f43f af49 	beq.w	8004ec4 <_printf_float+0x9c>
 8005032:	f04f 0800 	mov.w	r8, #0
 8005036:	f104 091a 	add.w	r9, r4, #26
 800503a:	9b08      	ldr	r3, [sp, #32]
 800503c:	3b01      	subs	r3, #1
 800503e:	4543      	cmp	r3, r8
 8005040:	dc09      	bgt.n	8005056 <_printf_float+0x22e>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	079b      	lsls	r3, r3, #30
 8005046:	f100 8108 	bmi.w	800525a <_printf_float+0x432>
 800504a:	68e0      	ldr	r0, [r4, #12]
 800504c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800504e:	4298      	cmp	r0, r3
 8005050:	bfb8      	it	lt
 8005052:	4618      	movlt	r0, r3
 8005054:	e738      	b.n	8004ec8 <_printf_float+0xa0>
 8005056:	2301      	movs	r3, #1
 8005058:	464a      	mov	r2, r9
 800505a:	4631      	mov	r1, r6
 800505c:	4628      	mov	r0, r5
 800505e:	47b8      	blx	r7
 8005060:	3001      	adds	r0, #1
 8005062:	f43f af2f 	beq.w	8004ec4 <_printf_float+0x9c>
 8005066:	f108 0801 	add.w	r8, r8, #1
 800506a:	e7e6      	b.n	800503a <_printf_float+0x212>
 800506c:	9b07      	ldr	r3, [sp, #28]
 800506e:	2b00      	cmp	r3, #0
 8005070:	dc3c      	bgt.n	80050ec <_printf_float+0x2c4>
 8005072:	4a1d      	ldr	r2, [pc, #116]	; (80050e8 <_printf_float+0x2c0>)
 8005074:	2301      	movs	r3, #1
 8005076:	4631      	mov	r1, r6
 8005078:	4628      	mov	r0, r5
 800507a:	47b8      	blx	r7
 800507c:	3001      	adds	r0, #1
 800507e:	f43f af21 	beq.w	8004ec4 <_printf_float+0x9c>
 8005082:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005086:	4313      	orrs	r3, r2
 8005088:	d102      	bne.n	8005090 <_printf_float+0x268>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	07d9      	lsls	r1, r3, #31
 800508e:	d5d8      	bpl.n	8005042 <_printf_float+0x21a>
 8005090:	4653      	mov	r3, sl
 8005092:	465a      	mov	r2, fp
 8005094:	4631      	mov	r1, r6
 8005096:	4628      	mov	r0, r5
 8005098:	47b8      	blx	r7
 800509a:	3001      	adds	r0, #1
 800509c:	f43f af12 	beq.w	8004ec4 <_printf_float+0x9c>
 80050a0:	f04f 0900 	mov.w	r9, #0
 80050a4:	f104 0a1a 	add.w	sl, r4, #26
 80050a8:	9b07      	ldr	r3, [sp, #28]
 80050aa:	425b      	negs	r3, r3
 80050ac:	454b      	cmp	r3, r9
 80050ae:	dc01      	bgt.n	80050b4 <_printf_float+0x28c>
 80050b0:	9b08      	ldr	r3, [sp, #32]
 80050b2:	e795      	b.n	8004fe0 <_printf_float+0x1b8>
 80050b4:	2301      	movs	r3, #1
 80050b6:	4652      	mov	r2, sl
 80050b8:	4631      	mov	r1, r6
 80050ba:	4628      	mov	r0, r5
 80050bc:	47b8      	blx	r7
 80050be:	3001      	adds	r0, #1
 80050c0:	f43f af00 	beq.w	8004ec4 <_printf_float+0x9c>
 80050c4:	f109 0901 	add.w	r9, r9, #1
 80050c8:	e7ee      	b.n	80050a8 <_printf_float+0x280>
 80050ca:	bf00      	nop
 80050cc:	f3af 8000 	nop.w
 80050d0:	ffffffff 	.word	0xffffffff
 80050d4:	7fefffff 	.word	0x7fefffff
 80050d8:	08008180 	.word	0x08008180
 80050dc:	08008184 	.word	0x08008184
 80050e0:	0800818c 	.word	0x0800818c
 80050e4:	08008188 	.word	0x08008188
 80050e8:	08008190 	.word	0x08008190
 80050ec:	9a08      	ldr	r2, [sp, #32]
 80050ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050f0:	429a      	cmp	r2, r3
 80050f2:	bfa8      	it	ge
 80050f4:	461a      	movge	r2, r3
 80050f6:	2a00      	cmp	r2, #0
 80050f8:	4691      	mov	r9, r2
 80050fa:	dc38      	bgt.n	800516e <_printf_float+0x346>
 80050fc:	2300      	movs	r3, #0
 80050fe:	9305      	str	r3, [sp, #20]
 8005100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005104:	f104 021a 	add.w	r2, r4, #26
 8005108:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800510a:	9905      	ldr	r1, [sp, #20]
 800510c:	9304      	str	r3, [sp, #16]
 800510e:	eba3 0309 	sub.w	r3, r3, r9
 8005112:	428b      	cmp	r3, r1
 8005114:	dc33      	bgt.n	800517e <_printf_float+0x356>
 8005116:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800511a:	429a      	cmp	r2, r3
 800511c:	db3c      	blt.n	8005198 <_printf_float+0x370>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	07da      	lsls	r2, r3, #31
 8005122:	d439      	bmi.n	8005198 <_printf_float+0x370>
 8005124:	9a08      	ldr	r2, [sp, #32]
 8005126:	9b04      	ldr	r3, [sp, #16]
 8005128:	9907      	ldr	r1, [sp, #28]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	eba2 0901 	sub.w	r9, r2, r1
 8005130:	4599      	cmp	r9, r3
 8005132:	bfa8      	it	ge
 8005134:	4699      	movge	r9, r3
 8005136:	f1b9 0f00 	cmp.w	r9, #0
 800513a:	dc35      	bgt.n	80051a8 <_printf_float+0x380>
 800513c:	f04f 0800 	mov.w	r8, #0
 8005140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005144:	f104 0a1a 	add.w	sl, r4, #26
 8005148:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	eba3 0309 	sub.w	r3, r3, r9
 8005152:	4543      	cmp	r3, r8
 8005154:	f77f af75 	ble.w	8005042 <_printf_float+0x21a>
 8005158:	2301      	movs	r3, #1
 800515a:	4652      	mov	r2, sl
 800515c:	4631      	mov	r1, r6
 800515e:	4628      	mov	r0, r5
 8005160:	47b8      	blx	r7
 8005162:	3001      	adds	r0, #1
 8005164:	f43f aeae 	beq.w	8004ec4 <_printf_float+0x9c>
 8005168:	f108 0801 	add.w	r8, r8, #1
 800516c:	e7ec      	b.n	8005148 <_printf_float+0x320>
 800516e:	4613      	mov	r3, r2
 8005170:	4631      	mov	r1, r6
 8005172:	4642      	mov	r2, r8
 8005174:	4628      	mov	r0, r5
 8005176:	47b8      	blx	r7
 8005178:	3001      	adds	r0, #1
 800517a:	d1bf      	bne.n	80050fc <_printf_float+0x2d4>
 800517c:	e6a2      	b.n	8004ec4 <_printf_float+0x9c>
 800517e:	2301      	movs	r3, #1
 8005180:	4631      	mov	r1, r6
 8005182:	4628      	mov	r0, r5
 8005184:	9204      	str	r2, [sp, #16]
 8005186:	47b8      	blx	r7
 8005188:	3001      	adds	r0, #1
 800518a:	f43f ae9b 	beq.w	8004ec4 <_printf_float+0x9c>
 800518e:	9b05      	ldr	r3, [sp, #20]
 8005190:	9a04      	ldr	r2, [sp, #16]
 8005192:	3301      	adds	r3, #1
 8005194:	9305      	str	r3, [sp, #20]
 8005196:	e7b7      	b.n	8005108 <_printf_float+0x2e0>
 8005198:	4653      	mov	r3, sl
 800519a:	465a      	mov	r2, fp
 800519c:	4631      	mov	r1, r6
 800519e:	4628      	mov	r0, r5
 80051a0:	47b8      	blx	r7
 80051a2:	3001      	adds	r0, #1
 80051a4:	d1be      	bne.n	8005124 <_printf_float+0x2fc>
 80051a6:	e68d      	b.n	8004ec4 <_printf_float+0x9c>
 80051a8:	9a04      	ldr	r2, [sp, #16]
 80051aa:	464b      	mov	r3, r9
 80051ac:	4442      	add	r2, r8
 80051ae:	4631      	mov	r1, r6
 80051b0:	4628      	mov	r0, r5
 80051b2:	47b8      	blx	r7
 80051b4:	3001      	adds	r0, #1
 80051b6:	d1c1      	bne.n	800513c <_printf_float+0x314>
 80051b8:	e684      	b.n	8004ec4 <_printf_float+0x9c>
 80051ba:	9a08      	ldr	r2, [sp, #32]
 80051bc:	2a01      	cmp	r2, #1
 80051be:	dc01      	bgt.n	80051c4 <_printf_float+0x39c>
 80051c0:	07db      	lsls	r3, r3, #31
 80051c2:	d537      	bpl.n	8005234 <_printf_float+0x40c>
 80051c4:	2301      	movs	r3, #1
 80051c6:	4642      	mov	r2, r8
 80051c8:	4631      	mov	r1, r6
 80051ca:	4628      	mov	r0, r5
 80051cc:	47b8      	blx	r7
 80051ce:	3001      	adds	r0, #1
 80051d0:	f43f ae78 	beq.w	8004ec4 <_printf_float+0x9c>
 80051d4:	4653      	mov	r3, sl
 80051d6:	465a      	mov	r2, fp
 80051d8:	4631      	mov	r1, r6
 80051da:	4628      	mov	r0, r5
 80051dc:	47b8      	blx	r7
 80051de:	3001      	adds	r0, #1
 80051e0:	f43f ae70 	beq.w	8004ec4 <_printf_float+0x9c>
 80051e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80051e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80051ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f0:	d01b      	beq.n	800522a <_printf_float+0x402>
 80051f2:	9b08      	ldr	r3, [sp, #32]
 80051f4:	f108 0201 	add.w	r2, r8, #1
 80051f8:	3b01      	subs	r3, #1
 80051fa:	4631      	mov	r1, r6
 80051fc:	4628      	mov	r0, r5
 80051fe:	47b8      	blx	r7
 8005200:	3001      	adds	r0, #1
 8005202:	d10e      	bne.n	8005222 <_printf_float+0x3fa>
 8005204:	e65e      	b.n	8004ec4 <_printf_float+0x9c>
 8005206:	2301      	movs	r3, #1
 8005208:	464a      	mov	r2, r9
 800520a:	4631      	mov	r1, r6
 800520c:	4628      	mov	r0, r5
 800520e:	47b8      	blx	r7
 8005210:	3001      	adds	r0, #1
 8005212:	f43f ae57 	beq.w	8004ec4 <_printf_float+0x9c>
 8005216:	f108 0801 	add.w	r8, r8, #1
 800521a:	9b08      	ldr	r3, [sp, #32]
 800521c:	3b01      	subs	r3, #1
 800521e:	4543      	cmp	r3, r8
 8005220:	dcf1      	bgt.n	8005206 <_printf_float+0x3de>
 8005222:	9b04      	ldr	r3, [sp, #16]
 8005224:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005228:	e6db      	b.n	8004fe2 <_printf_float+0x1ba>
 800522a:	f04f 0800 	mov.w	r8, #0
 800522e:	f104 091a 	add.w	r9, r4, #26
 8005232:	e7f2      	b.n	800521a <_printf_float+0x3f2>
 8005234:	2301      	movs	r3, #1
 8005236:	4642      	mov	r2, r8
 8005238:	e7df      	b.n	80051fa <_printf_float+0x3d2>
 800523a:	2301      	movs	r3, #1
 800523c:	464a      	mov	r2, r9
 800523e:	4631      	mov	r1, r6
 8005240:	4628      	mov	r0, r5
 8005242:	47b8      	blx	r7
 8005244:	3001      	adds	r0, #1
 8005246:	f43f ae3d 	beq.w	8004ec4 <_printf_float+0x9c>
 800524a:	f108 0801 	add.w	r8, r8, #1
 800524e:	68e3      	ldr	r3, [r4, #12]
 8005250:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005252:	1a5b      	subs	r3, r3, r1
 8005254:	4543      	cmp	r3, r8
 8005256:	dcf0      	bgt.n	800523a <_printf_float+0x412>
 8005258:	e6f7      	b.n	800504a <_printf_float+0x222>
 800525a:	f04f 0800 	mov.w	r8, #0
 800525e:	f104 0919 	add.w	r9, r4, #25
 8005262:	e7f4      	b.n	800524e <_printf_float+0x426>

08005264 <_printf_common>:
 8005264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005268:	4616      	mov	r6, r2
 800526a:	4699      	mov	r9, r3
 800526c:	688a      	ldr	r2, [r1, #8]
 800526e:	690b      	ldr	r3, [r1, #16]
 8005270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005274:	4293      	cmp	r3, r2
 8005276:	bfb8      	it	lt
 8005278:	4613      	movlt	r3, r2
 800527a:	6033      	str	r3, [r6, #0]
 800527c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005280:	4607      	mov	r7, r0
 8005282:	460c      	mov	r4, r1
 8005284:	b10a      	cbz	r2, 800528a <_printf_common+0x26>
 8005286:	3301      	adds	r3, #1
 8005288:	6033      	str	r3, [r6, #0]
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	0699      	lsls	r1, r3, #26
 800528e:	bf42      	ittt	mi
 8005290:	6833      	ldrmi	r3, [r6, #0]
 8005292:	3302      	addmi	r3, #2
 8005294:	6033      	strmi	r3, [r6, #0]
 8005296:	6825      	ldr	r5, [r4, #0]
 8005298:	f015 0506 	ands.w	r5, r5, #6
 800529c:	d106      	bne.n	80052ac <_printf_common+0x48>
 800529e:	f104 0a19 	add.w	sl, r4, #25
 80052a2:	68e3      	ldr	r3, [r4, #12]
 80052a4:	6832      	ldr	r2, [r6, #0]
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	42ab      	cmp	r3, r5
 80052aa:	dc26      	bgt.n	80052fa <_printf_common+0x96>
 80052ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052b0:	1e13      	subs	r3, r2, #0
 80052b2:	6822      	ldr	r2, [r4, #0]
 80052b4:	bf18      	it	ne
 80052b6:	2301      	movne	r3, #1
 80052b8:	0692      	lsls	r2, r2, #26
 80052ba:	d42b      	bmi.n	8005314 <_printf_common+0xb0>
 80052bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052c0:	4649      	mov	r1, r9
 80052c2:	4638      	mov	r0, r7
 80052c4:	47c0      	blx	r8
 80052c6:	3001      	adds	r0, #1
 80052c8:	d01e      	beq.n	8005308 <_printf_common+0xa4>
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	68e5      	ldr	r5, [r4, #12]
 80052ce:	6832      	ldr	r2, [r6, #0]
 80052d0:	f003 0306 	and.w	r3, r3, #6
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	bf08      	it	eq
 80052d8:	1aad      	subeq	r5, r5, r2
 80052da:	68a3      	ldr	r3, [r4, #8]
 80052dc:	6922      	ldr	r2, [r4, #16]
 80052de:	bf0c      	ite	eq
 80052e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052e4:	2500      	movne	r5, #0
 80052e6:	4293      	cmp	r3, r2
 80052e8:	bfc4      	itt	gt
 80052ea:	1a9b      	subgt	r3, r3, r2
 80052ec:	18ed      	addgt	r5, r5, r3
 80052ee:	2600      	movs	r6, #0
 80052f0:	341a      	adds	r4, #26
 80052f2:	42b5      	cmp	r5, r6
 80052f4:	d11a      	bne.n	800532c <_printf_common+0xc8>
 80052f6:	2000      	movs	r0, #0
 80052f8:	e008      	b.n	800530c <_printf_common+0xa8>
 80052fa:	2301      	movs	r3, #1
 80052fc:	4652      	mov	r2, sl
 80052fe:	4649      	mov	r1, r9
 8005300:	4638      	mov	r0, r7
 8005302:	47c0      	blx	r8
 8005304:	3001      	adds	r0, #1
 8005306:	d103      	bne.n	8005310 <_printf_common+0xac>
 8005308:	f04f 30ff 	mov.w	r0, #4294967295
 800530c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005310:	3501      	adds	r5, #1
 8005312:	e7c6      	b.n	80052a2 <_printf_common+0x3e>
 8005314:	18e1      	adds	r1, r4, r3
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	2030      	movs	r0, #48	; 0x30
 800531a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800531e:	4422      	add	r2, r4
 8005320:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005324:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005328:	3302      	adds	r3, #2
 800532a:	e7c7      	b.n	80052bc <_printf_common+0x58>
 800532c:	2301      	movs	r3, #1
 800532e:	4622      	mov	r2, r4
 8005330:	4649      	mov	r1, r9
 8005332:	4638      	mov	r0, r7
 8005334:	47c0      	blx	r8
 8005336:	3001      	adds	r0, #1
 8005338:	d0e6      	beq.n	8005308 <_printf_common+0xa4>
 800533a:	3601      	adds	r6, #1
 800533c:	e7d9      	b.n	80052f2 <_printf_common+0x8e>
	...

08005340 <_printf_i>:
 8005340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005344:	460c      	mov	r4, r1
 8005346:	4691      	mov	r9, r2
 8005348:	7e27      	ldrb	r7, [r4, #24]
 800534a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800534c:	2f78      	cmp	r7, #120	; 0x78
 800534e:	4680      	mov	r8, r0
 8005350:	469a      	mov	sl, r3
 8005352:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005356:	d807      	bhi.n	8005368 <_printf_i+0x28>
 8005358:	2f62      	cmp	r7, #98	; 0x62
 800535a:	d80a      	bhi.n	8005372 <_printf_i+0x32>
 800535c:	2f00      	cmp	r7, #0
 800535e:	f000 80d8 	beq.w	8005512 <_printf_i+0x1d2>
 8005362:	2f58      	cmp	r7, #88	; 0x58
 8005364:	f000 80a3 	beq.w	80054ae <_printf_i+0x16e>
 8005368:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800536c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005370:	e03a      	b.n	80053e8 <_printf_i+0xa8>
 8005372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005376:	2b15      	cmp	r3, #21
 8005378:	d8f6      	bhi.n	8005368 <_printf_i+0x28>
 800537a:	a001      	add	r0, pc, #4	; (adr r0, 8005380 <_printf_i+0x40>)
 800537c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005380:	080053d9 	.word	0x080053d9
 8005384:	080053ed 	.word	0x080053ed
 8005388:	08005369 	.word	0x08005369
 800538c:	08005369 	.word	0x08005369
 8005390:	08005369 	.word	0x08005369
 8005394:	08005369 	.word	0x08005369
 8005398:	080053ed 	.word	0x080053ed
 800539c:	08005369 	.word	0x08005369
 80053a0:	08005369 	.word	0x08005369
 80053a4:	08005369 	.word	0x08005369
 80053a8:	08005369 	.word	0x08005369
 80053ac:	080054f9 	.word	0x080054f9
 80053b0:	0800541d 	.word	0x0800541d
 80053b4:	080054db 	.word	0x080054db
 80053b8:	08005369 	.word	0x08005369
 80053bc:	08005369 	.word	0x08005369
 80053c0:	0800551b 	.word	0x0800551b
 80053c4:	08005369 	.word	0x08005369
 80053c8:	0800541d 	.word	0x0800541d
 80053cc:	08005369 	.word	0x08005369
 80053d0:	08005369 	.word	0x08005369
 80053d4:	080054e3 	.word	0x080054e3
 80053d8:	680b      	ldr	r3, [r1, #0]
 80053da:	1d1a      	adds	r2, r3, #4
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	600a      	str	r2, [r1, #0]
 80053e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053e8:	2301      	movs	r3, #1
 80053ea:	e0a3      	b.n	8005534 <_printf_i+0x1f4>
 80053ec:	6825      	ldr	r5, [r4, #0]
 80053ee:	6808      	ldr	r0, [r1, #0]
 80053f0:	062e      	lsls	r6, r5, #24
 80053f2:	f100 0304 	add.w	r3, r0, #4
 80053f6:	d50a      	bpl.n	800540e <_printf_i+0xce>
 80053f8:	6805      	ldr	r5, [r0, #0]
 80053fa:	600b      	str	r3, [r1, #0]
 80053fc:	2d00      	cmp	r5, #0
 80053fe:	da03      	bge.n	8005408 <_printf_i+0xc8>
 8005400:	232d      	movs	r3, #45	; 0x2d
 8005402:	426d      	negs	r5, r5
 8005404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005408:	485e      	ldr	r0, [pc, #376]	; (8005584 <_printf_i+0x244>)
 800540a:	230a      	movs	r3, #10
 800540c:	e019      	b.n	8005442 <_printf_i+0x102>
 800540e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005412:	6805      	ldr	r5, [r0, #0]
 8005414:	600b      	str	r3, [r1, #0]
 8005416:	bf18      	it	ne
 8005418:	b22d      	sxthne	r5, r5
 800541a:	e7ef      	b.n	80053fc <_printf_i+0xbc>
 800541c:	680b      	ldr	r3, [r1, #0]
 800541e:	6825      	ldr	r5, [r4, #0]
 8005420:	1d18      	adds	r0, r3, #4
 8005422:	6008      	str	r0, [r1, #0]
 8005424:	0628      	lsls	r0, r5, #24
 8005426:	d501      	bpl.n	800542c <_printf_i+0xec>
 8005428:	681d      	ldr	r5, [r3, #0]
 800542a:	e002      	b.n	8005432 <_printf_i+0xf2>
 800542c:	0669      	lsls	r1, r5, #25
 800542e:	d5fb      	bpl.n	8005428 <_printf_i+0xe8>
 8005430:	881d      	ldrh	r5, [r3, #0]
 8005432:	4854      	ldr	r0, [pc, #336]	; (8005584 <_printf_i+0x244>)
 8005434:	2f6f      	cmp	r7, #111	; 0x6f
 8005436:	bf0c      	ite	eq
 8005438:	2308      	moveq	r3, #8
 800543a:	230a      	movne	r3, #10
 800543c:	2100      	movs	r1, #0
 800543e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005442:	6866      	ldr	r6, [r4, #4]
 8005444:	60a6      	str	r6, [r4, #8]
 8005446:	2e00      	cmp	r6, #0
 8005448:	bfa2      	ittt	ge
 800544a:	6821      	ldrge	r1, [r4, #0]
 800544c:	f021 0104 	bicge.w	r1, r1, #4
 8005450:	6021      	strge	r1, [r4, #0]
 8005452:	b90d      	cbnz	r5, 8005458 <_printf_i+0x118>
 8005454:	2e00      	cmp	r6, #0
 8005456:	d04d      	beq.n	80054f4 <_printf_i+0x1b4>
 8005458:	4616      	mov	r6, r2
 800545a:	fbb5 f1f3 	udiv	r1, r5, r3
 800545e:	fb03 5711 	mls	r7, r3, r1, r5
 8005462:	5dc7      	ldrb	r7, [r0, r7]
 8005464:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005468:	462f      	mov	r7, r5
 800546a:	42bb      	cmp	r3, r7
 800546c:	460d      	mov	r5, r1
 800546e:	d9f4      	bls.n	800545a <_printf_i+0x11a>
 8005470:	2b08      	cmp	r3, #8
 8005472:	d10b      	bne.n	800548c <_printf_i+0x14c>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	07df      	lsls	r7, r3, #31
 8005478:	d508      	bpl.n	800548c <_printf_i+0x14c>
 800547a:	6923      	ldr	r3, [r4, #16]
 800547c:	6861      	ldr	r1, [r4, #4]
 800547e:	4299      	cmp	r1, r3
 8005480:	bfde      	ittt	le
 8005482:	2330      	movle	r3, #48	; 0x30
 8005484:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005488:	f106 36ff 	addle.w	r6, r6, #4294967295
 800548c:	1b92      	subs	r2, r2, r6
 800548e:	6122      	str	r2, [r4, #16]
 8005490:	f8cd a000 	str.w	sl, [sp]
 8005494:	464b      	mov	r3, r9
 8005496:	aa03      	add	r2, sp, #12
 8005498:	4621      	mov	r1, r4
 800549a:	4640      	mov	r0, r8
 800549c:	f7ff fee2 	bl	8005264 <_printf_common>
 80054a0:	3001      	adds	r0, #1
 80054a2:	d14c      	bne.n	800553e <_printf_i+0x1fe>
 80054a4:	f04f 30ff 	mov.w	r0, #4294967295
 80054a8:	b004      	add	sp, #16
 80054aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ae:	4835      	ldr	r0, [pc, #212]	; (8005584 <_printf_i+0x244>)
 80054b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	680e      	ldr	r6, [r1, #0]
 80054b8:	061f      	lsls	r7, r3, #24
 80054ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80054be:	600e      	str	r6, [r1, #0]
 80054c0:	d514      	bpl.n	80054ec <_printf_i+0x1ac>
 80054c2:	07d9      	lsls	r1, r3, #31
 80054c4:	bf44      	itt	mi
 80054c6:	f043 0320 	orrmi.w	r3, r3, #32
 80054ca:	6023      	strmi	r3, [r4, #0]
 80054cc:	b91d      	cbnz	r5, 80054d6 <_printf_i+0x196>
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	f023 0320 	bic.w	r3, r3, #32
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	2310      	movs	r3, #16
 80054d8:	e7b0      	b.n	800543c <_printf_i+0xfc>
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	f043 0320 	orr.w	r3, r3, #32
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	2378      	movs	r3, #120	; 0x78
 80054e4:	4828      	ldr	r0, [pc, #160]	; (8005588 <_printf_i+0x248>)
 80054e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054ea:	e7e3      	b.n	80054b4 <_printf_i+0x174>
 80054ec:	065e      	lsls	r6, r3, #25
 80054ee:	bf48      	it	mi
 80054f0:	b2ad      	uxthmi	r5, r5
 80054f2:	e7e6      	b.n	80054c2 <_printf_i+0x182>
 80054f4:	4616      	mov	r6, r2
 80054f6:	e7bb      	b.n	8005470 <_printf_i+0x130>
 80054f8:	680b      	ldr	r3, [r1, #0]
 80054fa:	6826      	ldr	r6, [r4, #0]
 80054fc:	6960      	ldr	r0, [r4, #20]
 80054fe:	1d1d      	adds	r5, r3, #4
 8005500:	600d      	str	r5, [r1, #0]
 8005502:	0635      	lsls	r5, r6, #24
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	d501      	bpl.n	800550c <_printf_i+0x1cc>
 8005508:	6018      	str	r0, [r3, #0]
 800550a:	e002      	b.n	8005512 <_printf_i+0x1d2>
 800550c:	0671      	lsls	r1, r6, #25
 800550e:	d5fb      	bpl.n	8005508 <_printf_i+0x1c8>
 8005510:	8018      	strh	r0, [r3, #0]
 8005512:	2300      	movs	r3, #0
 8005514:	6123      	str	r3, [r4, #16]
 8005516:	4616      	mov	r6, r2
 8005518:	e7ba      	b.n	8005490 <_printf_i+0x150>
 800551a:	680b      	ldr	r3, [r1, #0]
 800551c:	1d1a      	adds	r2, r3, #4
 800551e:	600a      	str	r2, [r1, #0]
 8005520:	681e      	ldr	r6, [r3, #0]
 8005522:	6862      	ldr	r2, [r4, #4]
 8005524:	2100      	movs	r1, #0
 8005526:	4630      	mov	r0, r6
 8005528:	f7fa fe92 	bl	8000250 <memchr>
 800552c:	b108      	cbz	r0, 8005532 <_printf_i+0x1f2>
 800552e:	1b80      	subs	r0, r0, r6
 8005530:	6060      	str	r0, [r4, #4]
 8005532:	6863      	ldr	r3, [r4, #4]
 8005534:	6123      	str	r3, [r4, #16]
 8005536:	2300      	movs	r3, #0
 8005538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800553c:	e7a8      	b.n	8005490 <_printf_i+0x150>
 800553e:	6923      	ldr	r3, [r4, #16]
 8005540:	4632      	mov	r2, r6
 8005542:	4649      	mov	r1, r9
 8005544:	4640      	mov	r0, r8
 8005546:	47d0      	blx	sl
 8005548:	3001      	adds	r0, #1
 800554a:	d0ab      	beq.n	80054a4 <_printf_i+0x164>
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	079b      	lsls	r3, r3, #30
 8005550:	d413      	bmi.n	800557a <_printf_i+0x23a>
 8005552:	68e0      	ldr	r0, [r4, #12]
 8005554:	9b03      	ldr	r3, [sp, #12]
 8005556:	4298      	cmp	r0, r3
 8005558:	bfb8      	it	lt
 800555a:	4618      	movlt	r0, r3
 800555c:	e7a4      	b.n	80054a8 <_printf_i+0x168>
 800555e:	2301      	movs	r3, #1
 8005560:	4632      	mov	r2, r6
 8005562:	4649      	mov	r1, r9
 8005564:	4640      	mov	r0, r8
 8005566:	47d0      	blx	sl
 8005568:	3001      	adds	r0, #1
 800556a:	d09b      	beq.n	80054a4 <_printf_i+0x164>
 800556c:	3501      	adds	r5, #1
 800556e:	68e3      	ldr	r3, [r4, #12]
 8005570:	9903      	ldr	r1, [sp, #12]
 8005572:	1a5b      	subs	r3, r3, r1
 8005574:	42ab      	cmp	r3, r5
 8005576:	dcf2      	bgt.n	800555e <_printf_i+0x21e>
 8005578:	e7eb      	b.n	8005552 <_printf_i+0x212>
 800557a:	2500      	movs	r5, #0
 800557c:	f104 0619 	add.w	r6, r4, #25
 8005580:	e7f5      	b.n	800556e <_printf_i+0x22e>
 8005582:	bf00      	nop
 8005584:	08008192 	.word	0x08008192
 8005588:	080081a3 	.word	0x080081a3

0800558c <iprintf>:
 800558c:	b40f      	push	{r0, r1, r2, r3}
 800558e:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <iprintf+0x2c>)
 8005590:	b513      	push	{r0, r1, r4, lr}
 8005592:	681c      	ldr	r4, [r3, #0]
 8005594:	b124      	cbz	r4, 80055a0 <iprintf+0x14>
 8005596:	69a3      	ldr	r3, [r4, #24]
 8005598:	b913      	cbnz	r3, 80055a0 <iprintf+0x14>
 800559a:	4620      	mov	r0, r4
 800559c:	f001 f88c 	bl	80066b8 <__sinit>
 80055a0:	ab05      	add	r3, sp, #20
 80055a2:	9a04      	ldr	r2, [sp, #16]
 80055a4:	68a1      	ldr	r1, [r4, #8]
 80055a6:	9301      	str	r3, [sp, #4]
 80055a8:	4620      	mov	r0, r4
 80055aa:	f001 ff63 	bl	8007474 <_vfiprintf_r>
 80055ae:	b002      	add	sp, #8
 80055b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055b4:	b004      	add	sp, #16
 80055b6:	4770      	bx	lr
 80055b8:	2000000c 	.word	0x2000000c

080055bc <_puts_r>:
 80055bc:	b570      	push	{r4, r5, r6, lr}
 80055be:	460e      	mov	r6, r1
 80055c0:	4605      	mov	r5, r0
 80055c2:	b118      	cbz	r0, 80055cc <_puts_r+0x10>
 80055c4:	6983      	ldr	r3, [r0, #24]
 80055c6:	b90b      	cbnz	r3, 80055cc <_puts_r+0x10>
 80055c8:	f001 f876 	bl	80066b8 <__sinit>
 80055cc:	69ab      	ldr	r3, [r5, #24]
 80055ce:	68ac      	ldr	r4, [r5, #8]
 80055d0:	b913      	cbnz	r3, 80055d8 <_puts_r+0x1c>
 80055d2:	4628      	mov	r0, r5
 80055d4:	f001 f870 	bl	80066b8 <__sinit>
 80055d8:	4b2c      	ldr	r3, [pc, #176]	; (800568c <_puts_r+0xd0>)
 80055da:	429c      	cmp	r4, r3
 80055dc:	d120      	bne.n	8005620 <_puts_r+0x64>
 80055de:	686c      	ldr	r4, [r5, #4]
 80055e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055e2:	07db      	lsls	r3, r3, #31
 80055e4:	d405      	bmi.n	80055f2 <_puts_r+0x36>
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	0598      	lsls	r0, r3, #22
 80055ea:	d402      	bmi.n	80055f2 <_puts_r+0x36>
 80055ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ee:	f001 f906 	bl	80067fe <__retarget_lock_acquire_recursive>
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	0719      	lsls	r1, r3, #28
 80055f6:	d51d      	bpl.n	8005634 <_puts_r+0x78>
 80055f8:	6923      	ldr	r3, [r4, #16]
 80055fa:	b1db      	cbz	r3, 8005634 <_puts_r+0x78>
 80055fc:	3e01      	subs	r6, #1
 80055fe:	68a3      	ldr	r3, [r4, #8]
 8005600:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005604:	3b01      	subs	r3, #1
 8005606:	60a3      	str	r3, [r4, #8]
 8005608:	bb39      	cbnz	r1, 800565a <_puts_r+0x9e>
 800560a:	2b00      	cmp	r3, #0
 800560c:	da38      	bge.n	8005680 <_puts_r+0xc4>
 800560e:	4622      	mov	r2, r4
 8005610:	210a      	movs	r1, #10
 8005612:	4628      	mov	r0, r5
 8005614:	f000 f868 	bl	80056e8 <__swbuf_r>
 8005618:	3001      	adds	r0, #1
 800561a:	d011      	beq.n	8005640 <_puts_r+0x84>
 800561c:	250a      	movs	r5, #10
 800561e:	e011      	b.n	8005644 <_puts_r+0x88>
 8005620:	4b1b      	ldr	r3, [pc, #108]	; (8005690 <_puts_r+0xd4>)
 8005622:	429c      	cmp	r4, r3
 8005624:	d101      	bne.n	800562a <_puts_r+0x6e>
 8005626:	68ac      	ldr	r4, [r5, #8]
 8005628:	e7da      	b.n	80055e0 <_puts_r+0x24>
 800562a:	4b1a      	ldr	r3, [pc, #104]	; (8005694 <_puts_r+0xd8>)
 800562c:	429c      	cmp	r4, r3
 800562e:	bf08      	it	eq
 8005630:	68ec      	ldreq	r4, [r5, #12]
 8005632:	e7d5      	b.n	80055e0 <_puts_r+0x24>
 8005634:	4621      	mov	r1, r4
 8005636:	4628      	mov	r0, r5
 8005638:	f000 f8a8 	bl	800578c <__swsetup_r>
 800563c:	2800      	cmp	r0, #0
 800563e:	d0dd      	beq.n	80055fc <_puts_r+0x40>
 8005640:	f04f 35ff 	mov.w	r5, #4294967295
 8005644:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005646:	07da      	lsls	r2, r3, #31
 8005648:	d405      	bmi.n	8005656 <_puts_r+0x9a>
 800564a:	89a3      	ldrh	r3, [r4, #12]
 800564c:	059b      	lsls	r3, r3, #22
 800564e:	d402      	bmi.n	8005656 <_puts_r+0x9a>
 8005650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005652:	f001 f8d5 	bl	8006800 <__retarget_lock_release_recursive>
 8005656:	4628      	mov	r0, r5
 8005658:	bd70      	pop	{r4, r5, r6, pc}
 800565a:	2b00      	cmp	r3, #0
 800565c:	da04      	bge.n	8005668 <_puts_r+0xac>
 800565e:	69a2      	ldr	r2, [r4, #24]
 8005660:	429a      	cmp	r2, r3
 8005662:	dc06      	bgt.n	8005672 <_puts_r+0xb6>
 8005664:	290a      	cmp	r1, #10
 8005666:	d004      	beq.n	8005672 <_puts_r+0xb6>
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	1c5a      	adds	r2, r3, #1
 800566c:	6022      	str	r2, [r4, #0]
 800566e:	7019      	strb	r1, [r3, #0]
 8005670:	e7c5      	b.n	80055fe <_puts_r+0x42>
 8005672:	4622      	mov	r2, r4
 8005674:	4628      	mov	r0, r5
 8005676:	f000 f837 	bl	80056e8 <__swbuf_r>
 800567a:	3001      	adds	r0, #1
 800567c:	d1bf      	bne.n	80055fe <_puts_r+0x42>
 800567e:	e7df      	b.n	8005640 <_puts_r+0x84>
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	250a      	movs	r5, #10
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	6022      	str	r2, [r4, #0]
 8005688:	701d      	strb	r5, [r3, #0]
 800568a:	e7db      	b.n	8005644 <_puts_r+0x88>
 800568c:	08008268 	.word	0x08008268
 8005690:	08008288 	.word	0x08008288
 8005694:	08008248 	.word	0x08008248

08005698 <puts>:
 8005698:	4b02      	ldr	r3, [pc, #8]	; (80056a4 <puts+0xc>)
 800569a:	4601      	mov	r1, r0
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	f7ff bf8d 	b.w	80055bc <_puts_r>
 80056a2:	bf00      	nop
 80056a4:	2000000c 	.word	0x2000000c

080056a8 <siprintf>:
 80056a8:	b40e      	push	{r1, r2, r3}
 80056aa:	b500      	push	{lr}
 80056ac:	b09c      	sub	sp, #112	; 0x70
 80056ae:	ab1d      	add	r3, sp, #116	; 0x74
 80056b0:	9002      	str	r0, [sp, #8]
 80056b2:	9006      	str	r0, [sp, #24]
 80056b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056b8:	4809      	ldr	r0, [pc, #36]	; (80056e0 <siprintf+0x38>)
 80056ba:	9107      	str	r1, [sp, #28]
 80056bc:	9104      	str	r1, [sp, #16]
 80056be:	4909      	ldr	r1, [pc, #36]	; (80056e4 <siprintf+0x3c>)
 80056c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80056c4:	9105      	str	r1, [sp, #20]
 80056c6:	6800      	ldr	r0, [r0, #0]
 80056c8:	9301      	str	r3, [sp, #4]
 80056ca:	a902      	add	r1, sp, #8
 80056cc:	f001 fda8 	bl	8007220 <_svfiprintf_r>
 80056d0:	9b02      	ldr	r3, [sp, #8]
 80056d2:	2200      	movs	r2, #0
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	b01c      	add	sp, #112	; 0x70
 80056d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80056dc:	b003      	add	sp, #12
 80056de:	4770      	bx	lr
 80056e0:	2000000c 	.word	0x2000000c
 80056e4:	ffff0208 	.word	0xffff0208

080056e8 <__swbuf_r>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	460e      	mov	r6, r1
 80056ec:	4614      	mov	r4, r2
 80056ee:	4605      	mov	r5, r0
 80056f0:	b118      	cbz	r0, 80056fa <__swbuf_r+0x12>
 80056f2:	6983      	ldr	r3, [r0, #24]
 80056f4:	b90b      	cbnz	r3, 80056fa <__swbuf_r+0x12>
 80056f6:	f000 ffdf 	bl	80066b8 <__sinit>
 80056fa:	4b21      	ldr	r3, [pc, #132]	; (8005780 <__swbuf_r+0x98>)
 80056fc:	429c      	cmp	r4, r3
 80056fe:	d12b      	bne.n	8005758 <__swbuf_r+0x70>
 8005700:	686c      	ldr	r4, [r5, #4]
 8005702:	69a3      	ldr	r3, [r4, #24]
 8005704:	60a3      	str	r3, [r4, #8]
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	071a      	lsls	r2, r3, #28
 800570a:	d52f      	bpl.n	800576c <__swbuf_r+0x84>
 800570c:	6923      	ldr	r3, [r4, #16]
 800570e:	b36b      	cbz	r3, 800576c <__swbuf_r+0x84>
 8005710:	6923      	ldr	r3, [r4, #16]
 8005712:	6820      	ldr	r0, [r4, #0]
 8005714:	1ac0      	subs	r0, r0, r3
 8005716:	6963      	ldr	r3, [r4, #20]
 8005718:	b2f6      	uxtb	r6, r6
 800571a:	4283      	cmp	r3, r0
 800571c:	4637      	mov	r7, r6
 800571e:	dc04      	bgt.n	800572a <__swbuf_r+0x42>
 8005720:	4621      	mov	r1, r4
 8005722:	4628      	mov	r0, r5
 8005724:	f000 ff34 	bl	8006590 <_fflush_r>
 8005728:	bb30      	cbnz	r0, 8005778 <__swbuf_r+0x90>
 800572a:	68a3      	ldr	r3, [r4, #8]
 800572c:	3b01      	subs	r3, #1
 800572e:	60a3      	str	r3, [r4, #8]
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	6022      	str	r2, [r4, #0]
 8005736:	701e      	strb	r6, [r3, #0]
 8005738:	6963      	ldr	r3, [r4, #20]
 800573a:	3001      	adds	r0, #1
 800573c:	4283      	cmp	r3, r0
 800573e:	d004      	beq.n	800574a <__swbuf_r+0x62>
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	07db      	lsls	r3, r3, #31
 8005744:	d506      	bpl.n	8005754 <__swbuf_r+0x6c>
 8005746:	2e0a      	cmp	r6, #10
 8005748:	d104      	bne.n	8005754 <__swbuf_r+0x6c>
 800574a:	4621      	mov	r1, r4
 800574c:	4628      	mov	r0, r5
 800574e:	f000 ff1f 	bl	8006590 <_fflush_r>
 8005752:	b988      	cbnz	r0, 8005778 <__swbuf_r+0x90>
 8005754:	4638      	mov	r0, r7
 8005756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005758:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <__swbuf_r+0x9c>)
 800575a:	429c      	cmp	r4, r3
 800575c:	d101      	bne.n	8005762 <__swbuf_r+0x7a>
 800575e:	68ac      	ldr	r4, [r5, #8]
 8005760:	e7cf      	b.n	8005702 <__swbuf_r+0x1a>
 8005762:	4b09      	ldr	r3, [pc, #36]	; (8005788 <__swbuf_r+0xa0>)
 8005764:	429c      	cmp	r4, r3
 8005766:	bf08      	it	eq
 8005768:	68ec      	ldreq	r4, [r5, #12]
 800576a:	e7ca      	b.n	8005702 <__swbuf_r+0x1a>
 800576c:	4621      	mov	r1, r4
 800576e:	4628      	mov	r0, r5
 8005770:	f000 f80c 	bl	800578c <__swsetup_r>
 8005774:	2800      	cmp	r0, #0
 8005776:	d0cb      	beq.n	8005710 <__swbuf_r+0x28>
 8005778:	f04f 37ff 	mov.w	r7, #4294967295
 800577c:	e7ea      	b.n	8005754 <__swbuf_r+0x6c>
 800577e:	bf00      	nop
 8005780:	08008268 	.word	0x08008268
 8005784:	08008288 	.word	0x08008288
 8005788:	08008248 	.word	0x08008248

0800578c <__swsetup_r>:
 800578c:	4b32      	ldr	r3, [pc, #200]	; (8005858 <__swsetup_r+0xcc>)
 800578e:	b570      	push	{r4, r5, r6, lr}
 8005790:	681d      	ldr	r5, [r3, #0]
 8005792:	4606      	mov	r6, r0
 8005794:	460c      	mov	r4, r1
 8005796:	b125      	cbz	r5, 80057a2 <__swsetup_r+0x16>
 8005798:	69ab      	ldr	r3, [r5, #24]
 800579a:	b913      	cbnz	r3, 80057a2 <__swsetup_r+0x16>
 800579c:	4628      	mov	r0, r5
 800579e:	f000 ff8b 	bl	80066b8 <__sinit>
 80057a2:	4b2e      	ldr	r3, [pc, #184]	; (800585c <__swsetup_r+0xd0>)
 80057a4:	429c      	cmp	r4, r3
 80057a6:	d10f      	bne.n	80057c8 <__swsetup_r+0x3c>
 80057a8:	686c      	ldr	r4, [r5, #4]
 80057aa:	89a3      	ldrh	r3, [r4, #12]
 80057ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057b0:	0719      	lsls	r1, r3, #28
 80057b2:	d42c      	bmi.n	800580e <__swsetup_r+0x82>
 80057b4:	06dd      	lsls	r5, r3, #27
 80057b6:	d411      	bmi.n	80057dc <__swsetup_r+0x50>
 80057b8:	2309      	movs	r3, #9
 80057ba:	6033      	str	r3, [r6, #0]
 80057bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057c0:	81a3      	strh	r3, [r4, #12]
 80057c2:	f04f 30ff 	mov.w	r0, #4294967295
 80057c6:	e03e      	b.n	8005846 <__swsetup_r+0xba>
 80057c8:	4b25      	ldr	r3, [pc, #148]	; (8005860 <__swsetup_r+0xd4>)
 80057ca:	429c      	cmp	r4, r3
 80057cc:	d101      	bne.n	80057d2 <__swsetup_r+0x46>
 80057ce:	68ac      	ldr	r4, [r5, #8]
 80057d0:	e7eb      	b.n	80057aa <__swsetup_r+0x1e>
 80057d2:	4b24      	ldr	r3, [pc, #144]	; (8005864 <__swsetup_r+0xd8>)
 80057d4:	429c      	cmp	r4, r3
 80057d6:	bf08      	it	eq
 80057d8:	68ec      	ldreq	r4, [r5, #12]
 80057da:	e7e6      	b.n	80057aa <__swsetup_r+0x1e>
 80057dc:	0758      	lsls	r0, r3, #29
 80057de:	d512      	bpl.n	8005806 <__swsetup_r+0x7a>
 80057e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057e2:	b141      	cbz	r1, 80057f6 <__swsetup_r+0x6a>
 80057e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057e8:	4299      	cmp	r1, r3
 80057ea:	d002      	beq.n	80057f2 <__swsetup_r+0x66>
 80057ec:	4630      	mov	r0, r6
 80057ee:	f001 fc11 	bl	8007014 <_free_r>
 80057f2:	2300      	movs	r3, #0
 80057f4:	6363      	str	r3, [r4, #52]	; 0x34
 80057f6:	89a3      	ldrh	r3, [r4, #12]
 80057f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057fc:	81a3      	strh	r3, [r4, #12]
 80057fe:	2300      	movs	r3, #0
 8005800:	6063      	str	r3, [r4, #4]
 8005802:	6923      	ldr	r3, [r4, #16]
 8005804:	6023      	str	r3, [r4, #0]
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	f043 0308 	orr.w	r3, r3, #8
 800580c:	81a3      	strh	r3, [r4, #12]
 800580e:	6923      	ldr	r3, [r4, #16]
 8005810:	b94b      	cbnz	r3, 8005826 <__swsetup_r+0x9a>
 8005812:	89a3      	ldrh	r3, [r4, #12]
 8005814:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800581c:	d003      	beq.n	8005826 <__swsetup_r+0x9a>
 800581e:	4621      	mov	r1, r4
 8005820:	4630      	mov	r0, r6
 8005822:	f001 f813 	bl	800684c <__smakebuf_r>
 8005826:	89a0      	ldrh	r0, [r4, #12]
 8005828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800582c:	f010 0301 	ands.w	r3, r0, #1
 8005830:	d00a      	beq.n	8005848 <__swsetup_r+0xbc>
 8005832:	2300      	movs	r3, #0
 8005834:	60a3      	str	r3, [r4, #8]
 8005836:	6963      	ldr	r3, [r4, #20]
 8005838:	425b      	negs	r3, r3
 800583a:	61a3      	str	r3, [r4, #24]
 800583c:	6923      	ldr	r3, [r4, #16]
 800583e:	b943      	cbnz	r3, 8005852 <__swsetup_r+0xc6>
 8005840:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005844:	d1ba      	bne.n	80057bc <__swsetup_r+0x30>
 8005846:	bd70      	pop	{r4, r5, r6, pc}
 8005848:	0781      	lsls	r1, r0, #30
 800584a:	bf58      	it	pl
 800584c:	6963      	ldrpl	r3, [r4, #20]
 800584e:	60a3      	str	r3, [r4, #8]
 8005850:	e7f4      	b.n	800583c <__swsetup_r+0xb0>
 8005852:	2000      	movs	r0, #0
 8005854:	e7f7      	b.n	8005846 <__swsetup_r+0xba>
 8005856:	bf00      	nop
 8005858:	2000000c 	.word	0x2000000c
 800585c:	08008268 	.word	0x08008268
 8005860:	08008288 	.word	0x08008288
 8005864:	08008248 	.word	0x08008248

08005868 <quorem>:
 8005868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800586c:	6903      	ldr	r3, [r0, #16]
 800586e:	690c      	ldr	r4, [r1, #16]
 8005870:	42a3      	cmp	r3, r4
 8005872:	4607      	mov	r7, r0
 8005874:	f2c0 8081 	blt.w	800597a <quorem+0x112>
 8005878:	3c01      	subs	r4, #1
 800587a:	f101 0814 	add.w	r8, r1, #20
 800587e:	f100 0514 	add.w	r5, r0, #20
 8005882:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005886:	9301      	str	r3, [sp, #4]
 8005888:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800588c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005890:	3301      	adds	r3, #1
 8005892:	429a      	cmp	r2, r3
 8005894:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005898:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800589c:	fbb2 f6f3 	udiv	r6, r2, r3
 80058a0:	d331      	bcc.n	8005906 <quorem+0x9e>
 80058a2:	f04f 0e00 	mov.w	lr, #0
 80058a6:	4640      	mov	r0, r8
 80058a8:	46ac      	mov	ip, r5
 80058aa:	46f2      	mov	sl, lr
 80058ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80058b0:	b293      	uxth	r3, r2
 80058b2:	fb06 e303 	mla	r3, r6, r3, lr
 80058b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	ebaa 0303 	sub.w	r3, sl, r3
 80058c0:	0c12      	lsrs	r2, r2, #16
 80058c2:	f8dc a000 	ldr.w	sl, [ip]
 80058c6:	fb06 e202 	mla	r2, r6, r2, lr
 80058ca:	fa13 f38a 	uxtah	r3, r3, sl
 80058ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80058d2:	fa1f fa82 	uxth.w	sl, r2
 80058d6:	f8dc 2000 	ldr.w	r2, [ip]
 80058da:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80058de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058e8:	4581      	cmp	r9, r0
 80058ea:	f84c 3b04 	str.w	r3, [ip], #4
 80058ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80058f2:	d2db      	bcs.n	80058ac <quorem+0x44>
 80058f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80058f8:	b92b      	cbnz	r3, 8005906 <quorem+0x9e>
 80058fa:	9b01      	ldr	r3, [sp, #4]
 80058fc:	3b04      	subs	r3, #4
 80058fe:	429d      	cmp	r5, r3
 8005900:	461a      	mov	r2, r3
 8005902:	d32e      	bcc.n	8005962 <quorem+0xfa>
 8005904:	613c      	str	r4, [r7, #16]
 8005906:	4638      	mov	r0, r7
 8005908:	f001 fa74 	bl	8006df4 <__mcmp>
 800590c:	2800      	cmp	r0, #0
 800590e:	db24      	blt.n	800595a <quorem+0xf2>
 8005910:	3601      	adds	r6, #1
 8005912:	4628      	mov	r0, r5
 8005914:	f04f 0c00 	mov.w	ip, #0
 8005918:	f858 2b04 	ldr.w	r2, [r8], #4
 800591c:	f8d0 e000 	ldr.w	lr, [r0]
 8005920:	b293      	uxth	r3, r2
 8005922:	ebac 0303 	sub.w	r3, ip, r3
 8005926:	0c12      	lsrs	r2, r2, #16
 8005928:	fa13 f38e 	uxtah	r3, r3, lr
 800592c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005930:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005934:	b29b      	uxth	r3, r3
 8005936:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800593a:	45c1      	cmp	r9, r8
 800593c:	f840 3b04 	str.w	r3, [r0], #4
 8005940:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005944:	d2e8      	bcs.n	8005918 <quorem+0xb0>
 8005946:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800594a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800594e:	b922      	cbnz	r2, 800595a <quorem+0xf2>
 8005950:	3b04      	subs	r3, #4
 8005952:	429d      	cmp	r5, r3
 8005954:	461a      	mov	r2, r3
 8005956:	d30a      	bcc.n	800596e <quorem+0x106>
 8005958:	613c      	str	r4, [r7, #16]
 800595a:	4630      	mov	r0, r6
 800595c:	b003      	add	sp, #12
 800595e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	3b04      	subs	r3, #4
 8005966:	2a00      	cmp	r2, #0
 8005968:	d1cc      	bne.n	8005904 <quorem+0x9c>
 800596a:	3c01      	subs	r4, #1
 800596c:	e7c7      	b.n	80058fe <quorem+0x96>
 800596e:	6812      	ldr	r2, [r2, #0]
 8005970:	3b04      	subs	r3, #4
 8005972:	2a00      	cmp	r2, #0
 8005974:	d1f0      	bne.n	8005958 <quorem+0xf0>
 8005976:	3c01      	subs	r4, #1
 8005978:	e7eb      	b.n	8005952 <quorem+0xea>
 800597a:	2000      	movs	r0, #0
 800597c:	e7ee      	b.n	800595c <quorem+0xf4>
	...

08005980 <_dtoa_r>:
 8005980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005984:	ec59 8b10 	vmov	r8, r9, d0
 8005988:	b095      	sub	sp, #84	; 0x54
 800598a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800598c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800598e:	9107      	str	r1, [sp, #28]
 8005990:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005994:	4606      	mov	r6, r0
 8005996:	9209      	str	r2, [sp, #36]	; 0x24
 8005998:	9310      	str	r3, [sp, #64]	; 0x40
 800599a:	b975      	cbnz	r5, 80059ba <_dtoa_r+0x3a>
 800599c:	2010      	movs	r0, #16
 800599e:	f000 ff95 	bl	80068cc <malloc>
 80059a2:	4602      	mov	r2, r0
 80059a4:	6270      	str	r0, [r6, #36]	; 0x24
 80059a6:	b920      	cbnz	r0, 80059b2 <_dtoa_r+0x32>
 80059a8:	4bab      	ldr	r3, [pc, #684]	; (8005c58 <_dtoa_r+0x2d8>)
 80059aa:	21ea      	movs	r1, #234	; 0xea
 80059ac:	48ab      	ldr	r0, [pc, #684]	; (8005c5c <_dtoa_r+0x2dc>)
 80059ae:	f001 fef7 	bl	80077a0 <__assert_func>
 80059b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80059b6:	6005      	str	r5, [r0, #0]
 80059b8:	60c5      	str	r5, [r0, #12]
 80059ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80059bc:	6819      	ldr	r1, [r3, #0]
 80059be:	b151      	cbz	r1, 80059d6 <_dtoa_r+0x56>
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	604a      	str	r2, [r1, #4]
 80059c4:	2301      	movs	r3, #1
 80059c6:	4093      	lsls	r3, r2
 80059c8:	608b      	str	r3, [r1, #8]
 80059ca:	4630      	mov	r0, r6
 80059cc:	f000 ffd4 	bl	8006978 <_Bfree>
 80059d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	f1b9 0300 	subs.w	r3, r9, #0
 80059da:	bfbb      	ittet	lt
 80059dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80059e0:	9303      	strlt	r3, [sp, #12]
 80059e2:	2300      	movge	r3, #0
 80059e4:	2201      	movlt	r2, #1
 80059e6:	bfac      	ite	ge
 80059e8:	6023      	strge	r3, [r4, #0]
 80059ea:	6022      	strlt	r2, [r4, #0]
 80059ec:	4b9c      	ldr	r3, [pc, #624]	; (8005c60 <_dtoa_r+0x2e0>)
 80059ee:	9c03      	ldr	r4, [sp, #12]
 80059f0:	43a3      	bics	r3, r4
 80059f2:	d11a      	bne.n	8005a2a <_dtoa_r+0xaa>
 80059f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80059f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005a00:	ea53 0308 	orrs.w	r3, r3, r8
 8005a04:	f000 8512 	beq.w	800642c <_dtoa_r+0xaac>
 8005a08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a0a:	b953      	cbnz	r3, 8005a22 <_dtoa_r+0xa2>
 8005a0c:	4b95      	ldr	r3, [pc, #596]	; (8005c64 <_dtoa_r+0x2e4>)
 8005a0e:	e01f      	b.n	8005a50 <_dtoa_r+0xd0>
 8005a10:	4b95      	ldr	r3, [pc, #596]	; (8005c68 <_dtoa_r+0x2e8>)
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	3308      	adds	r3, #8
 8005a16:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	9800      	ldr	r0, [sp, #0]
 8005a1c:	b015      	add	sp, #84	; 0x54
 8005a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a22:	4b90      	ldr	r3, [pc, #576]	; (8005c64 <_dtoa_r+0x2e4>)
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	3303      	adds	r3, #3
 8005a28:	e7f5      	b.n	8005a16 <_dtoa_r+0x96>
 8005a2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a2e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a36:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005a3a:	d10b      	bne.n	8005a54 <_dtoa_r+0xd4>
 8005a3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a3e:	2301      	movs	r3, #1
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 84ee 	beq.w	8006426 <_dtoa_r+0xaa6>
 8005a4a:	4888      	ldr	r0, [pc, #544]	; (8005c6c <_dtoa_r+0x2ec>)
 8005a4c:	6018      	str	r0, [r3, #0]
 8005a4e:	1e43      	subs	r3, r0, #1
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	e7e2      	b.n	8005a1a <_dtoa_r+0x9a>
 8005a54:	a913      	add	r1, sp, #76	; 0x4c
 8005a56:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005a5a:	aa12      	add	r2, sp, #72	; 0x48
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	f001 fa6d 	bl	8006f3c <__d2b>
 8005a62:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8005a66:	4605      	mov	r5, r0
 8005a68:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005a6a:	2900      	cmp	r1, #0
 8005a6c:	d047      	beq.n	8005afe <_dtoa_r+0x17e>
 8005a6e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005a70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005a74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005a78:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8005a7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005a80:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005a84:	2400      	movs	r4, #0
 8005a86:	ec43 2b16 	vmov	d6, r2, r3
 8005a8a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8005a8e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8005c40 <_dtoa_r+0x2c0>
 8005a92:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a96:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8005c48 <_dtoa_r+0x2c8>
 8005a9a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005a9e:	eeb0 7b46 	vmov.f64	d7, d6
 8005aa2:	ee06 1a90 	vmov	s13, r1
 8005aa6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8005aaa:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8005c50 <_dtoa_r+0x2d0>
 8005aae:	eea5 7b06 	vfma.f64	d7, d5, d6
 8005ab2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005ab6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005abe:	ee16 ba90 	vmov	fp, s13
 8005ac2:	9411      	str	r4, [sp, #68]	; 0x44
 8005ac4:	d508      	bpl.n	8005ad8 <_dtoa_r+0x158>
 8005ac6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005aca:	eeb4 6b47 	vcmp.f64	d6, d7
 8005ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad2:	bf18      	it	ne
 8005ad4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005ad8:	f1bb 0f16 	cmp.w	fp, #22
 8005adc:	d832      	bhi.n	8005b44 <_dtoa_r+0x1c4>
 8005ade:	4b64      	ldr	r3, [pc, #400]	; (8005c70 <_dtoa_r+0x2f0>)
 8005ae0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005ae4:	ed93 7b00 	vldr	d7, [r3]
 8005ae8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8005aec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af4:	d501      	bpl.n	8005afa <_dtoa_r+0x17a>
 8005af6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005afa:	2300      	movs	r3, #0
 8005afc:	e023      	b.n	8005b46 <_dtoa_r+0x1c6>
 8005afe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005b00:	4401      	add	r1, r0
 8005b02:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	bfc3      	ittte	gt
 8005b0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b0e:	fa04 f303 	lslgt.w	r3, r4, r3
 8005b12:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8005b16:	f1c3 0320 	rsble	r3, r3, #32
 8005b1a:	bfc6      	itte	gt
 8005b1c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8005b20:	ea43 0308 	orrgt.w	r3, r3, r8
 8005b24:	fa08 f303 	lslle.w	r3, r8, r3
 8005b28:	ee07 3a90 	vmov	s15, r3
 8005b2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005b30:	3901      	subs	r1, #1
 8005b32:	ed8d 7b00 	vstr	d7, [sp]
 8005b36:	9c01      	ldr	r4, [sp, #4]
 8005b38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b3c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8005b40:	2401      	movs	r4, #1
 8005b42:	e7a0      	b.n	8005a86 <_dtoa_r+0x106>
 8005b44:	2301      	movs	r3, #1
 8005b46:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b48:	1a43      	subs	r3, r0, r1
 8005b4a:	1e5a      	subs	r2, r3, #1
 8005b4c:	bf45      	ittet	mi
 8005b4e:	f1c3 0301 	rsbmi	r3, r3, #1
 8005b52:	9305      	strmi	r3, [sp, #20]
 8005b54:	2300      	movpl	r3, #0
 8005b56:	2300      	movmi	r3, #0
 8005b58:	9206      	str	r2, [sp, #24]
 8005b5a:	bf54      	ite	pl
 8005b5c:	9305      	strpl	r3, [sp, #20]
 8005b5e:	9306      	strmi	r3, [sp, #24]
 8005b60:	f1bb 0f00 	cmp.w	fp, #0
 8005b64:	db18      	blt.n	8005b98 <_dtoa_r+0x218>
 8005b66:	9b06      	ldr	r3, [sp, #24]
 8005b68:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005b6c:	445b      	add	r3, fp
 8005b6e:	9306      	str	r3, [sp, #24]
 8005b70:	2300      	movs	r3, #0
 8005b72:	9a07      	ldr	r2, [sp, #28]
 8005b74:	2a09      	cmp	r2, #9
 8005b76:	d849      	bhi.n	8005c0c <_dtoa_r+0x28c>
 8005b78:	2a05      	cmp	r2, #5
 8005b7a:	bfc4      	itt	gt
 8005b7c:	3a04      	subgt	r2, #4
 8005b7e:	9207      	strgt	r2, [sp, #28]
 8005b80:	9a07      	ldr	r2, [sp, #28]
 8005b82:	f1a2 0202 	sub.w	r2, r2, #2
 8005b86:	bfcc      	ite	gt
 8005b88:	2400      	movgt	r4, #0
 8005b8a:	2401      	movle	r4, #1
 8005b8c:	2a03      	cmp	r2, #3
 8005b8e:	d848      	bhi.n	8005c22 <_dtoa_r+0x2a2>
 8005b90:	e8df f002 	tbb	[pc, r2]
 8005b94:	3a2c2e0b 	.word	0x3a2c2e0b
 8005b98:	9b05      	ldr	r3, [sp, #20]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	eba3 030b 	sub.w	r3, r3, fp
 8005ba0:	9305      	str	r3, [sp, #20]
 8005ba2:	920e      	str	r2, [sp, #56]	; 0x38
 8005ba4:	f1cb 0300 	rsb	r3, fp, #0
 8005ba8:	e7e3      	b.n	8005b72 <_dtoa_r+0x1f2>
 8005baa:	2200      	movs	r2, #0
 8005bac:	9208      	str	r2, [sp, #32]
 8005bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bb0:	2a00      	cmp	r2, #0
 8005bb2:	dc39      	bgt.n	8005c28 <_dtoa_r+0x2a8>
 8005bb4:	f04f 0a01 	mov.w	sl, #1
 8005bb8:	46d1      	mov	r9, sl
 8005bba:	4652      	mov	r2, sl
 8005bbc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005bc0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	6079      	str	r1, [r7, #4]
 8005bc6:	2004      	movs	r0, #4
 8005bc8:	f100 0c14 	add.w	ip, r0, #20
 8005bcc:	4594      	cmp	ip, r2
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	d92f      	bls.n	8005c32 <_dtoa_r+0x2b2>
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	930c      	str	r3, [sp, #48]	; 0x30
 8005bd6:	f000 fe8f 	bl	80068f8 <_Balloc>
 8005bda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bdc:	9000      	str	r0, [sp, #0]
 8005bde:	4602      	mov	r2, r0
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d149      	bne.n	8005c78 <_dtoa_r+0x2f8>
 8005be4:	4b23      	ldr	r3, [pc, #140]	; (8005c74 <_dtoa_r+0x2f4>)
 8005be6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005bea:	e6df      	b.n	80059ac <_dtoa_r+0x2c>
 8005bec:	2201      	movs	r2, #1
 8005bee:	e7dd      	b.n	8005bac <_dtoa_r+0x22c>
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	9208      	str	r2, [sp, #32]
 8005bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bf6:	eb0b 0a02 	add.w	sl, fp, r2
 8005bfa:	f10a 0901 	add.w	r9, sl, #1
 8005bfe:	464a      	mov	r2, r9
 8005c00:	2a01      	cmp	r2, #1
 8005c02:	bfb8      	it	lt
 8005c04:	2201      	movlt	r2, #1
 8005c06:	e7db      	b.n	8005bc0 <_dtoa_r+0x240>
 8005c08:	2201      	movs	r2, #1
 8005c0a:	e7f2      	b.n	8005bf2 <_dtoa_r+0x272>
 8005c0c:	2401      	movs	r4, #1
 8005c0e:	2200      	movs	r2, #0
 8005c10:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8005c14:	f04f 3aff 	mov.w	sl, #4294967295
 8005c18:	2100      	movs	r1, #0
 8005c1a:	46d1      	mov	r9, sl
 8005c1c:	2212      	movs	r2, #18
 8005c1e:	9109      	str	r1, [sp, #36]	; 0x24
 8005c20:	e7ce      	b.n	8005bc0 <_dtoa_r+0x240>
 8005c22:	2201      	movs	r2, #1
 8005c24:	9208      	str	r2, [sp, #32]
 8005c26:	e7f5      	b.n	8005c14 <_dtoa_r+0x294>
 8005c28:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005c2c:	46d1      	mov	r9, sl
 8005c2e:	4652      	mov	r2, sl
 8005c30:	e7c6      	b.n	8005bc0 <_dtoa_r+0x240>
 8005c32:	3101      	adds	r1, #1
 8005c34:	6079      	str	r1, [r7, #4]
 8005c36:	0040      	lsls	r0, r0, #1
 8005c38:	e7c6      	b.n	8005bc8 <_dtoa_r+0x248>
 8005c3a:	bf00      	nop
 8005c3c:	f3af 8000 	nop.w
 8005c40:	636f4361 	.word	0x636f4361
 8005c44:	3fd287a7 	.word	0x3fd287a7
 8005c48:	8b60c8b3 	.word	0x8b60c8b3
 8005c4c:	3fc68a28 	.word	0x3fc68a28
 8005c50:	509f79fb 	.word	0x509f79fb
 8005c54:	3fd34413 	.word	0x3fd34413
 8005c58:	080081c1 	.word	0x080081c1
 8005c5c:	080081d8 	.word	0x080081d8
 8005c60:	7ff00000 	.word	0x7ff00000
 8005c64:	080081bd 	.word	0x080081bd
 8005c68:	080081b4 	.word	0x080081b4
 8005c6c:	08008191 	.word	0x08008191
 8005c70:	08008330 	.word	0x08008330
 8005c74:	08008237 	.word	0x08008237
 8005c78:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8005c7a:	9900      	ldr	r1, [sp, #0]
 8005c7c:	6011      	str	r1, [r2, #0]
 8005c7e:	f1b9 0f0e 	cmp.w	r9, #14
 8005c82:	d872      	bhi.n	8005d6a <_dtoa_r+0x3ea>
 8005c84:	2c00      	cmp	r4, #0
 8005c86:	d070      	beq.n	8005d6a <_dtoa_r+0x3ea>
 8005c88:	f1bb 0f00 	cmp.w	fp, #0
 8005c8c:	f340 80a6 	ble.w	8005ddc <_dtoa_r+0x45c>
 8005c90:	49ca      	ldr	r1, [pc, #808]	; (8005fbc <_dtoa_r+0x63c>)
 8005c92:	f00b 020f 	and.w	r2, fp, #15
 8005c96:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8005c9a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005c9e:	ed92 7b00 	vldr	d7, [r2]
 8005ca2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8005ca6:	f000 808d 	beq.w	8005dc4 <_dtoa_r+0x444>
 8005caa:	4ac5      	ldr	r2, [pc, #788]	; (8005fc0 <_dtoa_r+0x640>)
 8005cac:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8005cb0:	ed92 6b08 	vldr	d6, [r2, #32]
 8005cb4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8005cb8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005cbc:	f001 010f 	and.w	r1, r1, #15
 8005cc0:	2203      	movs	r2, #3
 8005cc2:	48bf      	ldr	r0, [pc, #764]	; (8005fc0 <_dtoa_r+0x640>)
 8005cc4:	2900      	cmp	r1, #0
 8005cc6:	d17f      	bne.n	8005dc8 <_dtoa_r+0x448>
 8005cc8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005ccc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005cd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005cd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005cd6:	2900      	cmp	r1, #0
 8005cd8:	f000 80b2 	beq.w	8005e40 <_dtoa_r+0x4c0>
 8005cdc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005ce0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ce4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cec:	f140 80a8 	bpl.w	8005e40 <_dtoa_r+0x4c0>
 8005cf0:	f1b9 0f00 	cmp.w	r9, #0
 8005cf4:	f000 80a4 	beq.w	8005e40 <_dtoa_r+0x4c0>
 8005cf8:	f1ba 0f00 	cmp.w	sl, #0
 8005cfc:	dd31      	ble.n	8005d62 <_dtoa_r+0x3e2>
 8005cfe:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005d02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005d06:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005d0a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005d0e:	3201      	adds	r2, #1
 8005d10:	4650      	mov	r0, sl
 8005d12:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005d16:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005d1a:	ee07 2a90 	vmov	s15, r2
 8005d1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005d22:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005d26:	ed8d 5b02 	vstr	d5, [sp, #8]
 8005d2a:	9c03      	ldr	r4, [sp, #12]
 8005d2c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005d30:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8005d34:	2800      	cmp	r0, #0
 8005d36:	f040 8086 	bne.w	8005e46 <_dtoa_r+0x4c6>
 8005d3a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005d3e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005d42:	ec42 1b17 	vmov	d7, r1, r2
 8005d46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d4e:	f300 8272 	bgt.w	8006236 <_dtoa_r+0x8b6>
 8005d52:	eeb1 7b47 	vneg.f64	d7, d7
 8005d56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d5e:	f100 8267 	bmi.w	8006230 <_dtoa_r+0x8b0>
 8005d62:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8005d66:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005d6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005d6c:	2a00      	cmp	r2, #0
 8005d6e:	f2c0 8129 	blt.w	8005fc4 <_dtoa_r+0x644>
 8005d72:	f1bb 0f0e 	cmp.w	fp, #14
 8005d76:	f300 8125 	bgt.w	8005fc4 <_dtoa_r+0x644>
 8005d7a:	4b90      	ldr	r3, [pc, #576]	; (8005fbc <_dtoa_r+0x63c>)
 8005d7c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005d80:	ed93 6b00 	vldr	d6, [r3]
 8005d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f280 80c3 	bge.w	8005f12 <_dtoa_r+0x592>
 8005d8c:	f1b9 0f00 	cmp.w	r9, #0
 8005d90:	f300 80bf 	bgt.w	8005f12 <_dtoa_r+0x592>
 8005d94:	f040 824c 	bne.w	8006230 <_dtoa_r+0x8b0>
 8005d98:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005d9c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005da0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005da4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dac:	464c      	mov	r4, r9
 8005dae:	464f      	mov	r7, r9
 8005db0:	f280 8222 	bge.w	80061f8 <_dtoa_r+0x878>
 8005db4:	f8dd 8000 	ldr.w	r8, [sp]
 8005db8:	2331      	movs	r3, #49	; 0x31
 8005dba:	f808 3b01 	strb.w	r3, [r8], #1
 8005dbe:	f10b 0b01 	add.w	fp, fp, #1
 8005dc2:	e21e      	b.n	8006202 <_dtoa_r+0x882>
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	e77c      	b.n	8005cc2 <_dtoa_r+0x342>
 8005dc8:	07cc      	lsls	r4, r1, #31
 8005dca:	d504      	bpl.n	8005dd6 <_dtoa_r+0x456>
 8005dcc:	ed90 6b00 	vldr	d6, [r0]
 8005dd0:	3201      	adds	r2, #1
 8005dd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005dd6:	1049      	asrs	r1, r1, #1
 8005dd8:	3008      	adds	r0, #8
 8005dda:	e773      	b.n	8005cc4 <_dtoa_r+0x344>
 8005ddc:	d02e      	beq.n	8005e3c <_dtoa_r+0x4bc>
 8005dde:	f1cb 0100 	rsb	r1, fp, #0
 8005de2:	4a76      	ldr	r2, [pc, #472]	; (8005fbc <_dtoa_r+0x63c>)
 8005de4:	f001 000f 	and.w	r0, r1, #15
 8005de8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005dec:	ed92 7b00 	vldr	d7, [r2]
 8005df0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8005df4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005df8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005dfc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8005e00:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8005e04:	486e      	ldr	r0, [pc, #440]	; (8005fc0 <_dtoa_r+0x640>)
 8005e06:	1109      	asrs	r1, r1, #4
 8005e08:	2400      	movs	r4, #0
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	b939      	cbnz	r1, 8005e1e <_dtoa_r+0x49e>
 8005e0e:	2c00      	cmp	r4, #0
 8005e10:	f43f af60 	beq.w	8005cd4 <_dtoa_r+0x354>
 8005e14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e1c:	e75a      	b.n	8005cd4 <_dtoa_r+0x354>
 8005e1e:	07cf      	lsls	r7, r1, #31
 8005e20:	d509      	bpl.n	8005e36 <_dtoa_r+0x4b6>
 8005e22:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8005e26:	ed90 7b00 	vldr	d7, [r0]
 8005e2a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005e2e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005e32:	3201      	adds	r2, #1
 8005e34:	2401      	movs	r4, #1
 8005e36:	1049      	asrs	r1, r1, #1
 8005e38:	3008      	adds	r0, #8
 8005e3a:	e7e7      	b.n	8005e0c <_dtoa_r+0x48c>
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	e749      	b.n	8005cd4 <_dtoa_r+0x354>
 8005e40:	465f      	mov	r7, fp
 8005e42:	4648      	mov	r0, r9
 8005e44:	e765      	b.n	8005d12 <_dtoa_r+0x392>
 8005e46:	ec42 1b17 	vmov	d7, r1, r2
 8005e4a:	4a5c      	ldr	r2, [pc, #368]	; (8005fbc <_dtoa_r+0x63c>)
 8005e4c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005e50:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005e54:	9a00      	ldr	r2, [sp, #0]
 8005e56:	1814      	adds	r4, r2, r0
 8005e58:	9a08      	ldr	r2, [sp, #32]
 8005e5a:	b352      	cbz	r2, 8005eb2 <_dtoa_r+0x532>
 8005e5c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005e60:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005e64:	f8dd 8000 	ldr.w	r8, [sp]
 8005e68:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005e6c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005e70:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005e74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005e78:	ee14 2a90 	vmov	r2, s9
 8005e7c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005e80:	3230      	adds	r2, #48	; 0x30
 8005e82:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005e86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e8e:	f808 2b01 	strb.w	r2, [r8], #1
 8005e92:	d439      	bmi.n	8005f08 <_dtoa_r+0x588>
 8005e94:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005e98:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea0:	d472      	bmi.n	8005f88 <_dtoa_r+0x608>
 8005ea2:	45a0      	cmp	r8, r4
 8005ea4:	f43f af5d 	beq.w	8005d62 <_dtoa_r+0x3e2>
 8005ea8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005eac:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005eb0:	e7e0      	b.n	8005e74 <_dtoa_r+0x4f4>
 8005eb2:	f8dd 8000 	ldr.w	r8, [sp]
 8005eb6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005eba:	4621      	mov	r1, r4
 8005ebc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005ec0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005ec4:	ee14 2a90 	vmov	r2, s9
 8005ec8:	3230      	adds	r2, #48	; 0x30
 8005eca:	f808 2b01 	strb.w	r2, [r8], #1
 8005ece:	45a0      	cmp	r8, r4
 8005ed0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005ed4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005ed8:	d118      	bne.n	8005f0c <_dtoa_r+0x58c>
 8005eda:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005ede:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005ee2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eea:	dc4d      	bgt.n	8005f88 <_dtoa_r+0x608>
 8005eec:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005ef0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ef8:	f57f af33 	bpl.w	8005d62 <_dtoa_r+0x3e2>
 8005efc:	4688      	mov	r8, r1
 8005efe:	3901      	subs	r1, #1
 8005f00:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005f04:	2b30      	cmp	r3, #48	; 0x30
 8005f06:	d0f9      	beq.n	8005efc <_dtoa_r+0x57c>
 8005f08:	46bb      	mov	fp, r7
 8005f0a:	e02a      	b.n	8005f62 <_dtoa_r+0x5e2>
 8005f0c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005f10:	e7d6      	b.n	8005ec0 <_dtoa_r+0x540>
 8005f12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f16:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005f1a:	f8dd 8000 	ldr.w	r8, [sp]
 8005f1e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005f22:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005f26:	ee15 3a10 	vmov	r3, s10
 8005f2a:	3330      	adds	r3, #48	; 0x30
 8005f2c:	f808 3b01 	strb.w	r3, [r8], #1
 8005f30:	9b00      	ldr	r3, [sp, #0]
 8005f32:	eba8 0303 	sub.w	r3, r8, r3
 8005f36:	4599      	cmp	r9, r3
 8005f38:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005f3c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005f40:	d133      	bne.n	8005faa <_dtoa_r+0x62a>
 8005f42:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005f46:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f4e:	dc1a      	bgt.n	8005f86 <_dtoa_r+0x606>
 8005f50:	eeb4 7b46 	vcmp.f64	d7, d6
 8005f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f58:	d103      	bne.n	8005f62 <_dtoa_r+0x5e2>
 8005f5a:	ee15 3a10 	vmov	r3, s10
 8005f5e:	07d9      	lsls	r1, r3, #31
 8005f60:	d411      	bmi.n	8005f86 <_dtoa_r+0x606>
 8005f62:	4629      	mov	r1, r5
 8005f64:	4630      	mov	r0, r6
 8005f66:	f000 fd07 	bl	8006978 <_Bfree>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f6e:	f888 3000 	strb.w	r3, [r8]
 8005f72:	f10b 0301 	add.w	r3, fp, #1
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f43f ad4d 	beq.w	8005a1a <_dtoa_r+0x9a>
 8005f80:	f8c3 8000 	str.w	r8, [r3]
 8005f84:	e549      	b.n	8005a1a <_dtoa_r+0x9a>
 8005f86:	465f      	mov	r7, fp
 8005f88:	4643      	mov	r3, r8
 8005f8a:	4698      	mov	r8, r3
 8005f8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f90:	2a39      	cmp	r2, #57	; 0x39
 8005f92:	d106      	bne.n	8005fa2 <_dtoa_r+0x622>
 8005f94:	9a00      	ldr	r2, [sp, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d1f7      	bne.n	8005f8a <_dtoa_r+0x60a>
 8005f9a:	9900      	ldr	r1, [sp, #0]
 8005f9c:	2230      	movs	r2, #48	; 0x30
 8005f9e:	3701      	adds	r7, #1
 8005fa0:	700a      	strb	r2, [r1, #0]
 8005fa2:	781a      	ldrb	r2, [r3, #0]
 8005fa4:	3201      	adds	r2, #1
 8005fa6:	701a      	strb	r2, [r3, #0]
 8005fa8:	e7ae      	b.n	8005f08 <_dtoa_r+0x588>
 8005faa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005fae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb6:	d1b2      	bne.n	8005f1e <_dtoa_r+0x59e>
 8005fb8:	e7d3      	b.n	8005f62 <_dtoa_r+0x5e2>
 8005fba:	bf00      	nop
 8005fbc:	08008330 	.word	0x08008330
 8005fc0:	08008308 	.word	0x08008308
 8005fc4:	9908      	ldr	r1, [sp, #32]
 8005fc6:	2900      	cmp	r1, #0
 8005fc8:	f000 80d1 	beq.w	800616e <_dtoa_r+0x7ee>
 8005fcc:	9907      	ldr	r1, [sp, #28]
 8005fce:	2901      	cmp	r1, #1
 8005fd0:	f300 80b4 	bgt.w	800613c <_dtoa_r+0x7bc>
 8005fd4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005fd6:	2900      	cmp	r1, #0
 8005fd8:	f000 80ac 	beq.w	8006134 <_dtoa_r+0x7b4>
 8005fdc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005fe0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8005fe4:	461c      	mov	r4, r3
 8005fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8005fe8:	9b05      	ldr	r3, [sp, #20]
 8005fea:	4413      	add	r3, r2
 8005fec:	9305      	str	r3, [sp, #20]
 8005fee:	9b06      	ldr	r3, [sp, #24]
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	4413      	add	r3, r2
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	9306      	str	r3, [sp, #24]
 8005ff8:	f000 fd7a 	bl	8006af0 <__i2b>
 8005ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ffe:	4607      	mov	r7, r0
 8006000:	f1b8 0f00 	cmp.w	r8, #0
 8006004:	dd0d      	ble.n	8006022 <_dtoa_r+0x6a2>
 8006006:	9a06      	ldr	r2, [sp, #24]
 8006008:	2a00      	cmp	r2, #0
 800600a:	dd0a      	ble.n	8006022 <_dtoa_r+0x6a2>
 800600c:	4542      	cmp	r2, r8
 800600e:	9905      	ldr	r1, [sp, #20]
 8006010:	bfa8      	it	ge
 8006012:	4642      	movge	r2, r8
 8006014:	1a89      	subs	r1, r1, r2
 8006016:	9105      	str	r1, [sp, #20]
 8006018:	9906      	ldr	r1, [sp, #24]
 800601a:	eba8 0802 	sub.w	r8, r8, r2
 800601e:	1a8a      	subs	r2, r1, r2
 8006020:	9206      	str	r2, [sp, #24]
 8006022:	b303      	cbz	r3, 8006066 <_dtoa_r+0x6e6>
 8006024:	9a08      	ldr	r2, [sp, #32]
 8006026:	2a00      	cmp	r2, #0
 8006028:	f000 80a6 	beq.w	8006178 <_dtoa_r+0x7f8>
 800602c:	2c00      	cmp	r4, #0
 800602e:	dd13      	ble.n	8006058 <_dtoa_r+0x6d8>
 8006030:	4639      	mov	r1, r7
 8006032:	4622      	mov	r2, r4
 8006034:	4630      	mov	r0, r6
 8006036:	930c      	str	r3, [sp, #48]	; 0x30
 8006038:	f000 fe16 	bl	8006c68 <__pow5mult>
 800603c:	462a      	mov	r2, r5
 800603e:	4601      	mov	r1, r0
 8006040:	4607      	mov	r7, r0
 8006042:	4630      	mov	r0, r6
 8006044:	f000 fd6a 	bl	8006b1c <__multiply>
 8006048:	4629      	mov	r1, r5
 800604a:	900a      	str	r0, [sp, #40]	; 0x28
 800604c:	4630      	mov	r0, r6
 800604e:	f000 fc93 	bl	8006978 <_Bfree>
 8006052:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006056:	4615      	mov	r5, r2
 8006058:	1b1a      	subs	r2, r3, r4
 800605a:	d004      	beq.n	8006066 <_dtoa_r+0x6e6>
 800605c:	4629      	mov	r1, r5
 800605e:	4630      	mov	r0, r6
 8006060:	f000 fe02 	bl	8006c68 <__pow5mult>
 8006064:	4605      	mov	r5, r0
 8006066:	2101      	movs	r1, #1
 8006068:	4630      	mov	r0, r6
 800606a:	f000 fd41 	bl	8006af0 <__i2b>
 800606e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006070:	2b00      	cmp	r3, #0
 8006072:	4604      	mov	r4, r0
 8006074:	f340 8082 	ble.w	800617c <_dtoa_r+0x7fc>
 8006078:	461a      	mov	r2, r3
 800607a:	4601      	mov	r1, r0
 800607c:	4630      	mov	r0, r6
 800607e:	f000 fdf3 	bl	8006c68 <__pow5mult>
 8006082:	9b07      	ldr	r3, [sp, #28]
 8006084:	2b01      	cmp	r3, #1
 8006086:	4604      	mov	r4, r0
 8006088:	dd7b      	ble.n	8006182 <_dtoa_r+0x802>
 800608a:	2300      	movs	r3, #0
 800608c:	930a      	str	r3, [sp, #40]	; 0x28
 800608e:	6922      	ldr	r2, [r4, #16]
 8006090:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006094:	6910      	ldr	r0, [r2, #16]
 8006096:	f000 fcdb 	bl	8006a50 <__hi0bits>
 800609a:	f1c0 0020 	rsb	r0, r0, #32
 800609e:	9b06      	ldr	r3, [sp, #24]
 80060a0:	4418      	add	r0, r3
 80060a2:	f010 001f 	ands.w	r0, r0, #31
 80060a6:	f000 808d 	beq.w	80061c4 <_dtoa_r+0x844>
 80060aa:	f1c0 0220 	rsb	r2, r0, #32
 80060ae:	2a04      	cmp	r2, #4
 80060b0:	f340 8086 	ble.w	80061c0 <_dtoa_r+0x840>
 80060b4:	f1c0 001c 	rsb	r0, r0, #28
 80060b8:	9b05      	ldr	r3, [sp, #20]
 80060ba:	4403      	add	r3, r0
 80060bc:	9305      	str	r3, [sp, #20]
 80060be:	9b06      	ldr	r3, [sp, #24]
 80060c0:	4403      	add	r3, r0
 80060c2:	4480      	add	r8, r0
 80060c4:	9306      	str	r3, [sp, #24]
 80060c6:	9b05      	ldr	r3, [sp, #20]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	dd05      	ble.n	80060d8 <_dtoa_r+0x758>
 80060cc:	4629      	mov	r1, r5
 80060ce:	461a      	mov	r2, r3
 80060d0:	4630      	mov	r0, r6
 80060d2:	f000 fe23 	bl	8006d1c <__lshift>
 80060d6:	4605      	mov	r5, r0
 80060d8:	9b06      	ldr	r3, [sp, #24]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	dd05      	ble.n	80060ea <_dtoa_r+0x76a>
 80060de:	4621      	mov	r1, r4
 80060e0:	461a      	mov	r2, r3
 80060e2:	4630      	mov	r0, r6
 80060e4:	f000 fe1a 	bl	8006d1c <__lshift>
 80060e8:	4604      	mov	r4, r0
 80060ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d06b      	beq.n	80061c8 <_dtoa_r+0x848>
 80060f0:	4621      	mov	r1, r4
 80060f2:	4628      	mov	r0, r5
 80060f4:	f000 fe7e 	bl	8006df4 <__mcmp>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	da65      	bge.n	80061c8 <_dtoa_r+0x848>
 80060fc:	2300      	movs	r3, #0
 80060fe:	4629      	mov	r1, r5
 8006100:	220a      	movs	r2, #10
 8006102:	4630      	mov	r0, r6
 8006104:	f000 fc5a 	bl	80069bc <__multadd>
 8006108:	9b08      	ldr	r3, [sp, #32]
 800610a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800610e:	4605      	mov	r5, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8192 	beq.w	800643a <_dtoa_r+0xaba>
 8006116:	4639      	mov	r1, r7
 8006118:	2300      	movs	r3, #0
 800611a:	220a      	movs	r2, #10
 800611c:	4630      	mov	r0, r6
 800611e:	f000 fc4d 	bl	80069bc <__multadd>
 8006122:	f1ba 0f00 	cmp.w	sl, #0
 8006126:	4607      	mov	r7, r0
 8006128:	f300 808e 	bgt.w	8006248 <_dtoa_r+0x8c8>
 800612c:	9b07      	ldr	r3, [sp, #28]
 800612e:	2b02      	cmp	r3, #2
 8006130:	dc51      	bgt.n	80061d6 <_dtoa_r+0x856>
 8006132:	e089      	b.n	8006248 <_dtoa_r+0x8c8>
 8006134:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006136:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800613a:	e751      	b.n	8005fe0 <_dtoa_r+0x660>
 800613c:	f109 34ff 	add.w	r4, r9, #4294967295
 8006140:	42a3      	cmp	r3, r4
 8006142:	bfbf      	itttt	lt
 8006144:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006146:	1ae3      	sublt	r3, r4, r3
 8006148:	18d2      	addlt	r2, r2, r3
 800614a:	4613      	movlt	r3, r2
 800614c:	bfb7      	itett	lt
 800614e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006150:	1b1c      	subge	r4, r3, r4
 8006152:	4623      	movlt	r3, r4
 8006154:	2400      	movlt	r4, #0
 8006156:	f1b9 0f00 	cmp.w	r9, #0
 800615a:	bfb5      	itete	lt
 800615c:	9a05      	ldrlt	r2, [sp, #20]
 800615e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8006162:	eba2 0809 	sublt.w	r8, r2, r9
 8006166:	464a      	movge	r2, r9
 8006168:	bfb8      	it	lt
 800616a:	2200      	movlt	r2, #0
 800616c:	e73b      	b.n	8005fe6 <_dtoa_r+0x666>
 800616e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8006172:	9f08      	ldr	r7, [sp, #32]
 8006174:	461c      	mov	r4, r3
 8006176:	e743      	b.n	8006000 <_dtoa_r+0x680>
 8006178:	461a      	mov	r2, r3
 800617a:	e76f      	b.n	800605c <_dtoa_r+0x6dc>
 800617c:	9b07      	ldr	r3, [sp, #28]
 800617e:	2b01      	cmp	r3, #1
 8006180:	dc18      	bgt.n	80061b4 <_dtoa_r+0x834>
 8006182:	9b02      	ldr	r3, [sp, #8]
 8006184:	b9b3      	cbnz	r3, 80061b4 <_dtoa_r+0x834>
 8006186:	9b03      	ldr	r3, [sp, #12]
 8006188:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800618c:	b9a2      	cbnz	r2, 80061b8 <_dtoa_r+0x838>
 800618e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006192:	0d12      	lsrs	r2, r2, #20
 8006194:	0512      	lsls	r2, r2, #20
 8006196:	b18a      	cbz	r2, 80061bc <_dtoa_r+0x83c>
 8006198:	9b05      	ldr	r3, [sp, #20]
 800619a:	3301      	adds	r3, #1
 800619c:	9305      	str	r3, [sp, #20]
 800619e:	9b06      	ldr	r3, [sp, #24]
 80061a0:	3301      	adds	r3, #1
 80061a2:	9306      	str	r3, [sp, #24]
 80061a4:	2301      	movs	r3, #1
 80061a6:	930a      	str	r3, [sp, #40]	; 0x28
 80061a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f47f af6f 	bne.w	800608e <_dtoa_r+0x70e>
 80061b0:	2001      	movs	r0, #1
 80061b2:	e774      	b.n	800609e <_dtoa_r+0x71e>
 80061b4:	2300      	movs	r3, #0
 80061b6:	e7f6      	b.n	80061a6 <_dtoa_r+0x826>
 80061b8:	9b02      	ldr	r3, [sp, #8]
 80061ba:	e7f4      	b.n	80061a6 <_dtoa_r+0x826>
 80061bc:	920a      	str	r2, [sp, #40]	; 0x28
 80061be:	e7f3      	b.n	80061a8 <_dtoa_r+0x828>
 80061c0:	d081      	beq.n	80060c6 <_dtoa_r+0x746>
 80061c2:	4610      	mov	r0, r2
 80061c4:	301c      	adds	r0, #28
 80061c6:	e777      	b.n	80060b8 <_dtoa_r+0x738>
 80061c8:	f1b9 0f00 	cmp.w	r9, #0
 80061cc:	dc37      	bgt.n	800623e <_dtoa_r+0x8be>
 80061ce:	9b07      	ldr	r3, [sp, #28]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	dd34      	ble.n	800623e <_dtoa_r+0x8be>
 80061d4:	46ca      	mov	sl, r9
 80061d6:	f1ba 0f00 	cmp.w	sl, #0
 80061da:	d10d      	bne.n	80061f8 <_dtoa_r+0x878>
 80061dc:	4621      	mov	r1, r4
 80061de:	4653      	mov	r3, sl
 80061e0:	2205      	movs	r2, #5
 80061e2:	4630      	mov	r0, r6
 80061e4:	f000 fbea 	bl	80069bc <__multadd>
 80061e8:	4601      	mov	r1, r0
 80061ea:	4604      	mov	r4, r0
 80061ec:	4628      	mov	r0, r5
 80061ee:	f000 fe01 	bl	8006df4 <__mcmp>
 80061f2:	2800      	cmp	r0, #0
 80061f4:	f73f adde 	bgt.w	8005db4 <_dtoa_r+0x434>
 80061f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fa:	f8dd 8000 	ldr.w	r8, [sp]
 80061fe:	ea6f 0b03 	mvn.w	fp, r3
 8006202:	f04f 0900 	mov.w	r9, #0
 8006206:	4621      	mov	r1, r4
 8006208:	4630      	mov	r0, r6
 800620a:	f000 fbb5 	bl	8006978 <_Bfree>
 800620e:	2f00      	cmp	r7, #0
 8006210:	f43f aea7 	beq.w	8005f62 <_dtoa_r+0x5e2>
 8006214:	f1b9 0f00 	cmp.w	r9, #0
 8006218:	d005      	beq.n	8006226 <_dtoa_r+0x8a6>
 800621a:	45b9      	cmp	r9, r7
 800621c:	d003      	beq.n	8006226 <_dtoa_r+0x8a6>
 800621e:	4649      	mov	r1, r9
 8006220:	4630      	mov	r0, r6
 8006222:	f000 fba9 	bl	8006978 <_Bfree>
 8006226:	4639      	mov	r1, r7
 8006228:	4630      	mov	r0, r6
 800622a:	f000 fba5 	bl	8006978 <_Bfree>
 800622e:	e698      	b.n	8005f62 <_dtoa_r+0x5e2>
 8006230:	2400      	movs	r4, #0
 8006232:	4627      	mov	r7, r4
 8006234:	e7e0      	b.n	80061f8 <_dtoa_r+0x878>
 8006236:	46bb      	mov	fp, r7
 8006238:	4604      	mov	r4, r0
 800623a:	4607      	mov	r7, r0
 800623c:	e5ba      	b.n	8005db4 <_dtoa_r+0x434>
 800623e:	9b08      	ldr	r3, [sp, #32]
 8006240:	46ca      	mov	sl, r9
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 8100 	beq.w	8006448 <_dtoa_r+0xac8>
 8006248:	f1b8 0f00 	cmp.w	r8, #0
 800624c:	dd05      	ble.n	800625a <_dtoa_r+0x8da>
 800624e:	4639      	mov	r1, r7
 8006250:	4642      	mov	r2, r8
 8006252:	4630      	mov	r0, r6
 8006254:	f000 fd62 	bl	8006d1c <__lshift>
 8006258:	4607      	mov	r7, r0
 800625a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800625c:	2b00      	cmp	r3, #0
 800625e:	d05d      	beq.n	800631c <_dtoa_r+0x99c>
 8006260:	6879      	ldr	r1, [r7, #4]
 8006262:	4630      	mov	r0, r6
 8006264:	f000 fb48 	bl	80068f8 <_Balloc>
 8006268:	4680      	mov	r8, r0
 800626a:	b928      	cbnz	r0, 8006278 <_dtoa_r+0x8f8>
 800626c:	4b82      	ldr	r3, [pc, #520]	; (8006478 <_dtoa_r+0xaf8>)
 800626e:	4602      	mov	r2, r0
 8006270:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006274:	f7ff bb9a 	b.w	80059ac <_dtoa_r+0x2c>
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	3202      	adds	r2, #2
 800627c:	0092      	lsls	r2, r2, #2
 800627e:	f107 010c 	add.w	r1, r7, #12
 8006282:	300c      	adds	r0, #12
 8006284:	f000 fb2a 	bl	80068dc <memcpy>
 8006288:	2201      	movs	r2, #1
 800628a:	4641      	mov	r1, r8
 800628c:	4630      	mov	r0, r6
 800628e:	f000 fd45 	bl	8006d1c <__lshift>
 8006292:	9b00      	ldr	r3, [sp, #0]
 8006294:	3301      	adds	r3, #1
 8006296:	9305      	str	r3, [sp, #20]
 8006298:	9b00      	ldr	r3, [sp, #0]
 800629a:	4453      	add	r3, sl
 800629c:	9309      	str	r3, [sp, #36]	; 0x24
 800629e:	9b02      	ldr	r3, [sp, #8]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	46b9      	mov	r9, r7
 80062a6:	9308      	str	r3, [sp, #32]
 80062a8:	4607      	mov	r7, r0
 80062aa:	9b05      	ldr	r3, [sp, #20]
 80062ac:	4621      	mov	r1, r4
 80062ae:	3b01      	subs	r3, #1
 80062b0:	4628      	mov	r0, r5
 80062b2:	9302      	str	r3, [sp, #8]
 80062b4:	f7ff fad8 	bl	8005868 <quorem>
 80062b8:	4603      	mov	r3, r0
 80062ba:	3330      	adds	r3, #48	; 0x30
 80062bc:	9006      	str	r0, [sp, #24]
 80062be:	4649      	mov	r1, r9
 80062c0:	4628      	mov	r0, r5
 80062c2:	930a      	str	r3, [sp, #40]	; 0x28
 80062c4:	f000 fd96 	bl	8006df4 <__mcmp>
 80062c8:	463a      	mov	r2, r7
 80062ca:	4682      	mov	sl, r0
 80062cc:	4621      	mov	r1, r4
 80062ce:	4630      	mov	r0, r6
 80062d0:	f000 fdac 	bl	8006e2c <__mdiff>
 80062d4:	68c2      	ldr	r2, [r0, #12]
 80062d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062d8:	4680      	mov	r8, r0
 80062da:	bb0a      	cbnz	r2, 8006320 <_dtoa_r+0x9a0>
 80062dc:	4601      	mov	r1, r0
 80062de:	4628      	mov	r0, r5
 80062e0:	f000 fd88 	bl	8006df4 <__mcmp>
 80062e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062e6:	4602      	mov	r2, r0
 80062e8:	4641      	mov	r1, r8
 80062ea:	4630      	mov	r0, r6
 80062ec:	920e      	str	r2, [sp, #56]	; 0x38
 80062ee:	930a      	str	r3, [sp, #40]	; 0x28
 80062f0:	f000 fb42 	bl	8006978 <_Bfree>
 80062f4:	9b07      	ldr	r3, [sp, #28]
 80062f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80062fc:	ea43 0102 	orr.w	r1, r3, r2
 8006300:	9b08      	ldr	r3, [sp, #32]
 8006302:	430b      	orrs	r3, r1
 8006304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006306:	d10d      	bne.n	8006324 <_dtoa_r+0x9a4>
 8006308:	2b39      	cmp	r3, #57	; 0x39
 800630a:	d029      	beq.n	8006360 <_dtoa_r+0x9e0>
 800630c:	f1ba 0f00 	cmp.w	sl, #0
 8006310:	dd01      	ble.n	8006316 <_dtoa_r+0x996>
 8006312:	9b06      	ldr	r3, [sp, #24]
 8006314:	3331      	adds	r3, #49	; 0x31
 8006316:	9a02      	ldr	r2, [sp, #8]
 8006318:	7013      	strb	r3, [r2, #0]
 800631a:	e774      	b.n	8006206 <_dtoa_r+0x886>
 800631c:	4638      	mov	r0, r7
 800631e:	e7b8      	b.n	8006292 <_dtoa_r+0x912>
 8006320:	2201      	movs	r2, #1
 8006322:	e7e1      	b.n	80062e8 <_dtoa_r+0x968>
 8006324:	f1ba 0f00 	cmp.w	sl, #0
 8006328:	db06      	blt.n	8006338 <_dtoa_r+0x9b8>
 800632a:	9907      	ldr	r1, [sp, #28]
 800632c:	ea41 0a0a 	orr.w	sl, r1, sl
 8006330:	9908      	ldr	r1, [sp, #32]
 8006332:	ea5a 0101 	orrs.w	r1, sl, r1
 8006336:	d120      	bne.n	800637a <_dtoa_r+0x9fa>
 8006338:	2a00      	cmp	r2, #0
 800633a:	ddec      	ble.n	8006316 <_dtoa_r+0x996>
 800633c:	4629      	mov	r1, r5
 800633e:	2201      	movs	r2, #1
 8006340:	4630      	mov	r0, r6
 8006342:	9305      	str	r3, [sp, #20]
 8006344:	f000 fcea 	bl	8006d1c <__lshift>
 8006348:	4621      	mov	r1, r4
 800634a:	4605      	mov	r5, r0
 800634c:	f000 fd52 	bl	8006df4 <__mcmp>
 8006350:	2800      	cmp	r0, #0
 8006352:	9b05      	ldr	r3, [sp, #20]
 8006354:	dc02      	bgt.n	800635c <_dtoa_r+0x9dc>
 8006356:	d1de      	bne.n	8006316 <_dtoa_r+0x996>
 8006358:	07da      	lsls	r2, r3, #31
 800635a:	d5dc      	bpl.n	8006316 <_dtoa_r+0x996>
 800635c:	2b39      	cmp	r3, #57	; 0x39
 800635e:	d1d8      	bne.n	8006312 <_dtoa_r+0x992>
 8006360:	9a02      	ldr	r2, [sp, #8]
 8006362:	2339      	movs	r3, #57	; 0x39
 8006364:	7013      	strb	r3, [r2, #0]
 8006366:	4643      	mov	r3, r8
 8006368:	4698      	mov	r8, r3
 800636a:	3b01      	subs	r3, #1
 800636c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8006370:	2a39      	cmp	r2, #57	; 0x39
 8006372:	d051      	beq.n	8006418 <_dtoa_r+0xa98>
 8006374:	3201      	adds	r2, #1
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	e745      	b.n	8006206 <_dtoa_r+0x886>
 800637a:	2a00      	cmp	r2, #0
 800637c:	dd03      	ble.n	8006386 <_dtoa_r+0xa06>
 800637e:	2b39      	cmp	r3, #57	; 0x39
 8006380:	d0ee      	beq.n	8006360 <_dtoa_r+0x9e0>
 8006382:	3301      	adds	r3, #1
 8006384:	e7c7      	b.n	8006316 <_dtoa_r+0x996>
 8006386:	9a05      	ldr	r2, [sp, #20]
 8006388:	9909      	ldr	r1, [sp, #36]	; 0x24
 800638a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800638e:	428a      	cmp	r2, r1
 8006390:	d02b      	beq.n	80063ea <_dtoa_r+0xa6a>
 8006392:	4629      	mov	r1, r5
 8006394:	2300      	movs	r3, #0
 8006396:	220a      	movs	r2, #10
 8006398:	4630      	mov	r0, r6
 800639a:	f000 fb0f 	bl	80069bc <__multadd>
 800639e:	45b9      	cmp	r9, r7
 80063a0:	4605      	mov	r5, r0
 80063a2:	f04f 0300 	mov.w	r3, #0
 80063a6:	f04f 020a 	mov.w	r2, #10
 80063aa:	4649      	mov	r1, r9
 80063ac:	4630      	mov	r0, r6
 80063ae:	d107      	bne.n	80063c0 <_dtoa_r+0xa40>
 80063b0:	f000 fb04 	bl	80069bc <__multadd>
 80063b4:	4681      	mov	r9, r0
 80063b6:	4607      	mov	r7, r0
 80063b8:	9b05      	ldr	r3, [sp, #20]
 80063ba:	3301      	adds	r3, #1
 80063bc:	9305      	str	r3, [sp, #20]
 80063be:	e774      	b.n	80062aa <_dtoa_r+0x92a>
 80063c0:	f000 fafc 	bl	80069bc <__multadd>
 80063c4:	4639      	mov	r1, r7
 80063c6:	4681      	mov	r9, r0
 80063c8:	2300      	movs	r3, #0
 80063ca:	220a      	movs	r2, #10
 80063cc:	4630      	mov	r0, r6
 80063ce:	f000 faf5 	bl	80069bc <__multadd>
 80063d2:	4607      	mov	r7, r0
 80063d4:	e7f0      	b.n	80063b8 <_dtoa_r+0xa38>
 80063d6:	f1ba 0f00 	cmp.w	sl, #0
 80063da:	9a00      	ldr	r2, [sp, #0]
 80063dc:	bfcc      	ite	gt
 80063de:	46d0      	movgt	r8, sl
 80063e0:	f04f 0801 	movle.w	r8, #1
 80063e4:	4490      	add	r8, r2
 80063e6:	f04f 0900 	mov.w	r9, #0
 80063ea:	4629      	mov	r1, r5
 80063ec:	2201      	movs	r2, #1
 80063ee:	4630      	mov	r0, r6
 80063f0:	9302      	str	r3, [sp, #8]
 80063f2:	f000 fc93 	bl	8006d1c <__lshift>
 80063f6:	4621      	mov	r1, r4
 80063f8:	4605      	mov	r5, r0
 80063fa:	f000 fcfb 	bl	8006df4 <__mcmp>
 80063fe:	2800      	cmp	r0, #0
 8006400:	dcb1      	bgt.n	8006366 <_dtoa_r+0x9e6>
 8006402:	d102      	bne.n	800640a <_dtoa_r+0xa8a>
 8006404:	9b02      	ldr	r3, [sp, #8]
 8006406:	07db      	lsls	r3, r3, #31
 8006408:	d4ad      	bmi.n	8006366 <_dtoa_r+0x9e6>
 800640a:	4643      	mov	r3, r8
 800640c:	4698      	mov	r8, r3
 800640e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006412:	2a30      	cmp	r2, #48	; 0x30
 8006414:	d0fa      	beq.n	800640c <_dtoa_r+0xa8c>
 8006416:	e6f6      	b.n	8006206 <_dtoa_r+0x886>
 8006418:	9a00      	ldr	r2, [sp, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d1a4      	bne.n	8006368 <_dtoa_r+0x9e8>
 800641e:	f10b 0b01 	add.w	fp, fp, #1
 8006422:	2331      	movs	r3, #49	; 0x31
 8006424:	e778      	b.n	8006318 <_dtoa_r+0x998>
 8006426:	4b15      	ldr	r3, [pc, #84]	; (800647c <_dtoa_r+0xafc>)
 8006428:	f7ff bb12 	b.w	8005a50 <_dtoa_r+0xd0>
 800642c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800642e:	2b00      	cmp	r3, #0
 8006430:	f47f aaee 	bne.w	8005a10 <_dtoa_r+0x90>
 8006434:	4b12      	ldr	r3, [pc, #72]	; (8006480 <_dtoa_r+0xb00>)
 8006436:	f7ff bb0b 	b.w	8005a50 <_dtoa_r+0xd0>
 800643a:	f1ba 0f00 	cmp.w	sl, #0
 800643e:	dc03      	bgt.n	8006448 <_dtoa_r+0xac8>
 8006440:	9b07      	ldr	r3, [sp, #28]
 8006442:	2b02      	cmp	r3, #2
 8006444:	f73f aec7 	bgt.w	80061d6 <_dtoa_r+0x856>
 8006448:	f8dd 8000 	ldr.w	r8, [sp]
 800644c:	4621      	mov	r1, r4
 800644e:	4628      	mov	r0, r5
 8006450:	f7ff fa0a 	bl	8005868 <quorem>
 8006454:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006458:	f808 3b01 	strb.w	r3, [r8], #1
 800645c:	9a00      	ldr	r2, [sp, #0]
 800645e:	eba8 0202 	sub.w	r2, r8, r2
 8006462:	4592      	cmp	sl, r2
 8006464:	ddb7      	ble.n	80063d6 <_dtoa_r+0xa56>
 8006466:	4629      	mov	r1, r5
 8006468:	2300      	movs	r3, #0
 800646a:	220a      	movs	r2, #10
 800646c:	4630      	mov	r0, r6
 800646e:	f000 faa5 	bl	80069bc <__multadd>
 8006472:	4605      	mov	r5, r0
 8006474:	e7ea      	b.n	800644c <_dtoa_r+0xacc>
 8006476:	bf00      	nop
 8006478:	08008237 	.word	0x08008237
 800647c:	08008190 	.word	0x08008190
 8006480:	080081b4 	.word	0x080081b4

08006484 <__sflush_r>:
 8006484:	898a      	ldrh	r2, [r1, #12]
 8006486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800648a:	4605      	mov	r5, r0
 800648c:	0710      	lsls	r0, r2, #28
 800648e:	460c      	mov	r4, r1
 8006490:	d458      	bmi.n	8006544 <__sflush_r+0xc0>
 8006492:	684b      	ldr	r3, [r1, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	dc05      	bgt.n	80064a4 <__sflush_r+0x20>
 8006498:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800649a:	2b00      	cmp	r3, #0
 800649c:	dc02      	bgt.n	80064a4 <__sflush_r+0x20>
 800649e:	2000      	movs	r0, #0
 80064a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064a6:	2e00      	cmp	r6, #0
 80064a8:	d0f9      	beq.n	800649e <__sflush_r+0x1a>
 80064aa:	2300      	movs	r3, #0
 80064ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064b0:	682f      	ldr	r7, [r5, #0]
 80064b2:	602b      	str	r3, [r5, #0]
 80064b4:	d032      	beq.n	800651c <__sflush_r+0x98>
 80064b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064b8:	89a3      	ldrh	r3, [r4, #12]
 80064ba:	075a      	lsls	r2, r3, #29
 80064bc:	d505      	bpl.n	80064ca <__sflush_r+0x46>
 80064be:	6863      	ldr	r3, [r4, #4]
 80064c0:	1ac0      	subs	r0, r0, r3
 80064c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064c4:	b10b      	cbz	r3, 80064ca <__sflush_r+0x46>
 80064c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064c8:	1ac0      	subs	r0, r0, r3
 80064ca:	2300      	movs	r3, #0
 80064cc:	4602      	mov	r2, r0
 80064ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064d0:	6a21      	ldr	r1, [r4, #32]
 80064d2:	4628      	mov	r0, r5
 80064d4:	47b0      	blx	r6
 80064d6:	1c43      	adds	r3, r0, #1
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	d106      	bne.n	80064ea <__sflush_r+0x66>
 80064dc:	6829      	ldr	r1, [r5, #0]
 80064de:	291d      	cmp	r1, #29
 80064e0:	d82c      	bhi.n	800653c <__sflush_r+0xb8>
 80064e2:	4a2a      	ldr	r2, [pc, #168]	; (800658c <__sflush_r+0x108>)
 80064e4:	40ca      	lsrs	r2, r1
 80064e6:	07d6      	lsls	r6, r2, #31
 80064e8:	d528      	bpl.n	800653c <__sflush_r+0xb8>
 80064ea:	2200      	movs	r2, #0
 80064ec:	6062      	str	r2, [r4, #4]
 80064ee:	04d9      	lsls	r1, r3, #19
 80064f0:	6922      	ldr	r2, [r4, #16]
 80064f2:	6022      	str	r2, [r4, #0]
 80064f4:	d504      	bpl.n	8006500 <__sflush_r+0x7c>
 80064f6:	1c42      	adds	r2, r0, #1
 80064f8:	d101      	bne.n	80064fe <__sflush_r+0x7a>
 80064fa:	682b      	ldr	r3, [r5, #0]
 80064fc:	b903      	cbnz	r3, 8006500 <__sflush_r+0x7c>
 80064fe:	6560      	str	r0, [r4, #84]	; 0x54
 8006500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006502:	602f      	str	r7, [r5, #0]
 8006504:	2900      	cmp	r1, #0
 8006506:	d0ca      	beq.n	800649e <__sflush_r+0x1a>
 8006508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800650c:	4299      	cmp	r1, r3
 800650e:	d002      	beq.n	8006516 <__sflush_r+0x92>
 8006510:	4628      	mov	r0, r5
 8006512:	f000 fd7f 	bl	8007014 <_free_r>
 8006516:	2000      	movs	r0, #0
 8006518:	6360      	str	r0, [r4, #52]	; 0x34
 800651a:	e7c1      	b.n	80064a0 <__sflush_r+0x1c>
 800651c:	6a21      	ldr	r1, [r4, #32]
 800651e:	2301      	movs	r3, #1
 8006520:	4628      	mov	r0, r5
 8006522:	47b0      	blx	r6
 8006524:	1c41      	adds	r1, r0, #1
 8006526:	d1c7      	bne.n	80064b8 <__sflush_r+0x34>
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0c4      	beq.n	80064b8 <__sflush_r+0x34>
 800652e:	2b1d      	cmp	r3, #29
 8006530:	d001      	beq.n	8006536 <__sflush_r+0xb2>
 8006532:	2b16      	cmp	r3, #22
 8006534:	d101      	bne.n	800653a <__sflush_r+0xb6>
 8006536:	602f      	str	r7, [r5, #0]
 8006538:	e7b1      	b.n	800649e <__sflush_r+0x1a>
 800653a:	89a3      	ldrh	r3, [r4, #12]
 800653c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006540:	81a3      	strh	r3, [r4, #12]
 8006542:	e7ad      	b.n	80064a0 <__sflush_r+0x1c>
 8006544:	690f      	ldr	r7, [r1, #16]
 8006546:	2f00      	cmp	r7, #0
 8006548:	d0a9      	beq.n	800649e <__sflush_r+0x1a>
 800654a:	0793      	lsls	r3, r2, #30
 800654c:	680e      	ldr	r6, [r1, #0]
 800654e:	bf08      	it	eq
 8006550:	694b      	ldreq	r3, [r1, #20]
 8006552:	600f      	str	r7, [r1, #0]
 8006554:	bf18      	it	ne
 8006556:	2300      	movne	r3, #0
 8006558:	eba6 0807 	sub.w	r8, r6, r7
 800655c:	608b      	str	r3, [r1, #8]
 800655e:	f1b8 0f00 	cmp.w	r8, #0
 8006562:	dd9c      	ble.n	800649e <__sflush_r+0x1a>
 8006564:	6a21      	ldr	r1, [r4, #32]
 8006566:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006568:	4643      	mov	r3, r8
 800656a:	463a      	mov	r2, r7
 800656c:	4628      	mov	r0, r5
 800656e:	47b0      	blx	r6
 8006570:	2800      	cmp	r0, #0
 8006572:	dc06      	bgt.n	8006582 <__sflush_r+0xfe>
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800657a:	81a3      	strh	r3, [r4, #12]
 800657c:	f04f 30ff 	mov.w	r0, #4294967295
 8006580:	e78e      	b.n	80064a0 <__sflush_r+0x1c>
 8006582:	4407      	add	r7, r0
 8006584:	eba8 0800 	sub.w	r8, r8, r0
 8006588:	e7e9      	b.n	800655e <__sflush_r+0xda>
 800658a:	bf00      	nop
 800658c:	20400001 	.word	0x20400001

08006590 <_fflush_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	690b      	ldr	r3, [r1, #16]
 8006594:	4605      	mov	r5, r0
 8006596:	460c      	mov	r4, r1
 8006598:	b913      	cbnz	r3, 80065a0 <_fflush_r+0x10>
 800659a:	2500      	movs	r5, #0
 800659c:	4628      	mov	r0, r5
 800659e:	bd38      	pop	{r3, r4, r5, pc}
 80065a0:	b118      	cbz	r0, 80065aa <_fflush_r+0x1a>
 80065a2:	6983      	ldr	r3, [r0, #24]
 80065a4:	b90b      	cbnz	r3, 80065aa <_fflush_r+0x1a>
 80065a6:	f000 f887 	bl	80066b8 <__sinit>
 80065aa:	4b14      	ldr	r3, [pc, #80]	; (80065fc <_fflush_r+0x6c>)
 80065ac:	429c      	cmp	r4, r3
 80065ae:	d11b      	bne.n	80065e8 <_fflush_r+0x58>
 80065b0:	686c      	ldr	r4, [r5, #4]
 80065b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0ef      	beq.n	800659a <_fflush_r+0xa>
 80065ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065bc:	07d0      	lsls	r0, r2, #31
 80065be:	d404      	bmi.n	80065ca <_fflush_r+0x3a>
 80065c0:	0599      	lsls	r1, r3, #22
 80065c2:	d402      	bmi.n	80065ca <_fflush_r+0x3a>
 80065c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065c6:	f000 f91a 	bl	80067fe <__retarget_lock_acquire_recursive>
 80065ca:	4628      	mov	r0, r5
 80065cc:	4621      	mov	r1, r4
 80065ce:	f7ff ff59 	bl	8006484 <__sflush_r>
 80065d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065d4:	07da      	lsls	r2, r3, #31
 80065d6:	4605      	mov	r5, r0
 80065d8:	d4e0      	bmi.n	800659c <_fflush_r+0xc>
 80065da:	89a3      	ldrh	r3, [r4, #12]
 80065dc:	059b      	lsls	r3, r3, #22
 80065de:	d4dd      	bmi.n	800659c <_fflush_r+0xc>
 80065e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065e2:	f000 f90d 	bl	8006800 <__retarget_lock_release_recursive>
 80065e6:	e7d9      	b.n	800659c <_fflush_r+0xc>
 80065e8:	4b05      	ldr	r3, [pc, #20]	; (8006600 <_fflush_r+0x70>)
 80065ea:	429c      	cmp	r4, r3
 80065ec:	d101      	bne.n	80065f2 <_fflush_r+0x62>
 80065ee:	68ac      	ldr	r4, [r5, #8]
 80065f0:	e7df      	b.n	80065b2 <_fflush_r+0x22>
 80065f2:	4b04      	ldr	r3, [pc, #16]	; (8006604 <_fflush_r+0x74>)
 80065f4:	429c      	cmp	r4, r3
 80065f6:	bf08      	it	eq
 80065f8:	68ec      	ldreq	r4, [r5, #12]
 80065fa:	e7da      	b.n	80065b2 <_fflush_r+0x22>
 80065fc:	08008268 	.word	0x08008268
 8006600:	08008288 	.word	0x08008288
 8006604:	08008248 	.word	0x08008248

08006608 <std>:
 8006608:	2300      	movs	r3, #0
 800660a:	b510      	push	{r4, lr}
 800660c:	4604      	mov	r4, r0
 800660e:	e9c0 3300 	strd	r3, r3, [r0]
 8006612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006616:	6083      	str	r3, [r0, #8]
 8006618:	8181      	strh	r1, [r0, #12]
 800661a:	6643      	str	r3, [r0, #100]	; 0x64
 800661c:	81c2      	strh	r2, [r0, #14]
 800661e:	6183      	str	r3, [r0, #24]
 8006620:	4619      	mov	r1, r3
 8006622:	2208      	movs	r2, #8
 8006624:	305c      	adds	r0, #92	; 0x5c
 8006626:	f7fe fb65 	bl	8004cf4 <memset>
 800662a:	4b05      	ldr	r3, [pc, #20]	; (8006640 <std+0x38>)
 800662c:	6263      	str	r3, [r4, #36]	; 0x24
 800662e:	4b05      	ldr	r3, [pc, #20]	; (8006644 <std+0x3c>)
 8006630:	62a3      	str	r3, [r4, #40]	; 0x28
 8006632:	4b05      	ldr	r3, [pc, #20]	; (8006648 <std+0x40>)
 8006634:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006636:	4b05      	ldr	r3, [pc, #20]	; (800664c <std+0x44>)
 8006638:	6224      	str	r4, [r4, #32]
 800663a:	6323      	str	r3, [r4, #48]	; 0x30
 800663c:	bd10      	pop	{r4, pc}
 800663e:	bf00      	nop
 8006640:	080076f5 	.word	0x080076f5
 8006644:	08007717 	.word	0x08007717
 8006648:	0800774f 	.word	0x0800774f
 800664c:	08007773 	.word	0x08007773

08006650 <_cleanup_r>:
 8006650:	4901      	ldr	r1, [pc, #4]	; (8006658 <_cleanup_r+0x8>)
 8006652:	f000 b8af 	b.w	80067b4 <_fwalk_reent>
 8006656:	bf00      	nop
 8006658:	08006591 	.word	0x08006591

0800665c <__sfmoreglue>:
 800665c:	b570      	push	{r4, r5, r6, lr}
 800665e:	1e4a      	subs	r2, r1, #1
 8006660:	2568      	movs	r5, #104	; 0x68
 8006662:	4355      	muls	r5, r2
 8006664:	460e      	mov	r6, r1
 8006666:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800666a:	f000 fd23 	bl	80070b4 <_malloc_r>
 800666e:	4604      	mov	r4, r0
 8006670:	b140      	cbz	r0, 8006684 <__sfmoreglue+0x28>
 8006672:	2100      	movs	r1, #0
 8006674:	e9c0 1600 	strd	r1, r6, [r0]
 8006678:	300c      	adds	r0, #12
 800667a:	60a0      	str	r0, [r4, #8]
 800667c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006680:	f7fe fb38 	bl	8004cf4 <memset>
 8006684:	4620      	mov	r0, r4
 8006686:	bd70      	pop	{r4, r5, r6, pc}

08006688 <__sfp_lock_acquire>:
 8006688:	4801      	ldr	r0, [pc, #4]	; (8006690 <__sfp_lock_acquire+0x8>)
 800668a:	f000 b8b8 	b.w	80067fe <__retarget_lock_acquire_recursive>
 800668e:	bf00      	nop
 8006690:	2000042c 	.word	0x2000042c

08006694 <__sfp_lock_release>:
 8006694:	4801      	ldr	r0, [pc, #4]	; (800669c <__sfp_lock_release+0x8>)
 8006696:	f000 b8b3 	b.w	8006800 <__retarget_lock_release_recursive>
 800669a:	bf00      	nop
 800669c:	2000042c 	.word	0x2000042c

080066a0 <__sinit_lock_acquire>:
 80066a0:	4801      	ldr	r0, [pc, #4]	; (80066a8 <__sinit_lock_acquire+0x8>)
 80066a2:	f000 b8ac 	b.w	80067fe <__retarget_lock_acquire_recursive>
 80066a6:	bf00      	nop
 80066a8:	20000427 	.word	0x20000427

080066ac <__sinit_lock_release>:
 80066ac:	4801      	ldr	r0, [pc, #4]	; (80066b4 <__sinit_lock_release+0x8>)
 80066ae:	f000 b8a7 	b.w	8006800 <__retarget_lock_release_recursive>
 80066b2:	bf00      	nop
 80066b4:	20000427 	.word	0x20000427

080066b8 <__sinit>:
 80066b8:	b510      	push	{r4, lr}
 80066ba:	4604      	mov	r4, r0
 80066bc:	f7ff fff0 	bl	80066a0 <__sinit_lock_acquire>
 80066c0:	69a3      	ldr	r3, [r4, #24]
 80066c2:	b11b      	cbz	r3, 80066cc <__sinit+0x14>
 80066c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066c8:	f7ff bff0 	b.w	80066ac <__sinit_lock_release>
 80066cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80066d0:	6523      	str	r3, [r4, #80]	; 0x50
 80066d2:	4b13      	ldr	r3, [pc, #76]	; (8006720 <__sinit+0x68>)
 80066d4:	4a13      	ldr	r2, [pc, #76]	; (8006724 <__sinit+0x6c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80066da:	42a3      	cmp	r3, r4
 80066dc:	bf04      	itt	eq
 80066de:	2301      	moveq	r3, #1
 80066e0:	61a3      	streq	r3, [r4, #24]
 80066e2:	4620      	mov	r0, r4
 80066e4:	f000 f820 	bl	8006728 <__sfp>
 80066e8:	6060      	str	r0, [r4, #4]
 80066ea:	4620      	mov	r0, r4
 80066ec:	f000 f81c 	bl	8006728 <__sfp>
 80066f0:	60a0      	str	r0, [r4, #8]
 80066f2:	4620      	mov	r0, r4
 80066f4:	f000 f818 	bl	8006728 <__sfp>
 80066f8:	2200      	movs	r2, #0
 80066fa:	60e0      	str	r0, [r4, #12]
 80066fc:	2104      	movs	r1, #4
 80066fe:	6860      	ldr	r0, [r4, #4]
 8006700:	f7ff ff82 	bl	8006608 <std>
 8006704:	68a0      	ldr	r0, [r4, #8]
 8006706:	2201      	movs	r2, #1
 8006708:	2109      	movs	r1, #9
 800670a:	f7ff ff7d 	bl	8006608 <std>
 800670e:	68e0      	ldr	r0, [r4, #12]
 8006710:	2202      	movs	r2, #2
 8006712:	2112      	movs	r1, #18
 8006714:	f7ff ff78 	bl	8006608 <std>
 8006718:	2301      	movs	r3, #1
 800671a:	61a3      	str	r3, [r4, #24]
 800671c:	e7d2      	b.n	80066c4 <__sinit+0xc>
 800671e:	bf00      	nop
 8006720:	0800817c 	.word	0x0800817c
 8006724:	08006651 	.word	0x08006651

08006728 <__sfp>:
 8006728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672a:	4607      	mov	r7, r0
 800672c:	f7ff ffac 	bl	8006688 <__sfp_lock_acquire>
 8006730:	4b1e      	ldr	r3, [pc, #120]	; (80067ac <__sfp+0x84>)
 8006732:	681e      	ldr	r6, [r3, #0]
 8006734:	69b3      	ldr	r3, [r6, #24]
 8006736:	b913      	cbnz	r3, 800673e <__sfp+0x16>
 8006738:	4630      	mov	r0, r6
 800673a:	f7ff ffbd 	bl	80066b8 <__sinit>
 800673e:	3648      	adds	r6, #72	; 0x48
 8006740:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006744:	3b01      	subs	r3, #1
 8006746:	d503      	bpl.n	8006750 <__sfp+0x28>
 8006748:	6833      	ldr	r3, [r6, #0]
 800674a:	b30b      	cbz	r3, 8006790 <__sfp+0x68>
 800674c:	6836      	ldr	r6, [r6, #0]
 800674e:	e7f7      	b.n	8006740 <__sfp+0x18>
 8006750:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006754:	b9d5      	cbnz	r5, 800678c <__sfp+0x64>
 8006756:	4b16      	ldr	r3, [pc, #88]	; (80067b0 <__sfp+0x88>)
 8006758:	60e3      	str	r3, [r4, #12]
 800675a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800675e:	6665      	str	r5, [r4, #100]	; 0x64
 8006760:	f000 f84c 	bl	80067fc <__retarget_lock_init_recursive>
 8006764:	f7ff ff96 	bl	8006694 <__sfp_lock_release>
 8006768:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800676c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006770:	6025      	str	r5, [r4, #0]
 8006772:	61a5      	str	r5, [r4, #24]
 8006774:	2208      	movs	r2, #8
 8006776:	4629      	mov	r1, r5
 8006778:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800677c:	f7fe faba 	bl	8004cf4 <memset>
 8006780:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006784:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006788:	4620      	mov	r0, r4
 800678a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800678c:	3468      	adds	r4, #104	; 0x68
 800678e:	e7d9      	b.n	8006744 <__sfp+0x1c>
 8006790:	2104      	movs	r1, #4
 8006792:	4638      	mov	r0, r7
 8006794:	f7ff ff62 	bl	800665c <__sfmoreglue>
 8006798:	4604      	mov	r4, r0
 800679a:	6030      	str	r0, [r6, #0]
 800679c:	2800      	cmp	r0, #0
 800679e:	d1d5      	bne.n	800674c <__sfp+0x24>
 80067a0:	f7ff ff78 	bl	8006694 <__sfp_lock_release>
 80067a4:	230c      	movs	r3, #12
 80067a6:	603b      	str	r3, [r7, #0]
 80067a8:	e7ee      	b.n	8006788 <__sfp+0x60>
 80067aa:	bf00      	nop
 80067ac:	0800817c 	.word	0x0800817c
 80067b0:	ffff0001 	.word	0xffff0001

080067b4 <_fwalk_reent>:
 80067b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067b8:	4606      	mov	r6, r0
 80067ba:	4688      	mov	r8, r1
 80067bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067c0:	2700      	movs	r7, #0
 80067c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067c6:	f1b9 0901 	subs.w	r9, r9, #1
 80067ca:	d505      	bpl.n	80067d8 <_fwalk_reent+0x24>
 80067cc:	6824      	ldr	r4, [r4, #0]
 80067ce:	2c00      	cmp	r4, #0
 80067d0:	d1f7      	bne.n	80067c2 <_fwalk_reent+0xe>
 80067d2:	4638      	mov	r0, r7
 80067d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067d8:	89ab      	ldrh	r3, [r5, #12]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d907      	bls.n	80067ee <_fwalk_reent+0x3a>
 80067de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067e2:	3301      	adds	r3, #1
 80067e4:	d003      	beq.n	80067ee <_fwalk_reent+0x3a>
 80067e6:	4629      	mov	r1, r5
 80067e8:	4630      	mov	r0, r6
 80067ea:	47c0      	blx	r8
 80067ec:	4307      	orrs	r7, r0
 80067ee:	3568      	adds	r5, #104	; 0x68
 80067f0:	e7e9      	b.n	80067c6 <_fwalk_reent+0x12>
	...

080067f4 <_localeconv_r>:
 80067f4:	4800      	ldr	r0, [pc, #0]	; (80067f8 <_localeconv_r+0x4>)
 80067f6:	4770      	bx	lr
 80067f8:	20000160 	.word	0x20000160

080067fc <__retarget_lock_init_recursive>:
 80067fc:	4770      	bx	lr

080067fe <__retarget_lock_acquire_recursive>:
 80067fe:	4770      	bx	lr

08006800 <__retarget_lock_release_recursive>:
 8006800:	4770      	bx	lr

08006802 <__swhatbuf_r>:
 8006802:	b570      	push	{r4, r5, r6, lr}
 8006804:	460e      	mov	r6, r1
 8006806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680a:	2900      	cmp	r1, #0
 800680c:	b096      	sub	sp, #88	; 0x58
 800680e:	4614      	mov	r4, r2
 8006810:	461d      	mov	r5, r3
 8006812:	da07      	bge.n	8006824 <__swhatbuf_r+0x22>
 8006814:	2300      	movs	r3, #0
 8006816:	602b      	str	r3, [r5, #0]
 8006818:	89b3      	ldrh	r3, [r6, #12]
 800681a:	061a      	lsls	r2, r3, #24
 800681c:	d410      	bmi.n	8006840 <__swhatbuf_r+0x3e>
 800681e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006822:	e00e      	b.n	8006842 <__swhatbuf_r+0x40>
 8006824:	466a      	mov	r2, sp
 8006826:	f000 fffb 	bl	8007820 <_fstat_r>
 800682a:	2800      	cmp	r0, #0
 800682c:	dbf2      	blt.n	8006814 <__swhatbuf_r+0x12>
 800682e:	9a01      	ldr	r2, [sp, #4]
 8006830:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006834:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006838:	425a      	negs	r2, r3
 800683a:	415a      	adcs	r2, r3
 800683c:	602a      	str	r2, [r5, #0]
 800683e:	e7ee      	b.n	800681e <__swhatbuf_r+0x1c>
 8006840:	2340      	movs	r3, #64	; 0x40
 8006842:	2000      	movs	r0, #0
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	b016      	add	sp, #88	; 0x58
 8006848:	bd70      	pop	{r4, r5, r6, pc}
	...

0800684c <__smakebuf_r>:
 800684c:	898b      	ldrh	r3, [r1, #12]
 800684e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006850:	079d      	lsls	r5, r3, #30
 8006852:	4606      	mov	r6, r0
 8006854:	460c      	mov	r4, r1
 8006856:	d507      	bpl.n	8006868 <__smakebuf_r+0x1c>
 8006858:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	6123      	str	r3, [r4, #16]
 8006860:	2301      	movs	r3, #1
 8006862:	6163      	str	r3, [r4, #20]
 8006864:	b002      	add	sp, #8
 8006866:	bd70      	pop	{r4, r5, r6, pc}
 8006868:	ab01      	add	r3, sp, #4
 800686a:	466a      	mov	r2, sp
 800686c:	f7ff ffc9 	bl	8006802 <__swhatbuf_r>
 8006870:	9900      	ldr	r1, [sp, #0]
 8006872:	4605      	mov	r5, r0
 8006874:	4630      	mov	r0, r6
 8006876:	f000 fc1d 	bl	80070b4 <_malloc_r>
 800687a:	b948      	cbnz	r0, 8006890 <__smakebuf_r+0x44>
 800687c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006880:	059a      	lsls	r2, r3, #22
 8006882:	d4ef      	bmi.n	8006864 <__smakebuf_r+0x18>
 8006884:	f023 0303 	bic.w	r3, r3, #3
 8006888:	f043 0302 	orr.w	r3, r3, #2
 800688c:	81a3      	strh	r3, [r4, #12]
 800688e:	e7e3      	b.n	8006858 <__smakebuf_r+0xc>
 8006890:	4b0d      	ldr	r3, [pc, #52]	; (80068c8 <__smakebuf_r+0x7c>)
 8006892:	62b3      	str	r3, [r6, #40]	; 0x28
 8006894:	89a3      	ldrh	r3, [r4, #12]
 8006896:	6020      	str	r0, [r4, #0]
 8006898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800689c:	81a3      	strh	r3, [r4, #12]
 800689e:	9b00      	ldr	r3, [sp, #0]
 80068a0:	6163      	str	r3, [r4, #20]
 80068a2:	9b01      	ldr	r3, [sp, #4]
 80068a4:	6120      	str	r0, [r4, #16]
 80068a6:	b15b      	cbz	r3, 80068c0 <__smakebuf_r+0x74>
 80068a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068ac:	4630      	mov	r0, r6
 80068ae:	f000 ffc9 	bl	8007844 <_isatty_r>
 80068b2:	b128      	cbz	r0, 80068c0 <__smakebuf_r+0x74>
 80068b4:	89a3      	ldrh	r3, [r4, #12]
 80068b6:	f023 0303 	bic.w	r3, r3, #3
 80068ba:	f043 0301 	orr.w	r3, r3, #1
 80068be:	81a3      	strh	r3, [r4, #12]
 80068c0:	89a0      	ldrh	r0, [r4, #12]
 80068c2:	4305      	orrs	r5, r0
 80068c4:	81a5      	strh	r5, [r4, #12]
 80068c6:	e7cd      	b.n	8006864 <__smakebuf_r+0x18>
 80068c8:	08006651 	.word	0x08006651

080068cc <malloc>:
 80068cc:	4b02      	ldr	r3, [pc, #8]	; (80068d8 <malloc+0xc>)
 80068ce:	4601      	mov	r1, r0
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	f000 bbef 	b.w	80070b4 <_malloc_r>
 80068d6:	bf00      	nop
 80068d8:	2000000c 	.word	0x2000000c

080068dc <memcpy>:
 80068dc:	440a      	add	r2, r1
 80068de:	4291      	cmp	r1, r2
 80068e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80068e4:	d100      	bne.n	80068e8 <memcpy+0xc>
 80068e6:	4770      	bx	lr
 80068e8:	b510      	push	{r4, lr}
 80068ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068f2:	4291      	cmp	r1, r2
 80068f4:	d1f9      	bne.n	80068ea <memcpy+0xe>
 80068f6:	bd10      	pop	{r4, pc}

080068f8 <_Balloc>:
 80068f8:	b570      	push	{r4, r5, r6, lr}
 80068fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068fc:	4604      	mov	r4, r0
 80068fe:	460d      	mov	r5, r1
 8006900:	b976      	cbnz	r6, 8006920 <_Balloc+0x28>
 8006902:	2010      	movs	r0, #16
 8006904:	f7ff ffe2 	bl	80068cc <malloc>
 8006908:	4602      	mov	r2, r0
 800690a:	6260      	str	r0, [r4, #36]	; 0x24
 800690c:	b920      	cbnz	r0, 8006918 <_Balloc+0x20>
 800690e:	4b18      	ldr	r3, [pc, #96]	; (8006970 <_Balloc+0x78>)
 8006910:	4818      	ldr	r0, [pc, #96]	; (8006974 <_Balloc+0x7c>)
 8006912:	2166      	movs	r1, #102	; 0x66
 8006914:	f000 ff44 	bl	80077a0 <__assert_func>
 8006918:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800691c:	6006      	str	r6, [r0, #0]
 800691e:	60c6      	str	r6, [r0, #12]
 8006920:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006922:	68f3      	ldr	r3, [r6, #12]
 8006924:	b183      	cbz	r3, 8006948 <_Balloc+0x50>
 8006926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800692e:	b9b8      	cbnz	r0, 8006960 <_Balloc+0x68>
 8006930:	2101      	movs	r1, #1
 8006932:	fa01 f605 	lsl.w	r6, r1, r5
 8006936:	1d72      	adds	r2, r6, #5
 8006938:	0092      	lsls	r2, r2, #2
 800693a:	4620      	mov	r0, r4
 800693c:	f000 fb5a 	bl	8006ff4 <_calloc_r>
 8006940:	b160      	cbz	r0, 800695c <_Balloc+0x64>
 8006942:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006946:	e00e      	b.n	8006966 <_Balloc+0x6e>
 8006948:	2221      	movs	r2, #33	; 0x21
 800694a:	2104      	movs	r1, #4
 800694c:	4620      	mov	r0, r4
 800694e:	f000 fb51 	bl	8006ff4 <_calloc_r>
 8006952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006954:	60f0      	str	r0, [r6, #12]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e4      	bne.n	8006926 <_Balloc+0x2e>
 800695c:	2000      	movs	r0, #0
 800695e:	bd70      	pop	{r4, r5, r6, pc}
 8006960:	6802      	ldr	r2, [r0, #0]
 8006962:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006966:	2300      	movs	r3, #0
 8006968:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800696c:	e7f7      	b.n	800695e <_Balloc+0x66>
 800696e:	bf00      	nop
 8006970:	080081c1 	.word	0x080081c1
 8006974:	080082a8 	.word	0x080082a8

08006978 <_Bfree>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800697c:	4605      	mov	r5, r0
 800697e:	460c      	mov	r4, r1
 8006980:	b976      	cbnz	r6, 80069a0 <_Bfree+0x28>
 8006982:	2010      	movs	r0, #16
 8006984:	f7ff ffa2 	bl	80068cc <malloc>
 8006988:	4602      	mov	r2, r0
 800698a:	6268      	str	r0, [r5, #36]	; 0x24
 800698c:	b920      	cbnz	r0, 8006998 <_Bfree+0x20>
 800698e:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <_Bfree+0x3c>)
 8006990:	4809      	ldr	r0, [pc, #36]	; (80069b8 <_Bfree+0x40>)
 8006992:	218a      	movs	r1, #138	; 0x8a
 8006994:	f000 ff04 	bl	80077a0 <__assert_func>
 8006998:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800699c:	6006      	str	r6, [r0, #0]
 800699e:	60c6      	str	r6, [r0, #12]
 80069a0:	b13c      	cbz	r4, 80069b2 <_Bfree+0x3a>
 80069a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80069a4:	6862      	ldr	r2, [r4, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069ac:	6021      	str	r1, [r4, #0]
 80069ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069b2:	bd70      	pop	{r4, r5, r6, pc}
 80069b4:	080081c1 	.word	0x080081c1
 80069b8:	080082a8 	.word	0x080082a8

080069bc <__multadd>:
 80069bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c0:	690e      	ldr	r6, [r1, #16]
 80069c2:	4607      	mov	r7, r0
 80069c4:	4698      	mov	r8, r3
 80069c6:	460c      	mov	r4, r1
 80069c8:	f101 0014 	add.w	r0, r1, #20
 80069cc:	2300      	movs	r3, #0
 80069ce:	6805      	ldr	r5, [r0, #0]
 80069d0:	b2a9      	uxth	r1, r5
 80069d2:	fb02 8101 	mla	r1, r2, r1, r8
 80069d6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80069da:	0c2d      	lsrs	r5, r5, #16
 80069dc:	fb02 c505 	mla	r5, r2, r5, ip
 80069e0:	b289      	uxth	r1, r1
 80069e2:	3301      	adds	r3, #1
 80069e4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80069e8:	429e      	cmp	r6, r3
 80069ea:	f840 1b04 	str.w	r1, [r0], #4
 80069ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80069f2:	dcec      	bgt.n	80069ce <__multadd+0x12>
 80069f4:	f1b8 0f00 	cmp.w	r8, #0
 80069f8:	d022      	beq.n	8006a40 <__multadd+0x84>
 80069fa:	68a3      	ldr	r3, [r4, #8]
 80069fc:	42b3      	cmp	r3, r6
 80069fe:	dc19      	bgt.n	8006a34 <__multadd+0x78>
 8006a00:	6861      	ldr	r1, [r4, #4]
 8006a02:	4638      	mov	r0, r7
 8006a04:	3101      	adds	r1, #1
 8006a06:	f7ff ff77 	bl	80068f8 <_Balloc>
 8006a0a:	4605      	mov	r5, r0
 8006a0c:	b928      	cbnz	r0, 8006a1a <__multadd+0x5e>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	4b0d      	ldr	r3, [pc, #52]	; (8006a48 <__multadd+0x8c>)
 8006a12:	480e      	ldr	r0, [pc, #56]	; (8006a4c <__multadd+0x90>)
 8006a14:	21b5      	movs	r1, #181	; 0xb5
 8006a16:	f000 fec3 	bl	80077a0 <__assert_func>
 8006a1a:	6922      	ldr	r2, [r4, #16]
 8006a1c:	3202      	adds	r2, #2
 8006a1e:	f104 010c 	add.w	r1, r4, #12
 8006a22:	0092      	lsls	r2, r2, #2
 8006a24:	300c      	adds	r0, #12
 8006a26:	f7ff ff59 	bl	80068dc <memcpy>
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	f7ff ffa3 	bl	8006978 <_Bfree>
 8006a32:	462c      	mov	r4, r5
 8006a34:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006a38:	3601      	adds	r6, #1
 8006a3a:	f8c3 8014 	str.w	r8, [r3, #20]
 8006a3e:	6126      	str	r6, [r4, #16]
 8006a40:	4620      	mov	r0, r4
 8006a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a46:	bf00      	nop
 8006a48:	08008237 	.word	0x08008237
 8006a4c:	080082a8 	.word	0x080082a8

08006a50 <__hi0bits>:
 8006a50:	0c03      	lsrs	r3, r0, #16
 8006a52:	041b      	lsls	r3, r3, #16
 8006a54:	b9d3      	cbnz	r3, 8006a8c <__hi0bits+0x3c>
 8006a56:	0400      	lsls	r0, r0, #16
 8006a58:	2310      	movs	r3, #16
 8006a5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006a5e:	bf04      	itt	eq
 8006a60:	0200      	lsleq	r0, r0, #8
 8006a62:	3308      	addeq	r3, #8
 8006a64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006a68:	bf04      	itt	eq
 8006a6a:	0100      	lsleq	r0, r0, #4
 8006a6c:	3304      	addeq	r3, #4
 8006a6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a72:	bf04      	itt	eq
 8006a74:	0080      	lsleq	r0, r0, #2
 8006a76:	3302      	addeq	r3, #2
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	db05      	blt.n	8006a88 <__hi0bits+0x38>
 8006a7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a80:	f103 0301 	add.w	r3, r3, #1
 8006a84:	bf08      	it	eq
 8006a86:	2320      	moveq	r3, #32
 8006a88:	4618      	mov	r0, r3
 8006a8a:	4770      	bx	lr
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	e7e4      	b.n	8006a5a <__hi0bits+0xa>

08006a90 <__lo0bits>:
 8006a90:	6803      	ldr	r3, [r0, #0]
 8006a92:	f013 0207 	ands.w	r2, r3, #7
 8006a96:	4601      	mov	r1, r0
 8006a98:	d00b      	beq.n	8006ab2 <__lo0bits+0x22>
 8006a9a:	07da      	lsls	r2, r3, #31
 8006a9c:	d424      	bmi.n	8006ae8 <__lo0bits+0x58>
 8006a9e:	0798      	lsls	r0, r3, #30
 8006aa0:	bf49      	itett	mi
 8006aa2:	085b      	lsrmi	r3, r3, #1
 8006aa4:	089b      	lsrpl	r3, r3, #2
 8006aa6:	2001      	movmi	r0, #1
 8006aa8:	600b      	strmi	r3, [r1, #0]
 8006aaa:	bf5c      	itt	pl
 8006aac:	600b      	strpl	r3, [r1, #0]
 8006aae:	2002      	movpl	r0, #2
 8006ab0:	4770      	bx	lr
 8006ab2:	b298      	uxth	r0, r3
 8006ab4:	b9b0      	cbnz	r0, 8006ae4 <__lo0bits+0x54>
 8006ab6:	0c1b      	lsrs	r3, r3, #16
 8006ab8:	2010      	movs	r0, #16
 8006aba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006abe:	bf04      	itt	eq
 8006ac0:	0a1b      	lsreq	r3, r3, #8
 8006ac2:	3008      	addeq	r0, #8
 8006ac4:	071a      	lsls	r2, r3, #28
 8006ac6:	bf04      	itt	eq
 8006ac8:	091b      	lsreq	r3, r3, #4
 8006aca:	3004      	addeq	r0, #4
 8006acc:	079a      	lsls	r2, r3, #30
 8006ace:	bf04      	itt	eq
 8006ad0:	089b      	lsreq	r3, r3, #2
 8006ad2:	3002      	addeq	r0, #2
 8006ad4:	07da      	lsls	r2, r3, #31
 8006ad6:	d403      	bmi.n	8006ae0 <__lo0bits+0x50>
 8006ad8:	085b      	lsrs	r3, r3, #1
 8006ada:	f100 0001 	add.w	r0, r0, #1
 8006ade:	d005      	beq.n	8006aec <__lo0bits+0x5c>
 8006ae0:	600b      	str	r3, [r1, #0]
 8006ae2:	4770      	bx	lr
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	e7e8      	b.n	8006aba <__lo0bits+0x2a>
 8006ae8:	2000      	movs	r0, #0
 8006aea:	4770      	bx	lr
 8006aec:	2020      	movs	r0, #32
 8006aee:	4770      	bx	lr

08006af0 <__i2b>:
 8006af0:	b510      	push	{r4, lr}
 8006af2:	460c      	mov	r4, r1
 8006af4:	2101      	movs	r1, #1
 8006af6:	f7ff feff 	bl	80068f8 <_Balloc>
 8006afa:	4602      	mov	r2, r0
 8006afc:	b928      	cbnz	r0, 8006b0a <__i2b+0x1a>
 8006afe:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <__i2b+0x24>)
 8006b00:	4805      	ldr	r0, [pc, #20]	; (8006b18 <__i2b+0x28>)
 8006b02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b06:	f000 fe4b 	bl	80077a0 <__assert_func>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	6144      	str	r4, [r0, #20]
 8006b0e:	6103      	str	r3, [r0, #16]
 8006b10:	bd10      	pop	{r4, pc}
 8006b12:	bf00      	nop
 8006b14:	08008237 	.word	0x08008237
 8006b18:	080082a8 	.word	0x080082a8

08006b1c <__multiply>:
 8006b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b20:	4614      	mov	r4, r2
 8006b22:	690a      	ldr	r2, [r1, #16]
 8006b24:	6923      	ldr	r3, [r4, #16]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	bfb8      	it	lt
 8006b2a:	460b      	movlt	r3, r1
 8006b2c:	460d      	mov	r5, r1
 8006b2e:	bfbc      	itt	lt
 8006b30:	4625      	movlt	r5, r4
 8006b32:	461c      	movlt	r4, r3
 8006b34:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006b38:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006b3c:	68ab      	ldr	r3, [r5, #8]
 8006b3e:	6869      	ldr	r1, [r5, #4]
 8006b40:	eb0a 0709 	add.w	r7, sl, r9
 8006b44:	42bb      	cmp	r3, r7
 8006b46:	b085      	sub	sp, #20
 8006b48:	bfb8      	it	lt
 8006b4a:	3101      	addlt	r1, #1
 8006b4c:	f7ff fed4 	bl	80068f8 <_Balloc>
 8006b50:	b930      	cbnz	r0, 8006b60 <__multiply+0x44>
 8006b52:	4602      	mov	r2, r0
 8006b54:	4b42      	ldr	r3, [pc, #264]	; (8006c60 <__multiply+0x144>)
 8006b56:	4843      	ldr	r0, [pc, #268]	; (8006c64 <__multiply+0x148>)
 8006b58:	f240 115d 	movw	r1, #349	; 0x15d
 8006b5c:	f000 fe20 	bl	80077a0 <__assert_func>
 8006b60:	f100 0614 	add.w	r6, r0, #20
 8006b64:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006b68:	4633      	mov	r3, r6
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	4543      	cmp	r3, r8
 8006b6e:	d31e      	bcc.n	8006bae <__multiply+0x92>
 8006b70:	f105 0c14 	add.w	ip, r5, #20
 8006b74:	f104 0314 	add.w	r3, r4, #20
 8006b78:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006b7c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006b80:	9202      	str	r2, [sp, #8]
 8006b82:	ebac 0205 	sub.w	r2, ip, r5
 8006b86:	3a15      	subs	r2, #21
 8006b88:	f022 0203 	bic.w	r2, r2, #3
 8006b8c:	3204      	adds	r2, #4
 8006b8e:	f105 0115 	add.w	r1, r5, #21
 8006b92:	458c      	cmp	ip, r1
 8006b94:	bf38      	it	cc
 8006b96:	2204      	movcc	r2, #4
 8006b98:	9201      	str	r2, [sp, #4]
 8006b9a:	9a02      	ldr	r2, [sp, #8]
 8006b9c:	9303      	str	r3, [sp, #12]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d808      	bhi.n	8006bb4 <__multiply+0x98>
 8006ba2:	2f00      	cmp	r7, #0
 8006ba4:	dc55      	bgt.n	8006c52 <__multiply+0x136>
 8006ba6:	6107      	str	r7, [r0, #16]
 8006ba8:	b005      	add	sp, #20
 8006baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bae:	f843 2b04 	str.w	r2, [r3], #4
 8006bb2:	e7db      	b.n	8006b6c <__multiply+0x50>
 8006bb4:	f8b3 a000 	ldrh.w	sl, [r3]
 8006bb8:	f1ba 0f00 	cmp.w	sl, #0
 8006bbc:	d020      	beq.n	8006c00 <__multiply+0xe4>
 8006bbe:	f105 0e14 	add.w	lr, r5, #20
 8006bc2:	46b1      	mov	r9, r6
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006bca:	f8d9 b000 	ldr.w	fp, [r9]
 8006bce:	b2a1      	uxth	r1, r4
 8006bd0:	fa1f fb8b 	uxth.w	fp, fp
 8006bd4:	fb0a b101 	mla	r1, sl, r1, fp
 8006bd8:	4411      	add	r1, r2
 8006bda:	f8d9 2000 	ldr.w	r2, [r9]
 8006bde:	0c24      	lsrs	r4, r4, #16
 8006be0:	0c12      	lsrs	r2, r2, #16
 8006be2:	fb0a 2404 	mla	r4, sl, r4, r2
 8006be6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006bea:	b289      	uxth	r1, r1
 8006bec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006bf0:	45f4      	cmp	ip, lr
 8006bf2:	f849 1b04 	str.w	r1, [r9], #4
 8006bf6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006bfa:	d8e4      	bhi.n	8006bc6 <__multiply+0xaa>
 8006bfc:	9901      	ldr	r1, [sp, #4]
 8006bfe:	5072      	str	r2, [r6, r1]
 8006c00:	9a03      	ldr	r2, [sp, #12]
 8006c02:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c06:	3304      	adds	r3, #4
 8006c08:	f1b9 0f00 	cmp.w	r9, #0
 8006c0c:	d01f      	beq.n	8006c4e <__multiply+0x132>
 8006c0e:	6834      	ldr	r4, [r6, #0]
 8006c10:	f105 0114 	add.w	r1, r5, #20
 8006c14:	46b6      	mov	lr, r6
 8006c16:	f04f 0a00 	mov.w	sl, #0
 8006c1a:	880a      	ldrh	r2, [r1, #0]
 8006c1c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006c20:	fb09 b202 	mla	r2, r9, r2, fp
 8006c24:	4492      	add	sl, r2
 8006c26:	b2a4      	uxth	r4, r4
 8006c28:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006c2c:	f84e 4b04 	str.w	r4, [lr], #4
 8006c30:	f851 4b04 	ldr.w	r4, [r1], #4
 8006c34:	f8be 2000 	ldrh.w	r2, [lr]
 8006c38:	0c24      	lsrs	r4, r4, #16
 8006c3a:	fb09 2404 	mla	r4, r9, r4, r2
 8006c3e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006c42:	458c      	cmp	ip, r1
 8006c44:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006c48:	d8e7      	bhi.n	8006c1a <__multiply+0xfe>
 8006c4a:	9a01      	ldr	r2, [sp, #4]
 8006c4c:	50b4      	str	r4, [r6, r2]
 8006c4e:	3604      	adds	r6, #4
 8006c50:	e7a3      	b.n	8006b9a <__multiply+0x7e>
 8006c52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1a5      	bne.n	8006ba6 <__multiply+0x8a>
 8006c5a:	3f01      	subs	r7, #1
 8006c5c:	e7a1      	b.n	8006ba2 <__multiply+0x86>
 8006c5e:	bf00      	nop
 8006c60:	08008237 	.word	0x08008237
 8006c64:	080082a8 	.word	0x080082a8

08006c68 <__pow5mult>:
 8006c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c6c:	4615      	mov	r5, r2
 8006c6e:	f012 0203 	ands.w	r2, r2, #3
 8006c72:	4606      	mov	r6, r0
 8006c74:	460f      	mov	r7, r1
 8006c76:	d007      	beq.n	8006c88 <__pow5mult+0x20>
 8006c78:	4c25      	ldr	r4, [pc, #148]	; (8006d10 <__pow5mult+0xa8>)
 8006c7a:	3a01      	subs	r2, #1
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c82:	f7ff fe9b 	bl	80069bc <__multadd>
 8006c86:	4607      	mov	r7, r0
 8006c88:	10ad      	asrs	r5, r5, #2
 8006c8a:	d03d      	beq.n	8006d08 <__pow5mult+0xa0>
 8006c8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c8e:	b97c      	cbnz	r4, 8006cb0 <__pow5mult+0x48>
 8006c90:	2010      	movs	r0, #16
 8006c92:	f7ff fe1b 	bl	80068cc <malloc>
 8006c96:	4602      	mov	r2, r0
 8006c98:	6270      	str	r0, [r6, #36]	; 0x24
 8006c9a:	b928      	cbnz	r0, 8006ca8 <__pow5mult+0x40>
 8006c9c:	4b1d      	ldr	r3, [pc, #116]	; (8006d14 <__pow5mult+0xac>)
 8006c9e:	481e      	ldr	r0, [pc, #120]	; (8006d18 <__pow5mult+0xb0>)
 8006ca0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006ca4:	f000 fd7c 	bl	80077a0 <__assert_func>
 8006ca8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cac:	6004      	str	r4, [r0, #0]
 8006cae:	60c4      	str	r4, [r0, #12]
 8006cb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006cb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cb8:	b94c      	cbnz	r4, 8006cce <__pow5mult+0x66>
 8006cba:	f240 2171 	movw	r1, #625	; 0x271
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	f7ff ff16 	bl	8006af0 <__i2b>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cca:	4604      	mov	r4, r0
 8006ccc:	6003      	str	r3, [r0, #0]
 8006cce:	f04f 0900 	mov.w	r9, #0
 8006cd2:	07eb      	lsls	r3, r5, #31
 8006cd4:	d50a      	bpl.n	8006cec <__pow5mult+0x84>
 8006cd6:	4639      	mov	r1, r7
 8006cd8:	4622      	mov	r2, r4
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f7ff ff1e 	bl	8006b1c <__multiply>
 8006ce0:	4639      	mov	r1, r7
 8006ce2:	4680      	mov	r8, r0
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f7ff fe47 	bl	8006978 <_Bfree>
 8006cea:	4647      	mov	r7, r8
 8006cec:	106d      	asrs	r5, r5, #1
 8006cee:	d00b      	beq.n	8006d08 <__pow5mult+0xa0>
 8006cf0:	6820      	ldr	r0, [r4, #0]
 8006cf2:	b938      	cbnz	r0, 8006d04 <__pow5mult+0x9c>
 8006cf4:	4622      	mov	r2, r4
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	f7ff ff0f 	bl	8006b1c <__multiply>
 8006cfe:	6020      	str	r0, [r4, #0]
 8006d00:	f8c0 9000 	str.w	r9, [r0]
 8006d04:	4604      	mov	r4, r0
 8006d06:	e7e4      	b.n	8006cd2 <__pow5mult+0x6a>
 8006d08:	4638      	mov	r0, r7
 8006d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d0e:	bf00      	nop
 8006d10:	080083f8 	.word	0x080083f8
 8006d14:	080081c1 	.word	0x080081c1
 8006d18:	080082a8 	.word	0x080082a8

08006d1c <__lshift>:
 8006d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d20:	460c      	mov	r4, r1
 8006d22:	6849      	ldr	r1, [r1, #4]
 8006d24:	6923      	ldr	r3, [r4, #16]
 8006d26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d2a:	68a3      	ldr	r3, [r4, #8]
 8006d2c:	4607      	mov	r7, r0
 8006d2e:	4691      	mov	r9, r2
 8006d30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d34:	f108 0601 	add.w	r6, r8, #1
 8006d38:	42b3      	cmp	r3, r6
 8006d3a:	db0b      	blt.n	8006d54 <__lshift+0x38>
 8006d3c:	4638      	mov	r0, r7
 8006d3e:	f7ff fddb 	bl	80068f8 <_Balloc>
 8006d42:	4605      	mov	r5, r0
 8006d44:	b948      	cbnz	r0, 8006d5a <__lshift+0x3e>
 8006d46:	4602      	mov	r2, r0
 8006d48:	4b28      	ldr	r3, [pc, #160]	; (8006dec <__lshift+0xd0>)
 8006d4a:	4829      	ldr	r0, [pc, #164]	; (8006df0 <__lshift+0xd4>)
 8006d4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006d50:	f000 fd26 	bl	80077a0 <__assert_func>
 8006d54:	3101      	adds	r1, #1
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	e7ee      	b.n	8006d38 <__lshift+0x1c>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f100 0114 	add.w	r1, r0, #20
 8006d60:	f100 0210 	add.w	r2, r0, #16
 8006d64:	4618      	mov	r0, r3
 8006d66:	4553      	cmp	r3, sl
 8006d68:	db33      	blt.n	8006dd2 <__lshift+0xb6>
 8006d6a:	6920      	ldr	r0, [r4, #16]
 8006d6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d70:	f104 0314 	add.w	r3, r4, #20
 8006d74:	f019 091f 	ands.w	r9, r9, #31
 8006d78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d80:	d02b      	beq.n	8006dda <__lshift+0xbe>
 8006d82:	f1c9 0e20 	rsb	lr, r9, #32
 8006d86:	468a      	mov	sl, r1
 8006d88:	2200      	movs	r2, #0
 8006d8a:	6818      	ldr	r0, [r3, #0]
 8006d8c:	fa00 f009 	lsl.w	r0, r0, r9
 8006d90:	4302      	orrs	r2, r0
 8006d92:	f84a 2b04 	str.w	r2, [sl], #4
 8006d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d9a:	459c      	cmp	ip, r3
 8006d9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006da0:	d8f3      	bhi.n	8006d8a <__lshift+0x6e>
 8006da2:	ebac 0304 	sub.w	r3, ip, r4
 8006da6:	3b15      	subs	r3, #21
 8006da8:	f023 0303 	bic.w	r3, r3, #3
 8006dac:	3304      	adds	r3, #4
 8006dae:	f104 0015 	add.w	r0, r4, #21
 8006db2:	4584      	cmp	ip, r0
 8006db4:	bf38      	it	cc
 8006db6:	2304      	movcc	r3, #4
 8006db8:	50ca      	str	r2, [r1, r3]
 8006dba:	b10a      	cbz	r2, 8006dc0 <__lshift+0xa4>
 8006dbc:	f108 0602 	add.w	r6, r8, #2
 8006dc0:	3e01      	subs	r6, #1
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	612e      	str	r6, [r5, #16]
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	f7ff fdd6 	bl	8006978 <_Bfree>
 8006dcc:	4628      	mov	r0, r5
 8006dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	e7c5      	b.n	8006d66 <__lshift+0x4a>
 8006dda:	3904      	subs	r1, #4
 8006ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006de0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006de4:	459c      	cmp	ip, r3
 8006de6:	d8f9      	bhi.n	8006ddc <__lshift+0xc0>
 8006de8:	e7ea      	b.n	8006dc0 <__lshift+0xa4>
 8006dea:	bf00      	nop
 8006dec:	08008237 	.word	0x08008237
 8006df0:	080082a8 	.word	0x080082a8

08006df4 <__mcmp>:
 8006df4:	b530      	push	{r4, r5, lr}
 8006df6:	6902      	ldr	r2, [r0, #16]
 8006df8:	690c      	ldr	r4, [r1, #16]
 8006dfa:	1b12      	subs	r2, r2, r4
 8006dfc:	d10e      	bne.n	8006e1c <__mcmp+0x28>
 8006dfe:	f100 0314 	add.w	r3, r0, #20
 8006e02:	3114      	adds	r1, #20
 8006e04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e14:	42a5      	cmp	r5, r4
 8006e16:	d003      	beq.n	8006e20 <__mcmp+0x2c>
 8006e18:	d305      	bcc.n	8006e26 <__mcmp+0x32>
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	bd30      	pop	{r4, r5, pc}
 8006e20:	4283      	cmp	r3, r0
 8006e22:	d3f3      	bcc.n	8006e0c <__mcmp+0x18>
 8006e24:	e7fa      	b.n	8006e1c <__mcmp+0x28>
 8006e26:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2a:	e7f7      	b.n	8006e1c <__mcmp+0x28>

08006e2c <__mdiff>:
 8006e2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e30:	460c      	mov	r4, r1
 8006e32:	4606      	mov	r6, r0
 8006e34:	4611      	mov	r1, r2
 8006e36:	4620      	mov	r0, r4
 8006e38:	4617      	mov	r7, r2
 8006e3a:	f7ff ffdb 	bl	8006df4 <__mcmp>
 8006e3e:	1e05      	subs	r5, r0, #0
 8006e40:	d110      	bne.n	8006e64 <__mdiff+0x38>
 8006e42:	4629      	mov	r1, r5
 8006e44:	4630      	mov	r0, r6
 8006e46:	f7ff fd57 	bl	80068f8 <_Balloc>
 8006e4a:	b930      	cbnz	r0, 8006e5a <__mdiff+0x2e>
 8006e4c:	4b39      	ldr	r3, [pc, #228]	; (8006f34 <__mdiff+0x108>)
 8006e4e:	4602      	mov	r2, r0
 8006e50:	f240 2132 	movw	r1, #562	; 0x232
 8006e54:	4838      	ldr	r0, [pc, #224]	; (8006f38 <__mdiff+0x10c>)
 8006e56:	f000 fca3 	bl	80077a0 <__assert_func>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e64:	bfa4      	itt	ge
 8006e66:	463b      	movge	r3, r7
 8006e68:	4627      	movge	r7, r4
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	6879      	ldr	r1, [r7, #4]
 8006e6e:	bfa6      	itte	ge
 8006e70:	461c      	movge	r4, r3
 8006e72:	2500      	movge	r5, #0
 8006e74:	2501      	movlt	r5, #1
 8006e76:	f7ff fd3f 	bl	80068f8 <_Balloc>
 8006e7a:	b920      	cbnz	r0, 8006e86 <__mdiff+0x5a>
 8006e7c:	4b2d      	ldr	r3, [pc, #180]	; (8006f34 <__mdiff+0x108>)
 8006e7e:	4602      	mov	r2, r0
 8006e80:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e84:	e7e6      	b.n	8006e54 <__mdiff+0x28>
 8006e86:	693e      	ldr	r6, [r7, #16]
 8006e88:	60c5      	str	r5, [r0, #12]
 8006e8a:	6925      	ldr	r5, [r4, #16]
 8006e8c:	f107 0114 	add.w	r1, r7, #20
 8006e90:	f104 0914 	add.w	r9, r4, #20
 8006e94:	f100 0e14 	add.w	lr, r0, #20
 8006e98:	f107 0210 	add.w	r2, r7, #16
 8006e9c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006ea0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006ea4:	46f2      	mov	sl, lr
 8006ea6:	2700      	movs	r7, #0
 8006ea8:	f859 3b04 	ldr.w	r3, [r9], #4
 8006eac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006eb0:	fa1f f883 	uxth.w	r8, r3
 8006eb4:	fa17 f78b 	uxtah	r7, r7, fp
 8006eb8:	0c1b      	lsrs	r3, r3, #16
 8006eba:	eba7 0808 	sub.w	r8, r7, r8
 8006ebe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ec2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ec6:	fa1f f888 	uxth.w	r8, r8
 8006eca:	141f      	asrs	r7, r3, #16
 8006ecc:	454d      	cmp	r5, r9
 8006ece:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ed2:	f84a 3b04 	str.w	r3, [sl], #4
 8006ed6:	d8e7      	bhi.n	8006ea8 <__mdiff+0x7c>
 8006ed8:	1b2b      	subs	r3, r5, r4
 8006eda:	3b15      	subs	r3, #21
 8006edc:	f023 0303 	bic.w	r3, r3, #3
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	3415      	adds	r4, #21
 8006ee4:	42a5      	cmp	r5, r4
 8006ee6:	bf38      	it	cc
 8006ee8:	2304      	movcc	r3, #4
 8006eea:	4419      	add	r1, r3
 8006eec:	4473      	add	r3, lr
 8006eee:	469e      	mov	lr, r3
 8006ef0:	460d      	mov	r5, r1
 8006ef2:	4565      	cmp	r5, ip
 8006ef4:	d30e      	bcc.n	8006f14 <__mdiff+0xe8>
 8006ef6:	f10c 0203 	add.w	r2, ip, #3
 8006efa:	1a52      	subs	r2, r2, r1
 8006efc:	f022 0203 	bic.w	r2, r2, #3
 8006f00:	3903      	subs	r1, #3
 8006f02:	458c      	cmp	ip, r1
 8006f04:	bf38      	it	cc
 8006f06:	2200      	movcc	r2, #0
 8006f08:	441a      	add	r2, r3
 8006f0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006f0e:	b17b      	cbz	r3, 8006f30 <__mdiff+0x104>
 8006f10:	6106      	str	r6, [r0, #16]
 8006f12:	e7a5      	b.n	8006e60 <__mdiff+0x34>
 8006f14:	f855 8b04 	ldr.w	r8, [r5], #4
 8006f18:	fa17 f488 	uxtah	r4, r7, r8
 8006f1c:	1422      	asrs	r2, r4, #16
 8006f1e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006f22:	b2a4      	uxth	r4, r4
 8006f24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006f28:	f84e 4b04 	str.w	r4, [lr], #4
 8006f2c:	1417      	asrs	r7, r2, #16
 8006f2e:	e7e0      	b.n	8006ef2 <__mdiff+0xc6>
 8006f30:	3e01      	subs	r6, #1
 8006f32:	e7ea      	b.n	8006f0a <__mdiff+0xde>
 8006f34:	08008237 	.word	0x08008237
 8006f38:	080082a8 	.word	0x080082a8

08006f3c <__d2b>:
 8006f3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f40:	4689      	mov	r9, r1
 8006f42:	2101      	movs	r1, #1
 8006f44:	ec57 6b10 	vmov	r6, r7, d0
 8006f48:	4690      	mov	r8, r2
 8006f4a:	f7ff fcd5 	bl	80068f8 <_Balloc>
 8006f4e:	4604      	mov	r4, r0
 8006f50:	b930      	cbnz	r0, 8006f60 <__d2b+0x24>
 8006f52:	4602      	mov	r2, r0
 8006f54:	4b25      	ldr	r3, [pc, #148]	; (8006fec <__d2b+0xb0>)
 8006f56:	4826      	ldr	r0, [pc, #152]	; (8006ff0 <__d2b+0xb4>)
 8006f58:	f240 310a 	movw	r1, #778	; 0x30a
 8006f5c:	f000 fc20 	bl	80077a0 <__assert_func>
 8006f60:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006f64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f68:	bb35      	cbnz	r5, 8006fb8 <__d2b+0x7c>
 8006f6a:	2e00      	cmp	r6, #0
 8006f6c:	9301      	str	r3, [sp, #4]
 8006f6e:	d028      	beq.n	8006fc2 <__d2b+0x86>
 8006f70:	4668      	mov	r0, sp
 8006f72:	9600      	str	r6, [sp, #0]
 8006f74:	f7ff fd8c 	bl	8006a90 <__lo0bits>
 8006f78:	9900      	ldr	r1, [sp, #0]
 8006f7a:	b300      	cbz	r0, 8006fbe <__d2b+0x82>
 8006f7c:	9a01      	ldr	r2, [sp, #4]
 8006f7e:	f1c0 0320 	rsb	r3, r0, #32
 8006f82:	fa02 f303 	lsl.w	r3, r2, r3
 8006f86:	430b      	orrs	r3, r1
 8006f88:	40c2      	lsrs	r2, r0
 8006f8a:	6163      	str	r3, [r4, #20]
 8006f8c:	9201      	str	r2, [sp, #4]
 8006f8e:	9b01      	ldr	r3, [sp, #4]
 8006f90:	61a3      	str	r3, [r4, #24]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	bf14      	ite	ne
 8006f96:	2202      	movne	r2, #2
 8006f98:	2201      	moveq	r2, #1
 8006f9a:	6122      	str	r2, [r4, #16]
 8006f9c:	b1d5      	cbz	r5, 8006fd4 <__d2b+0x98>
 8006f9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006fa2:	4405      	add	r5, r0
 8006fa4:	f8c9 5000 	str.w	r5, [r9]
 8006fa8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fac:	f8c8 0000 	str.w	r0, [r8]
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	b003      	add	sp, #12
 8006fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fbc:	e7d5      	b.n	8006f6a <__d2b+0x2e>
 8006fbe:	6161      	str	r1, [r4, #20]
 8006fc0:	e7e5      	b.n	8006f8e <__d2b+0x52>
 8006fc2:	a801      	add	r0, sp, #4
 8006fc4:	f7ff fd64 	bl	8006a90 <__lo0bits>
 8006fc8:	9b01      	ldr	r3, [sp, #4]
 8006fca:	6163      	str	r3, [r4, #20]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	6122      	str	r2, [r4, #16]
 8006fd0:	3020      	adds	r0, #32
 8006fd2:	e7e3      	b.n	8006f9c <__d2b+0x60>
 8006fd4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006fd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006fdc:	f8c9 0000 	str.w	r0, [r9]
 8006fe0:	6918      	ldr	r0, [r3, #16]
 8006fe2:	f7ff fd35 	bl	8006a50 <__hi0bits>
 8006fe6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006fea:	e7df      	b.n	8006fac <__d2b+0x70>
 8006fec:	08008237 	.word	0x08008237
 8006ff0:	080082a8 	.word	0x080082a8

08006ff4 <_calloc_r>:
 8006ff4:	b513      	push	{r0, r1, r4, lr}
 8006ff6:	434a      	muls	r2, r1
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	9201      	str	r2, [sp, #4]
 8006ffc:	f000 f85a 	bl	80070b4 <_malloc_r>
 8007000:	4604      	mov	r4, r0
 8007002:	b118      	cbz	r0, 800700c <_calloc_r+0x18>
 8007004:	9a01      	ldr	r2, [sp, #4]
 8007006:	2100      	movs	r1, #0
 8007008:	f7fd fe74 	bl	8004cf4 <memset>
 800700c:	4620      	mov	r0, r4
 800700e:	b002      	add	sp, #8
 8007010:	bd10      	pop	{r4, pc}
	...

08007014 <_free_r>:
 8007014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007016:	2900      	cmp	r1, #0
 8007018:	d048      	beq.n	80070ac <_free_r+0x98>
 800701a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800701e:	9001      	str	r0, [sp, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f1a1 0404 	sub.w	r4, r1, #4
 8007026:	bfb8      	it	lt
 8007028:	18e4      	addlt	r4, r4, r3
 800702a:	f000 fc59 	bl	80078e0 <__malloc_lock>
 800702e:	4a20      	ldr	r2, [pc, #128]	; (80070b0 <_free_r+0x9c>)
 8007030:	9801      	ldr	r0, [sp, #4]
 8007032:	6813      	ldr	r3, [r2, #0]
 8007034:	4615      	mov	r5, r2
 8007036:	b933      	cbnz	r3, 8007046 <_free_r+0x32>
 8007038:	6063      	str	r3, [r4, #4]
 800703a:	6014      	str	r4, [r2, #0]
 800703c:	b003      	add	sp, #12
 800703e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007042:	f000 bc53 	b.w	80078ec <__malloc_unlock>
 8007046:	42a3      	cmp	r3, r4
 8007048:	d90b      	bls.n	8007062 <_free_r+0x4e>
 800704a:	6821      	ldr	r1, [r4, #0]
 800704c:	1862      	adds	r2, r4, r1
 800704e:	4293      	cmp	r3, r2
 8007050:	bf04      	itt	eq
 8007052:	681a      	ldreq	r2, [r3, #0]
 8007054:	685b      	ldreq	r3, [r3, #4]
 8007056:	6063      	str	r3, [r4, #4]
 8007058:	bf04      	itt	eq
 800705a:	1852      	addeq	r2, r2, r1
 800705c:	6022      	streq	r2, [r4, #0]
 800705e:	602c      	str	r4, [r5, #0]
 8007060:	e7ec      	b.n	800703c <_free_r+0x28>
 8007062:	461a      	mov	r2, r3
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	b10b      	cbz	r3, 800706c <_free_r+0x58>
 8007068:	42a3      	cmp	r3, r4
 800706a:	d9fa      	bls.n	8007062 <_free_r+0x4e>
 800706c:	6811      	ldr	r1, [r2, #0]
 800706e:	1855      	adds	r5, r2, r1
 8007070:	42a5      	cmp	r5, r4
 8007072:	d10b      	bne.n	800708c <_free_r+0x78>
 8007074:	6824      	ldr	r4, [r4, #0]
 8007076:	4421      	add	r1, r4
 8007078:	1854      	adds	r4, r2, r1
 800707a:	42a3      	cmp	r3, r4
 800707c:	6011      	str	r1, [r2, #0]
 800707e:	d1dd      	bne.n	800703c <_free_r+0x28>
 8007080:	681c      	ldr	r4, [r3, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	6053      	str	r3, [r2, #4]
 8007086:	4421      	add	r1, r4
 8007088:	6011      	str	r1, [r2, #0]
 800708a:	e7d7      	b.n	800703c <_free_r+0x28>
 800708c:	d902      	bls.n	8007094 <_free_r+0x80>
 800708e:	230c      	movs	r3, #12
 8007090:	6003      	str	r3, [r0, #0]
 8007092:	e7d3      	b.n	800703c <_free_r+0x28>
 8007094:	6825      	ldr	r5, [r4, #0]
 8007096:	1961      	adds	r1, r4, r5
 8007098:	428b      	cmp	r3, r1
 800709a:	bf04      	itt	eq
 800709c:	6819      	ldreq	r1, [r3, #0]
 800709e:	685b      	ldreq	r3, [r3, #4]
 80070a0:	6063      	str	r3, [r4, #4]
 80070a2:	bf04      	itt	eq
 80070a4:	1949      	addeq	r1, r1, r5
 80070a6:	6021      	streq	r1, [r4, #0]
 80070a8:	6054      	str	r4, [r2, #4]
 80070aa:	e7c7      	b.n	800703c <_free_r+0x28>
 80070ac:	b003      	add	sp, #12
 80070ae:	bd30      	pop	{r4, r5, pc}
 80070b0:	20000204 	.word	0x20000204

080070b4 <_malloc_r>:
 80070b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b6:	1ccd      	adds	r5, r1, #3
 80070b8:	f025 0503 	bic.w	r5, r5, #3
 80070bc:	3508      	adds	r5, #8
 80070be:	2d0c      	cmp	r5, #12
 80070c0:	bf38      	it	cc
 80070c2:	250c      	movcc	r5, #12
 80070c4:	2d00      	cmp	r5, #0
 80070c6:	4606      	mov	r6, r0
 80070c8:	db01      	blt.n	80070ce <_malloc_r+0x1a>
 80070ca:	42a9      	cmp	r1, r5
 80070cc:	d903      	bls.n	80070d6 <_malloc_r+0x22>
 80070ce:	230c      	movs	r3, #12
 80070d0:	6033      	str	r3, [r6, #0]
 80070d2:	2000      	movs	r0, #0
 80070d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d6:	f000 fc03 	bl	80078e0 <__malloc_lock>
 80070da:	4921      	ldr	r1, [pc, #132]	; (8007160 <_malloc_r+0xac>)
 80070dc:	680a      	ldr	r2, [r1, #0]
 80070de:	4614      	mov	r4, r2
 80070e0:	b99c      	cbnz	r4, 800710a <_malloc_r+0x56>
 80070e2:	4f20      	ldr	r7, [pc, #128]	; (8007164 <_malloc_r+0xb0>)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	b923      	cbnz	r3, 80070f2 <_malloc_r+0x3e>
 80070e8:	4621      	mov	r1, r4
 80070ea:	4630      	mov	r0, r6
 80070ec:	f000 faf2 	bl	80076d4 <_sbrk_r>
 80070f0:	6038      	str	r0, [r7, #0]
 80070f2:	4629      	mov	r1, r5
 80070f4:	4630      	mov	r0, r6
 80070f6:	f000 faed 	bl	80076d4 <_sbrk_r>
 80070fa:	1c43      	adds	r3, r0, #1
 80070fc:	d123      	bne.n	8007146 <_malloc_r+0x92>
 80070fe:	230c      	movs	r3, #12
 8007100:	6033      	str	r3, [r6, #0]
 8007102:	4630      	mov	r0, r6
 8007104:	f000 fbf2 	bl	80078ec <__malloc_unlock>
 8007108:	e7e3      	b.n	80070d2 <_malloc_r+0x1e>
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	1b5b      	subs	r3, r3, r5
 800710e:	d417      	bmi.n	8007140 <_malloc_r+0x8c>
 8007110:	2b0b      	cmp	r3, #11
 8007112:	d903      	bls.n	800711c <_malloc_r+0x68>
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	441c      	add	r4, r3
 8007118:	6025      	str	r5, [r4, #0]
 800711a:	e004      	b.n	8007126 <_malloc_r+0x72>
 800711c:	6863      	ldr	r3, [r4, #4]
 800711e:	42a2      	cmp	r2, r4
 8007120:	bf0c      	ite	eq
 8007122:	600b      	streq	r3, [r1, #0]
 8007124:	6053      	strne	r3, [r2, #4]
 8007126:	4630      	mov	r0, r6
 8007128:	f000 fbe0 	bl	80078ec <__malloc_unlock>
 800712c:	f104 000b 	add.w	r0, r4, #11
 8007130:	1d23      	adds	r3, r4, #4
 8007132:	f020 0007 	bic.w	r0, r0, #7
 8007136:	1ac2      	subs	r2, r0, r3
 8007138:	d0cc      	beq.n	80070d4 <_malloc_r+0x20>
 800713a:	1a1b      	subs	r3, r3, r0
 800713c:	50a3      	str	r3, [r4, r2]
 800713e:	e7c9      	b.n	80070d4 <_malloc_r+0x20>
 8007140:	4622      	mov	r2, r4
 8007142:	6864      	ldr	r4, [r4, #4]
 8007144:	e7cc      	b.n	80070e0 <_malloc_r+0x2c>
 8007146:	1cc4      	adds	r4, r0, #3
 8007148:	f024 0403 	bic.w	r4, r4, #3
 800714c:	42a0      	cmp	r0, r4
 800714e:	d0e3      	beq.n	8007118 <_malloc_r+0x64>
 8007150:	1a21      	subs	r1, r4, r0
 8007152:	4630      	mov	r0, r6
 8007154:	f000 fabe 	bl	80076d4 <_sbrk_r>
 8007158:	3001      	adds	r0, #1
 800715a:	d1dd      	bne.n	8007118 <_malloc_r+0x64>
 800715c:	e7cf      	b.n	80070fe <_malloc_r+0x4a>
 800715e:	bf00      	nop
 8007160:	20000204 	.word	0x20000204
 8007164:	20000208 	.word	0x20000208

08007168 <__ssputs_r>:
 8007168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800716c:	688e      	ldr	r6, [r1, #8]
 800716e:	429e      	cmp	r6, r3
 8007170:	4682      	mov	sl, r0
 8007172:	460c      	mov	r4, r1
 8007174:	4690      	mov	r8, r2
 8007176:	461f      	mov	r7, r3
 8007178:	d838      	bhi.n	80071ec <__ssputs_r+0x84>
 800717a:	898a      	ldrh	r2, [r1, #12]
 800717c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007180:	d032      	beq.n	80071e8 <__ssputs_r+0x80>
 8007182:	6825      	ldr	r5, [r4, #0]
 8007184:	6909      	ldr	r1, [r1, #16]
 8007186:	eba5 0901 	sub.w	r9, r5, r1
 800718a:	6965      	ldr	r5, [r4, #20]
 800718c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007190:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007194:	3301      	adds	r3, #1
 8007196:	444b      	add	r3, r9
 8007198:	106d      	asrs	r5, r5, #1
 800719a:	429d      	cmp	r5, r3
 800719c:	bf38      	it	cc
 800719e:	461d      	movcc	r5, r3
 80071a0:	0553      	lsls	r3, r2, #21
 80071a2:	d531      	bpl.n	8007208 <__ssputs_r+0xa0>
 80071a4:	4629      	mov	r1, r5
 80071a6:	f7ff ff85 	bl	80070b4 <_malloc_r>
 80071aa:	4606      	mov	r6, r0
 80071ac:	b950      	cbnz	r0, 80071c4 <__ssputs_r+0x5c>
 80071ae:	230c      	movs	r3, #12
 80071b0:	f8ca 3000 	str.w	r3, [sl]
 80071b4:	89a3      	ldrh	r3, [r4, #12]
 80071b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ba:	81a3      	strh	r3, [r4, #12]
 80071bc:	f04f 30ff 	mov.w	r0, #4294967295
 80071c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c4:	6921      	ldr	r1, [r4, #16]
 80071c6:	464a      	mov	r2, r9
 80071c8:	f7ff fb88 	bl	80068dc <memcpy>
 80071cc:	89a3      	ldrh	r3, [r4, #12]
 80071ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d6:	81a3      	strh	r3, [r4, #12]
 80071d8:	6126      	str	r6, [r4, #16]
 80071da:	6165      	str	r5, [r4, #20]
 80071dc:	444e      	add	r6, r9
 80071de:	eba5 0509 	sub.w	r5, r5, r9
 80071e2:	6026      	str	r6, [r4, #0]
 80071e4:	60a5      	str	r5, [r4, #8]
 80071e6:	463e      	mov	r6, r7
 80071e8:	42be      	cmp	r6, r7
 80071ea:	d900      	bls.n	80071ee <__ssputs_r+0x86>
 80071ec:	463e      	mov	r6, r7
 80071ee:	4632      	mov	r2, r6
 80071f0:	6820      	ldr	r0, [r4, #0]
 80071f2:	4641      	mov	r1, r8
 80071f4:	f000 fb5a 	bl	80078ac <memmove>
 80071f8:	68a3      	ldr	r3, [r4, #8]
 80071fa:	6822      	ldr	r2, [r4, #0]
 80071fc:	1b9b      	subs	r3, r3, r6
 80071fe:	4432      	add	r2, r6
 8007200:	60a3      	str	r3, [r4, #8]
 8007202:	6022      	str	r2, [r4, #0]
 8007204:	2000      	movs	r0, #0
 8007206:	e7db      	b.n	80071c0 <__ssputs_r+0x58>
 8007208:	462a      	mov	r2, r5
 800720a:	f000 fb75 	bl	80078f8 <_realloc_r>
 800720e:	4606      	mov	r6, r0
 8007210:	2800      	cmp	r0, #0
 8007212:	d1e1      	bne.n	80071d8 <__ssputs_r+0x70>
 8007214:	6921      	ldr	r1, [r4, #16]
 8007216:	4650      	mov	r0, sl
 8007218:	f7ff fefc 	bl	8007014 <_free_r>
 800721c:	e7c7      	b.n	80071ae <__ssputs_r+0x46>
	...

08007220 <_svfiprintf_r>:
 8007220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	4698      	mov	r8, r3
 8007226:	898b      	ldrh	r3, [r1, #12]
 8007228:	061b      	lsls	r3, r3, #24
 800722a:	b09d      	sub	sp, #116	; 0x74
 800722c:	4607      	mov	r7, r0
 800722e:	460d      	mov	r5, r1
 8007230:	4614      	mov	r4, r2
 8007232:	d50e      	bpl.n	8007252 <_svfiprintf_r+0x32>
 8007234:	690b      	ldr	r3, [r1, #16]
 8007236:	b963      	cbnz	r3, 8007252 <_svfiprintf_r+0x32>
 8007238:	2140      	movs	r1, #64	; 0x40
 800723a:	f7ff ff3b 	bl	80070b4 <_malloc_r>
 800723e:	6028      	str	r0, [r5, #0]
 8007240:	6128      	str	r0, [r5, #16]
 8007242:	b920      	cbnz	r0, 800724e <_svfiprintf_r+0x2e>
 8007244:	230c      	movs	r3, #12
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	f04f 30ff 	mov.w	r0, #4294967295
 800724c:	e0d1      	b.n	80073f2 <_svfiprintf_r+0x1d2>
 800724e:	2340      	movs	r3, #64	; 0x40
 8007250:	616b      	str	r3, [r5, #20]
 8007252:	2300      	movs	r3, #0
 8007254:	9309      	str	r3, [sp, #36]	; 0x24
 8007256:	2320      	movs	r3, #32
 8007258:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800725c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007260:	2330      	movs	r3, #48	; 0x30
 8007262:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800740c <_svfiprintf_r+0x1ec>
 8007266:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800726a:	f04f 0901 	mov.w	r9, #1
 800726e:	4623      	mov	r3, r4
 8007270:	469a      	mov	sl, r3
 8007272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007276:	b10a      	cbz	r2, 800727c <_svfiprintf_r+0x5c>
 8007278:	2a25      	cmp	r2, #37	; 0x25
 800727a:	d1f9      	bne.n	8007270 <_svfiprintf_r+0x50>
 800727c:	ebba 0b04 	subs.w	fp, sl, r4
 8007280:	d00b      	beq.n	800729a <_svfiprintf_r+0x7a>
 8007282:	465b      	mov	r3, fp
 8007284:	4622      	mov	r2, r4
 8007286:	4629      	mov	r1, r5
 8007288:	4638      	mov	r0, r7
 800728a:	f7ff ff6d 	bl	8007168 <__ssputs_r>
 800728e:	3001      	adds	r0, #1
 8007290:	f000 80aa 	beq.w	80073e8 <_svfiprintf_r+0x1c8>
 8007294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007296:	445a      	add	r2, fp
 8007298:	9209      	str	r2, [sp, #36]	; 0x24
 800729a:	f89a 3000 	ldrb.w	r3, [sl]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 80a2 	beq.w	80073e8 <_svfiprintf_r+0x1c8>
 80072a4:	2300      	movs	r3, #0
 80072a6:	f04f 32ff 	mov.w	r2, #4294967295
 80072aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072ae:	f10a 0a01 	add.w	sl, sl, #1
 80072b2:	9304      	str	r3, [sp, #16]
 80072b4:	9307      	str	r3, [sp, #28]
 80072b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072ba:	931a      	str	r3, [sp, #104]	; 0x68
 80072bc:	4654      	mov	r4, sl
 80072be:	2205      	movs	r2, #5
 80072c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072c4:	4851      	ldr	r0, [pc, #324]	; (800740c <_svfiprintf_r+0x1ec>)
 80072c6:	f7f8 ffc3 	bl	8000250 <memchr>
 80072ca:	9a04      	ldr	r2, [sp, #16]
 80072cc:	b9d8      	cbnz	r0, 8007306 <_svfiprintf_r+0xe6>
 80072ce:	06d0      	lsls	r0, r2, #27
 80072d0:	bf44      	itt	mi
 80072d2:	2320      	movmi	r3, #32
 80072d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072d8:	0711      	lsls	r1, r2, #28
 80072da:	bf44      	itt	mi
 80072dc:	232b      	movmi	r3, #43	; 0x2b
 80072de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072e2:	f89a 3000 	ldrb.w	r3, [sl]
 80072e6:	2b2a      	cmp	r3, #42	; 0x2a
 80072e8:	d015      	beq.n	8007316 <_svfiprintf_r+0xf6>
 80072ea:	9a07      	ldr	r2, [sp, #28]
 80072ec:	4654      	mov	r4, sl
 80072ee:	2000      	movs	r0, #0
 80072f0:	f04f 0c0a 	mov.w	ip, #10
 80072f4:	4621      	mov	r1, r4
 80072f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072fa:	3b30      	subs	r3, #48	; 0x30
 80072fc:	2b09      	cmp	r3, #9
 80072fe:	d94e      	bls.n	800739e <_svfiprintf_r+0x17e>
 8007300:	b1b0      	cbz	r0, 8007330 <_svfiprintf_r+0x110>
 8007302:	9207      	str	r2, [sp, #28]
 8007304:	e014      	b.n	8007330 <_svfiprintf_r+0x110>
 8007306:	eba0 0308 	sub.w	r3, r0, r8
 800730a:	fa09 f303 	lsl.w	r3, r9, r3
 800730e:	4313      	orrs	r3, r2
 8007310:	9304      	str	r3, [sp, #16]
 8007312:	46a2      	mov	sl, r4
 8007314:	e7d2      	b.n	80072bc <_svfiprintf_r+0x9c>
 8007316:	9b03      	ldr	r3, [sp, #12]
 8007318:	1d19      	adds	r1, r3, #4
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	9103      	str	r1, [sp, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	bfbb      	ittet	lt
 8007322:	425b      	neglt	r3, r3
 8007324:	f042 0202 	orrlt.w	r2, r2, #2
 8007328:	9307      	strge	r3, [sp, #28]
 800732a:	9307      	strlt	r3, [sp, #28]
 800732c:	bfb8      	it	lt
 800732e:	9204      	strlt	r2, [sp, #16]
 8007330:	7823      	ldrb	r3, [r4, #0]
 8007332:	2b2e      	cmp	r3, #46	; 0x2e
 8007334:	d10c      	bne.n	8007350 <_svfiprintf_r+0x130>
 8007336:	7863      	ldrb	r3, [r4, #1]
 8007338:	2b2a      	cmp	r3, #42	; 0x2a
 800733a:	d135      	bne.n	80073a8 <_svfiprintf_r+0x188>
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	1d1a      	adds	r2, r3, #4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	9203      	str	r2, [sp, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	bfb8      	it	lt
 8007348:	f04f 33ff 	movlt.w	r3, #4294967295
 800734c:	3402      	adds	r4, #2
 800734e:	9305      	str	r3, [sp, #20]
 8007350:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800741c <_svfiprintf_r+0x1fc>
 8007354:	7821      	ldrb	r1, [r4, #0]
 8007356:	2203      	movs	r2, #3
 8007358:	4650      	mov	r0, sl
 800735a:	f7f8 ff79 	bl	8000250 <memchr>
 800735e:	b140      	cbz	r0, 8007372 <_svfiprintf_r+0x152>
 8007360:	2340      	movs	r3, #64	; 0x40
 8007362:	eba0 000a 	sub.w	r0, r0, sl
 8007366:	fa03 f000 	lsl.w	r0, r3, r0
 800736a:	9b04      	ldr	r3, [sp, #16]
 800736c:	4303      	orrs	r3, r0
 800736e:	3401      	adds	r4, #1
 8007370:	9304      	str	r3, [sp, #16]
 8007372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007376:	4826      	ldr	r0, [pc, #152]	; (8007410 <_svfiprintf_r+0x1f0>)
 8007378:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800737c:	2206      	movs	r2, #6
 800737e:	f7f8 ff67 	bl	8000250 <memchr>
 8007382:	2800      	cmp	r0, #0
 8007384:	d038      	beq.n	80073f8 <_svfiprintf_r+0x1d8>
 8007386:	4b23      	ldr	r3, [pc, #140]	; (8007414 <_svfiprintf_r+0x1f4>)
 8007388:	bb1b      	cbnz	r3, 80073d2 <_svfiprintf_r+0x1b2>
 800738a:	9b03      	ldr	r3, [sp, #12]
 800738c:	3307      	adds	r3, #7
 800738e:	f023 0307 	bic.w	r3, r3, #7
 8007392:	3308      	adds	r3, #8
 8007394:	9303      	str	r3, [sp, #12]
 8007396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007398:	4433      	add	r3, r6
 800739a:	9309      	str	r3, [sp, #36]	; 0x24
 800739c:	e767      	b.n	800726e <_svfiprintf_r+0x4e>
 800739e:	fb0c 3202 	mla	r2, ip, r2, r3
 80073a2:	460c      	mov	r4, r1
 80073a4:	2001      	movs	r0, #1
 80073a6:	e7a5      	b.n	80072f4 <_svfiprintf_r+0xd4>
 80073a8:	2300      	movs	r3, #0
 80073aa:	3401      	adds	r4, #1
 80073ac:	9305      	str	r3, [sp, #20]
 80073ae:	4619      	mov	r1, r3
 80073b0:	f04f 0c0a 	mov.w	ip, #10
 80073b4:	4620      	mov	r0, r4
 80073b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073ba:	3a30      	subs	r2, #48	; 0x30
 80073bc:	2a09      	cmp	r2, #9
 80073be:	d903      	bls.n	80073c8 <_svfiprintf_r+0x1a8>
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d0c5      	beq.n	8007350 <_svfiprintf_r+0x130>
 80073c4:	9105      	str	r1, [sp, #20]
 80073c6:	e7c3      	b.n	8007350 <_svfiprintf_r+0x130>
 80073c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80073cc:	4604      	mov	r4, r0
 80073ce:	2301      	movs	r3, #1
 80073d0:	e7f0      	b.n	80073b4 <_svfiprintf_r+0x194>
 80073d2:	ab03      	add	r3, sp, #12
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	462a      	mov	r2, r5
 80073d8:	4b0f      	ldr	r3, [pc, #60]	; (8007418 <_svfiprintf_r+0x1f8>)
 80073da:	a904      	add	r1, sp, #16
 80073dc:	4638      	mov	r0, r7
 80073de:	f7fd fd23 	bl	8004e28 <_printf_float>
 80073e2:	1c42      	adds	r2, r0, #1
 80073e4:	4606      	mov	r6, r0
 80073e6:	d1d6      	bne.n	8007396 <_svfiprintf_r+0x176>
 80073e8:	89ab      	ldrh	r3, [r5, #12]
 80073ea:	065b      	lsls	r3, r3, #25
 80073ec:	f53f af2c 	bmi.w	8007248 <_svfiprintf_r+0x28>
 80073f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073f2:	b01d      	add	sp, #116	; 0x74
 80073f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f8:	ab03      	add	r3, sp, #12
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	462a      	mov	r2, r5
 80073fe:	4b06      	ldr	r3, [pc, #24]	; (8007418 <_svfiprintf_r+0x1f8>)
 8007400:	a904      	add	r1, sp, #16
 8007402:	4638      	mov	r0, r7
 8007404:	f7fd ff9c 	bl	8005340 <_printf_i>
 8007408:	e7eb      	b.n	80073e2 <_svfiprintf_r+0x1c2>
 800740a:	bf00      	nop
 800740c:	08008404 	.word	0x08008404
 8007410:	0800840e 	.word	0x0800840e
 8007414:	08004e29 	.word	0x08004e29
 8007418:	08007169 	.word	0x08007169
 800741c:	0800840a 	.word	0x0800840a

08007420 <__sfputc_r>:
 8007420:	6893      	ldr	r3, [r2, #8]
 8007422:	3b01      	subs	r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	b410      	push	{r4}
 8007428:	6093      	str	r3, [r2, #8]
 800742a:	da08      	bge.n	800743e <__sfputc_r+0x1e>
 800742c:	6994      	ldr	r4, [r2, #24]
 800742e:	42a3      	cmp	r3, r4
 8007430:	db01      	blt.n	8007436 <__sfputc_r+0x16>
 8007432:	290a      	cmp	r1, #10
 8007434:	d103      	bne.n	800743e <__sfputc_r+0x1e>
 8007436:	f85d 4b04 	ldr.w	r4, [sp], #4
 800743a:	f7fe b955 	b.w	80056e8 <__swbuf_r>
 800743e:	6813      	ldr	r3, [r2, #0]
 8007440:	1c58      	adds	r0, r3, #1
 8007442:	6010      	str	r0, [r2, #0]
 8007444:	7019      	strb	r1, [r3, #0]
 8007446:	4608      	mov	r0, r1
 8007448:	f85d 4b04 	ldr.w	r4, [sp], #4
 800744c:	4770      	bx	lr

0800744e <__sfputs_r>:
 800744e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007450:	4606      	mov	r6, r0
 8007452:	460f      	mov	r7, r1
 8007454:	4614      	mov	r4, r2
 8007456:	18d5      	adds	r5, r2, r3
 8007458:	42ac      	cmp	r4, r5
 800745a:	d101      	bne.n	8007460 <__sfputs_r+0x12>
 800745c:	2000      	movs	r0, #0
 800745e:	e007      	b.n	8007470 <__sfputs_r+0x22>
 8007460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007464:	463a      	mov	r2, r7
 8007466:	4630      	mov	r0, r6
 8007468:	f7ff ffda 	bl	8007420 <__sfputc_r>
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	d1f3      	bne.n	8007458 <__sfputs_r+0xa>
 8007470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007474 <_vfiprintf_r>:
 8007474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007478:	460d      	mov	r5, r1
 800747a:	b09d      	sub	sp, #116	; 0x74
 800747c:	4614      	mov	r4, r2
 800747e:	4698      	mov	r8, r3
 8007480:	4606      	mov	r6, r0
 8007482:	b118      	cbz	r0, 800748c <_vfiprintf_r+0x18>
 8007484:	6983      	ldr	r3, [r0, #24]
 8007486:	b90b      	cbnz	r3, 800748c <_vfiprintf_r+0x18>
 8007488:	f7ff f916 	bl	80066b8 <__sinit>
 800748c:	4b89      	ldr	r3, [pc, #548]	; (80076b4 <_vfiprintf_r+0x240>)
 800748e:	429d      	cmp	r5, r3
 8007490:	d11b      	bne.n	80074ca <_vfiprintf_r+0x56>
 8007492:	6875      	ldr	r5, [r6, #4]
 8007494:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007496:	07d9      	lsls	r1, r3, #31
 8007498:	d405      	bmi.n	80074a6 <_vfiprintf_r+0x32>
 800749a:	89ab      	ldrh	r3, [r5, #12]
 800749c:	059a      	lsls	r2, r3, #22
 800749e:	d402      	bmi.n	80074a6 <_vfiprintf_r+0x32>
 80074a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074a2:	f7ff f9ac 	bl	80067fe <__retarget_lock_acquire_recursive>
 80074a6:	89ab      	ldrh	r3, [r5, #12]
 80074a8:	071b      	lsls	r3, r3, #28
 80074aa:	d501      	bpl.n	80074b0 <_vfiprintf_r+0x3c>
 80074ac:	692b      	ldr	r3, [r5, #16]
 80074ae:	b9eb      	cbnz	r3, 80074ec <_vfiprintf_r+0x78>
 80074b0:	4629      	mov	r1, r5
 80074b2:	4630      	mov	r0, r6
 80074b4:	f7fe f96a 	bl	800578c <__swsetup_r>
 80074b8:	b1c0      	cbz	r0, 80074ec <_vfiprintf_r+0x78>
 80074ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074bc:	07dc      	lsls	r4, r3, #31
 80074be:	d50e      	bpl.n	80074de <_vfiprintf_r+0x6a>
 80074c0:	f04f 30ff 	mov.w	r0, #4294967295
 80074c4:	b01d      	add	sp, #116	; 0x74
 80074c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ca:	4b7b      	ldr	r3, [pc, #492]	; (80076b8 <_vfiprintf_r+0x244>)
 80074cc:	429d      	cmp	r5, r3
 80074ce:	d101      	bne.n	80074d4 <_vfiprintf_r+0x60>
 80074d0:	68b5      	ldr	r5, [r6, #8]
 80074d2:	e7df      	b.n	8007494 <_vfiprintf_r+0x20>
 80074d4:	4b79      	ldr	r3, [pc, #484]	; (80076bc <_vfiprintf_r+0x248>)
 80074d6:	429d      	cmp	r5, r3
 80074d8:	bf08      	it	eq
 80074da:	68f5      	ldreq	r5, [r6, #12]
 80074dc:	e7da      	b.n	8007494 <_vfiprintf_r+0x20>
 80074de:	89ab      	ldrh	r3, [r5, #12]
 80074e0:	0598      	lsls	r0, r3, #22
 80074e2:	d4ed      	bmi.n	80074c0 <_vfiprintf_r+0x4c>
 80074e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074e6:	f7ff f98b 	bl	8006800 <__retarget_lock_release_recursive>
 80074ea:	e7e9      	b.n	80074c0 <_vfiprintf_r+0x4c>
 80074ec:	2300      	movs	r3, #0
 80074ee:	9309      	str	r3, [sp, #36]	; 0x24
 80074f0:	2320      	movs	r3, #32
 80074f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80074fa:	2330      	movs	r3, #48	; 0x30
 80074fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80076c0 <_vfiprintf_r+0x24c>
 8007500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007504:	f04f 0901 	mov.w	r9, #1
 8007508:	4623      	mov	r3, r4
 800750a:	469a      	mov	sl, r3
 800750c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007510:	b10a      	cbz	r2, 8007516 <_vfiprintf_r+0xa2>
 8007512:	2a25      	cmp	r2, #37	; 0x25
 8007514:	d1f9      	bne.n	800750a <_vfiprintf_r+0x96>
 8007516:	ebba 0b04 	subs.w	fp, sl, r4
 800751a:	d00b      	beq.n	8007534 <_vfiprintf_r+0xc0>
 800751c:	465b      	mov	r3, fp
 800751e:	4622      	mov	r2, r4
 8007520:	4629      	mov	r1, r5
 8007522:	4630      	mov	r0, r6
 8007524:	f7ff ff93 	bl	800744e <__sfputs_r>
 8007528:	3001      	adds	r0, #1
 800752a:	f000 80aa 	beq.w	8007682 <_vfiprintf_r+0x20e>
 800752e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007530:	445a      	add	r2, fp
 8007532:	9209      	str	r2, [sp, #36]	; 0x24
 8007534:	f89a 3000 	ldrb.w	r3, [sl]
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 80a2 	beq.w	8007682 <_vfiprintf_r+0x20e>
 800753e:	2300      	movs	r3, #0
 8007540:	f04f 32ff 	mov.w	r2, #4294967295
 8007544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007548:	f10a 0a01 	add.w	sl, sl, #1
 800754c:	9304      	str	r3, [sp, #16]
 800754e:	9307      	str	r3, [sp, #28]
 8007550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007554:	931a      	str	r3, [sp, #104]	; 0x68
 8007556:	4654      	mov	r4, sl
 8007558:	2205      	movs	r2, #5
 800755a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800755e:	4858      	ldr	r0, [pc, #352]	; (80076c0 <_vfiprintf_r+0x24c>)
 8007560:	f7f8 fe76 	bl	8000250 <memchr>
 8007564:	9a04      	ldr	r2, [sp, #16]
 8007566:	b9d8      	cbnz	r0, 80075a0 <_vfiprintf_r+0x12c>
 8007568:	06d1      	lsls	r1, r2, #27
 800756a:	bf44      	itt	mi
 800756c:	2320      	movmi	r3, #32
 800756e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007572:	0713      	lsls	r3, r2, #28
 8007574:	bf44      	itt	mi
 8007576:	232b      	movmi	r3, #43	; 0x2b
 8007578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800757c:	f89a 3000 	ldrb.w	r3, [sl]
 8007580:	2b2a      	cmp	r3, #42	; 0x2a
 8007582:	d015      	beq.n	80075b0 <_vfiprintf_r+0x13c>
 8007584:	9a07      	ldr	r2, [sp, #28]
 8007586:	4654      	mov	r4, sl
 8007588:	2000      	movs	r0, #0
 800758a:	f04f 0c0a 	mov.w	ip, #10
 800758e:	4621      	mov	r1, r4
 8007590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007594:	3b30      	subs	r3, #48	; 0x30
 8007596:	2b09      	cmp	r3, #9
 8007598:	d94e      	bls.n	8007638 <_vfiprintf_r+0x1c4>
 800759a:	b1b0      	cbz	r0, 80075ca <_vfiprintf_r+0x156>
 800759c:	9207      	str	r2, [sp, #28]
 800759e:	e014      	b.n	80075ca <_vfiprintf_r+0x156>
 80075a0:	eba0 0308 	sub.w	r3, r0, r8
 80075a4:	fa09 f303 	lsl.w	r3, r9, r3
 80075a8:	4313      	orrs	r3, r2
 80075aa:	9304      	str	r3, [sp, #16]
 80075ac:	46a2      	mov	sl, r4
 80075ae:	e7d2      	b.n	8007556 <_vfiprintf_r+0xe2>
 80075b0:	9b03      	ldr	r3, [sp, #12]
 80075b2:	1d19      	adds	r1, r3, #4
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	9103      	str	r1, [sp, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	bfbb      	ittet	lt
 80075bc:	425b      	neglt	r3, r3
 80075be:	f042 0202 	orrlt.w	r2, r2, #2
 80075c2:	9307      	strge	r3, [sp, #28]
 80075c4:	9307      	strlt	r3, [sp, #28]
 80075c6:	bfb8      	it	lt
 80075c8:	9204      	strlt	r2, [sp, #16]
 80075ca:	7823      	ldrb	r3, [r4, #0]
 80075cc:	2b2e      	cmp	r3, #46	; 0x2e
 80075ce:	d10c      	bne.n	80075ea <_vfiprintf_r+0x176>
 80075d0:	7863      	ldrb	r3, [r4, #1]
 80075d2:	2b2a      	cmp	r3, #42	; 0x2a
 80075d4:	d135      	bne.n	8007642 <_vfiprintf_r+0x1ce>
 80075d6:	9b03      	ldr	r3, [sp, #12]
 80075d8:	1d1a      	adds	r2, r3, #4
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	9203      	str	r2, [sp, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	bfb8      	it	lt
 80075e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80075e6:	3402      	adds	r4, #2
 80075e8:	9305      	str	r3, [sp, #20]
 80075ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80076d0 <_vfiprintf_r+0x25c>
 80075ee:	7821      	ldrb	r1, [r4, #0]
 80075f0:	2203      	movs	r2, #3
 80075f2:	4650      	mov	r0, sl
 80075f4:	f7f8 fe2c 	bl	8000250 <memchr>
 80075f8:	b140      	cbz	r0, 800760c <_vfiprintf_r+0x198>
 80075fa:	2340      	movs	r3, #64	; 0x40
 80075fc:	eba0 000a 	sub.w	r0, r0, sl
 8007600:	fa03 f000 	lsl.w	r0, r3, r0
 8007604:	9b04      	ldr	r3, [sp, #16]
 8007606:	4303      	orrs	r3, r0
 8007608:	3401      	adds	r4, #1
 800760a:	9304      	str	r3, [sp, #16]
 800760c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007610:	482c      	ldr	r0, [pc, #176]	; (80076c4 <_vfiprintf_r+0x250>)
 8007612:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007616:	2206      	movs	r2, #6
 8007618:	f7f8 fe1a 	bl	8000250 <memchr>
 800761c:	2800      	cmp	r0, #0
 800761e:	d03f      	beq.n	80076a0 <_vfiprintf_r+0x22c>
 8007620:	4b29      	ldr	r3, [pc, #164]	; (80076c8 <_vfiprintf_r+0x254>)
 8007622:	bb1b      	cbnz	r3, 800766c <_vfiprintf_r+0x1f8>
 8007624:	9b03      	ldr	r3, [sp, #12]
 8007626:	3307      	adds	r3, #7
 8007628:	f023 0307 	bic.w	r3, r3, #7
 800762c:	3308      	adds	r3, #8
 800762e:	9303      	str	r3, [sp, #12]
 8007630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007632:	443b      	add	r3, r7
 8007634:	9309      	str	r3, [sp, #36]	; 0x24
 8007636:	e767      	b.n	8007508 <_vfiprintf_r+0x94>
 8007638:	fb0c 3202 	mla	r2, ip, r2, r3
 800763c:	460c      	mov	r4, r1
 800763e:	2001      	movs	r0, #1
 8007640:	e7a5      	b.n	800758e <_vfiprintf_r+0x11a>
 8007642:	2300      	movs	r3, #0
 8007644:	3401      	adds	r4, #1
 8007646:	9305      	str	r3, [sp, #20]
 8007648:	4619      	mov	r1, r3
 800764a:	f04f 0c0a 	mov.w	ip, #10
 800764e:	4620      	mov	r0, r4
 8007650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007654:	3a30      	subs	r2, #48	; 0x30
 8007656:	2a09      	cmp	r2, #9
 8007658:	d903      	bls.n	8007662 <_vfiprintf_r+0x1ee>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d0c5      	beq.n	80075ea <_vfiprintf_r+0x176>
 800765e:	9105      	str	r1, [sp, #20]
 8007660:	e7c3      	b.n	80075ea <_vfiprintf_r+0x176>
 8007662:	fb0c 2101 	mla	r1, ip, r1, r2
 8007666:	4604      	mov	r4, r0
 8007668:	2301      	movs	r3, #1
 800766a:	e7f0      	b.n	800764e <_vfiprintf_r+0x1da>
 800766c:	ab03      	add	r3, sp, #12
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	462a      	mov	r2, r5
 8007672:	4b16      	ldr	r3, [pc, #88]	; (80076cc <_vfiprintf_r+0x258>)
 8007674:	a904      	add	r1, sp, #16
 8007676:	4630      	mov	r0, r6
 8007678:	f7fd fbd6 	bl	8004e28 <_printf_float>
 800767c:	4607      	mov	r7, r0
 800767e:	1c78      	adds	r0, r7, #1
 8007680:	d1d6      	bne.n	8007630 <_vfiprintf_r+0x1bc>
 8007682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007684:	07d9      	lsls	r1, r3, #31
 8007686:	d405      	bmi.n	8007694 <_vfiprintf_r+0x220>
 8007688:	89ab      	ldrh	r3, [r5, #12]
 800768a:	059a      	lsls	r2, r3, #22
 800768c:	d402      	bmi.n	8007694 <_vfiprintf_r+0x220>
 800768e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007690:	f7ff f8b6 	bl	8006800 <__retarget_lock_release_recursive>
 8007694:	89ab      	ldrh	r3, [r5, #12]
 8007696:	065b      	lsls	r3, r3, #25
 8007698:	f53f af12 	bmi.w	80074c0 <_vfiprintf_r+0x4c>
 800769c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800769e:	e711      	b.n	80074c4 <_vfiprintf_r+0x50>
 80076a0:	ab03      	add	r3, sp, #12
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	462a      	mov	r2, r5
 80076a6:	4b09      	ldr	r3, [pc, #36]	; (80076cc <_vfiprintf_r+0x258>)
 80076a8:	a904      	add	r1, sp, #16
 80076aa:	4630      	mov	r0, r6
 80076ac:	f7fd fe48 	bl	8005340 <_printf_i>
 80076b0:	e7e4      	b.n	800767c <_vfiprintf_r+0x208>
 80076b2:	bf00      	nop
 80076b4:	08008268 	.word	0x08008268
 80076b8:	08008288 	.word	0x08008288
 80076bc:	08008248 	.word	0x08008248
 80076c0:	08008404 	.word	0x08008404
 80076c4:	0800840e 	.word	0x0800840e
 80076c8:	08004e29 	.word	0x08004e29
 80076cc:	0800744f 	.word	0x0800744f
 80076d0:	0800840a 	.word	0x0800840a

080076d4 <_sbrk_r>:
 80076d4:	b538      	push	{r3, r4, r5, lr}
 80076d6:	4d06      	ldr	r5, [pc, #24]	; (80076f0 <_sbrk_r+0x1c>)
 80076d8:	2300      	movs	r3, #0
 80076da:	4604      	mov	r4, r0
 80076dc:	4608      	mov	r0, r1
 80076de:	602b      	str	r3, [r5, #0]
 80076e0:	f7f9 ff52 	bl	8001588 <_sbrk>
 80076e4:	1c43      	adds	r3, r0, #1
 80076e6:	d102      	bne.n	80076ee <_sbrk_r+0x1a>
 80076e8:	682b      	ldr	r3, [r5, #0]
 80076ea:	b103      	cbz	r3, 80076ee <_sbrk_r+0x1a>
 80076ec:	6023      	str	r3, [r4, #0]
 80076ee:	bd38      	pop	{r3, r4, r5, pc}
 80076f0:	20000430 	.word	0x20000430

080076f4 <__sread>:
 80076f4:	b510      	push	{r4, lr}
 80076f6:	460c      	mov	r4, r1
 80076f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fc:	f000 f922 	bl	8007944 <_read_r>
 8007700:	2800      	cmp	r0, #0
 8007702:	bfab      	itete	ge
 8007704:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007706:	89a3      	ldrhlt	r3, [r4, #12]
 8007708:	181b      	addge	r3, r3, r0
 800770a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800770e:	bfac      	ite	ge
 8007710:	6563      	strge	r3, [r4, #84]	; 0x54
 8007712:	81a3      	strhlt	r3, [r4, #12]
 8007714:	bd10      	pop	{r4, pc}

08007716 <__swrite>:
 8007716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771a:	461f      	mov	r7, r3
 800771c:	898b      	ldrh	r3, [r1, #12]
 800771e:	05db      	lsls	r3, r3, #23
 8007720:	4605      	mov	r5, r0
 8007722:	460c      	mov	r4, r1
 8007724:	4616      	mov	r6, r2
 8007726:	d505      	bpl.n	8007734 <__swrite+0x1e>
 8007728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800772c:	2302      	movs	r3, #2
 800772e:	2200      	movs	r2, #0
 8007730:	f000 f898 	bl	8007864 <_lseek_r>
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800773a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800773e:	81a3      	strh	r3, [r4, #12]
 8007740:	4632      	mov	r2, r6
 8007742:	463b      	mov	r3, r7
 8007744:	4628      	mov	r0, r5
 8007746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800774a:	f000 b817 	b.w	800777c <_write_r>

0800774e <__sseek>:
 800774e:	b510      	push	{r4, lr}
 8007750:	460c      	mov	r4, r1
 8007752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007756:	f000 f885 	bl	8007864 <_lseek_r>
 800775a:	1c43      	adds	r3, r0, #1
 800775c:	89a3      	ldrh	r3, [r4, #12]
 800775e:	bf15      	itete	ne
 8007760:	6560      	strne	r0, [r4, #84]	; 0x54
 8007762:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007766:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800776a:	81a3      	strheq	r3, [r4, #12]
 800776c:	bf18      	it	ne
 800776e:	81a3      	strhne	r3, [r4, #12]
 8007770:	bd10      	pop	{r4, pc}

08007772 <__sclose>:
 8007772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007776:	f000 b831 	b.w	80077dc <_close_r>
	...

0800777c <_write_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	4d07      	ldr	r5, [pc, #28]	; (800779c <_write_r+0x20>)
 8007780:	4604      	mov	r4, r0
 8007782:	4608      	mov	r0, r1
 8007784:	4611      	mov	r1, r2
 8007786:	2200      	movs	r2, #0
 8007788:	602a      	str	r2, [r5, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	f7f9 fd94 	bl	80012b8 <_write>
 8007790:	1c43      	adds	r3, r0, #1
 8007792:	d102      	bne.n	800779a <_write_r+0x1e>
 8007794:	682b      	ldr	r3, [r5, #0]
 8007796:	b103      	cbz	r3, 800779a <_write_r+0x1e>
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	bd38      	pop	{r3, r4, r5, pc}
 800779c:	20000430 	.word	0x20000430

080077a0 <__assert_func>:
 80077a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077a2:	4614      	mov	r4, r2
 80077a4:	461a      	mov	r2, r3
 80077a6:	4b09      	ldr	r3, [pc, #36]	; (80077cc <__assert_func+0x2c>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4605      	mov	r5, r0
 80077ac:	68d8      	ldr	r0, [r3, #12]
 80077ae:	b14c      	cbz	r4, 80077c4 <__assert_func+0x24>
 80077b0:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <__assert_func+0x30>)
 80077b2:	9100      	str	r1, [sp, #0]
 80077b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077b8:	4906      	ldr	r1, [pc, #24]	; (80077d4 <__assert_func+0x34>)
 80077ba:	462b      	mov	r3, r5
 80077bc:	f000 f81e 	bl	80077fc <fiprintf>
 80077c0:	f000 f8df 	bl	8007982 <abort>
 80077c4:	4b04      	ldr	r3, [pc, #16]	; (80077d8 <__assert_func+0x38>)
 80077c6:	461c      	mov	r4, r3
 80077c8:	e7f3      	b.n	80077b2 <__assert_func+0x12>
 80077ca:	bf00      	nop
 80077cc:	2000000c 	.word	0x2000000c
 80077d0:	08008415 	.word	0x08008415
 80077d4:	08008422 	.word	0x08008422
 80077d8:	08008450 	.word	0x08008450

080077dc <_close_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	4d06      	ldr	r5, [pc, #24]	; (80077f8 <_close_r+0x1c>)
 80077e0:	2300      	movs	r3, #0
 80077e2:	4604      	mov	r4, r0
 80077e4:	4608      	mov	r0, r1
 80077e6:	602b      	str	r3, [r5, #0]
 80077e8:	f7f9 fe99 	bl	800151e <_close>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d102      	bne.n	80077f6 <_close_r+0x1a>
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	b103      	cbz	r3, 80077f6 <_close_r+0x1a>
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	20000430 	.word	0x20000430

080077fc <fiprintf>:
 80077fc:	b40e      	push	{r1, r2, r3}
 80077fe:	b503      	push	{r0, r1, lr}
 8007800:	4601      	mov	r1, r0
 8007802:	ab03      	add	r3, sp, #12
 8007804:	4805      	ldr	r0, [pc, #20]	; (800781c <fiprintf+0x20>)
 8007806:	f853 2b04 	ldr.w	r2, [r3], #4
 800780a:	6800      	ldr	r0, [r0, #0]
 800780c:	9301      	str	r3, [sp, #4]
 800780e:	f7ff fe31 	bl	8007474 <_vfiprintf_r>
 8007812:	b002      	add	sp, #8
 8007814:	f85d eb04 	ldr.w	lr, [sp], #4
 8007818:	b003      	add	sp, #12
 800781a:	4770      	bx	lr
 800781c:	2000000c 	.word	0x2000000c

08007820 <_fstat_r>:
 8007820:	b538      	push	{r3, r4, r5, lr}
 8007822:	4d07      	ldr	r5, [pc, #28]	; (8007840 <_fstat_r+0x20>)
 8007824:	2300      	movs	r3, #0
 8007826:	4604      	mov	r4, r0
 8007828:	4608      	mov	r0, r1
 800782a:	4611      	mov	r1, r2
 800782c:	602b      	str	r3, [r5, #0]
 800782e:	f7f9 fe82 	bl	8001536 <_fstat>
 8007832:	1c43      	adds	r3, r0, #1
 8007834:	d102      	bne.n	800783c <_fstat_r+0x1c>
 8007836:	682b      	ldr	r3, [r5, #0]
 8007838:	b103      	cbz	r3, 800783c <_fstat_r+0x1c>
 800783a:	6023      	str	r3, [r4, #0]
 800783c:	bd38      	pop	{r3, r4, r5, pc}
 800783e:	bf00      	nop
 8007840:	20000430 	.word	0x20000430

08007844 <_isatty_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	4d06      	ldr	r5, [pc, #24]	; (8007860 <_isatty_r+0x1c>)
 8007848:	2300      	movs	r3, #0
 800784a:	4604      	mov	r4, r0
 800784c:	4608      	mov	r0, r1
 800784e:	602b      	str	r3, [r5, #0]
 8007850:	f7f9 fe81 	bl	8001556 <_isatty>
 8007854:	1c43      	adds	r3, r0, #1
 8007856:	d102      	bne.n	800785e <_isatty_r+0x1a>
 8007858:	682b      	ldr	r3, [r5, #0]
 800785a:	b103      	cbz	r3, 800785e <_isatty_r+0x1a>
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	bd38      	pop	{r3, r4, r5, pc}
 8007860:	20000430 	.word	0x20000430

08007864 <_lseek_r>:
 8007864:	b538      	push	{r3, r4, r5, lr}
 8007866:	4d07      	ldr	r5, [pc, #28]	; (8007884 <_lseek_r+0x20>)
 8007868:	4604      	mov	r4, r0
 800786a:	4608      	mov	r0, r1
 800786c:	4611      	mov	r1, r2
 800786e:	2200      	movs	r2, #0
 8007870:	602a      	str	r2, [r5, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	f7f9 fe7a 	bl	800156c <_lseek>
 8007878:	1c43      	adds	r3, r0, #1
 800787a:	d102      	bne.n	8007882 <_lseek_r+0x1e>
 800787c:	682b      	ldr	r3, [r5, #0]
 800787e:	b103      	cbz	r3, 8007882 <_lseek_r+0x1e>
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	bd38      	pop	{r3, r4, r5, pc}
 8007884:	20000430 	.word	0x20000430

08007888 <__ascii_mbtowc>:
 8007888:	b082      	sub	sp, #8
 800788a:	b901      	cbnz	r1, 800788e <__ascii_mbtowc+0x6>
 800788c:	a901      	add	r1, sp, #4
 800788e:	b142      	cbz	r2, 80078a2 <__ascii_mbtowc+0x1a>
 8007890:	b14b      	cbz	r3, 80078a6 <__ascii_mbtowc+0x1e>
 8007892:	7813      	ldrb	r3, [r2, #0]
 8007894:	600b      	str	r3, [r1, #0]
 8007896:	7812      	ldrb	r2, [r2, #0]
 8007898:	1e10      	subs	r0, r2, #0
 800789a:	bf18      	it	ne
 800789c:	2001      	movne	r0, #1
 800789e:	b002      	add	sp, #8
 80078a0:	4770      	bx	lr
 80078a2:	4610      	mov	r0, r2
 80078a4:	e7fb      	b.n	800789e <__ascii_mbtowc+0x16>
 80078a6:	f06f 0001 	mvn.w	r0, #1
 80078aa:	e7f8      	b.n	800789e <__ascii_mbtowc+0x16>

080078ac <memmove>:
 80078ac:	4288      	cmp	r0, r1
 80078ae:	b510      	push	{r4, lr}
 80078b0:	eb01 0402 	add.w	r4, r1, r2
 80078b4:	d902      	bls.n	80078bc <memmove+0x10>
 80078b6:	4284      	cmp	r4, r0
 80078b8:	4623      	mov	r3, r4
 80078ba:	d807      	bhi.n	80078cc <memmove+0x20>
 80078bc:	1e43      	subs	r3, r0, #1
 80078be:	42a1      	cmp	r1, r4
 80078c0:	d008      	beq.n	80078d4 <memmove+0x28>
 80078c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078ca:	e7f8      	b.n	80078be <memmove+0x12>
 80078cc:	4402      	add	r2, r0
 80078ce:	4601      	mov	r1, r0
 80078d0:	428a      	cmp	r2, r1
 80078d2:	d100      	bne.n	80078d6 <memmove+0x2a>
 80078d4:	bd10      	pop	{r4, pc}
 80078d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078de:	e7f7      	b.n	80078d0 <memmove+0x24>

080078e0 <__malloc_lock>:
 80078e0:	4801      	ldr	r0, [pc, #4]	; (80078e8 <__malloc_lock+0x8>)
 80078e2:	f7fe bf8c 	b.w	80067fe <__retarget_lock_acquire_recursive>
 80078e6:	bf00      	nop
 80078e8:	20000428 	.word	0x20000428

080078ec <__malloc_unlock>:
 80078ec:	4801      	ldr	r0, [pc, #4]	; (80078f4 <__malloc_unlock+0x8>)
 80078ee:	f7fe bf87 	b.w	8006800 <__retarget_lock_release_recursive>
 80078f2:	bf00      	nop
 80078f4:	20000428 	.word	0x20000428

080078f8 <_realloc_r>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	4607      	mov	r7, r0
 80078fc:	4614      	mov	r4, r2
 80078fe:	460e      	mov	r6, r1
 8007900:	b921      	cbnz	r1, 800790c <_realloc_r+0x14>
 8007902:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007906:	4611      	mov	r1, r2
 8007908:	f7ff bbd4 	b.w	80070b4 <_malloc_r>
 800790c:	b922      	cbnz	r2, 8007918 <_realloc_r+0x20>
 800790e:	f7ff fb81 	bl	8007014 <_free_r>
 8007912:	4625      	mov	r5, r4
 8007914:	4628      	mov	r0, r5
 8007916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007918:	f000 f83a 	bl	8007990 <_malloc_usable_size_r>
 800791c:	42a0      	cmp	r0, r4
 800791e:	d20f      	bcs.n	8007940 <_realloc_r+0x48>
 8007920:	4621      	mov	r1, r4
 8007922:	4638      	mov	r0, r7
 8007924:	f7ff fbc6 	bl	80070b4 <_malloc_r>
 8007928:	4605      	mov	r5, r0
 800792a:	2800      	cmp	r0, #0
 800792c:	d0f2      	beq.n	8007914 <_realloc_r+0x1c>
 800792e:	4631      	mov	r1, r6
 8007930:	4622      	mov	r2, r4
 8007932:	f7fe ffd3 	bl	80068dc <memcpy>
 8007936:	4631      	mov	r1, r6
 8007938:	4638      	mov	r0, r7
 800793a:	f7ff fb6b 	bl	8007014 <_free_r>
 800793e:	e7e9      	b.n	8007914 <_realloc_r+0x1c>
 8007940:	4635      	mov	r5, r6
 8007942:	e7e7      	b.n	8007914 <_realloc_r+0x1c>

08007944 <_read_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	4d07      	ldr	r5, [pc, #28]	; (8007964 <_read_r+0x20>)
 8007948:	4604      	mov	r4, r0
 800794a:	4608      	mov	r0, r1
 800794c:	4611      	mov	r1, r2
 800794e:	2200      	movs	r2, #0
 8007950:	602a      	str	r2, [r5, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	f7f9 fdc6 	bl	80014e4 <_read>
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	d102      	bne.n	8007962 <_read_r+0x1e>
 800795c:	682b      	ldr	r3, [r5, #0]
 800795e:	b103      	cbz	r3, 8007962 <_read_r+0x1e>
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	bd38      	pop	{r3, r4, r5, pc}
 8007964:	20000430 	.word	0x20000430

08007968 <__ascii_wctomb>:
 8007968:	b149      	cbz	r1, 800797e <__ascii_wctomb+0x16>
 800796a:	2aff      	cmp	r2, #255	; 0xff
 800796c:	bf85      	ittet	hi
 800796e:	238a      	movhi	r3, #138	; 0x8a
 8007970:	6003      	strhi	r3, [r0, #0]
 8007972:	700a      	strbls	r2, [r1, #0]
 8007974:	f04f 30ff 	movhi.w	r0, #4294967295
 8007978:	bf98      	it	ls
 800797a:	2001      	movls	r0, #1
 800797c:	4770      	bx	lr
 800797e:	4608      	mov	r0, r1
 8007980:	4770      	bx	lr

08007982 <abort>:
 8007982:	b508      	push	{r3, lr}
 8007984:	2006      	movs	r0, #6
 8007986:	f000 f833 	bl	80079f0 <raise>
 800798a:	2001      	movs	r0, #1
 800798c:	f7f9 fda0 	bl	80014d0 <_exit>

08007990 <_malloc_usable_size_r>:
 8007990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007994:	1f18      	subs	r0, r3, #4
 8007996:	2b00      	cmp	r3, #0
 8007998:	bfbc      	itt	lt
 800799a:	580b      	ldrlt	r3, [r1, r0]
 800799c:	18c0      	addlt	r0, r0, r3
 800799e:	4770      	bx	lr

080079a0 <_raise_r>:
 80079a0:	291f      	cmp	r1, #31
 80079a2:	b538      	push	{r3, r4, r5, lr}
 80079a4:	4604      	mov	r4, r0
 80079a6:	460d      	mov	r5, r1
 80079a8:	d904      	bls.n	80079b4 <_raise_r+0x14>
 80079aa:	2316      	movs	r3, #22
 80079ac:	6003      	str	r3, [r0, #0]
 80079ae:	f04f 30ff 	mov.w	r0, #4294967295
 80079b2:	bd38      	pop	{r3, r4, r5, pc}
 80079b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80079b6:	b112      	cbz	r2, 80079be <_raise_r+0x1e>
 80079b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079bc:	b94b      	cbnz	r3, 80079d2 <_raise_r+0x32>
 80079be:	4620      	mov	r0, r4
 80079c0:	f000 f830 	bl	8007a24 <_getpid_r>
 80079c4:	462a      	mov	r2, r5
 80079c6:	4601      	mov	r1, r0
 80079c8:	4620      	mov	r0, r4
 80079ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079ce:	f000 b817 	b.w	8007a00 <_kill_r>
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d00a      	beq.n	80079ec <_raise_r+0x4c>
 80079d6:	1c59      	adds	r1, r3, #1
 80079d8:	d103      	bne.n	80079e2 <_raise_r+0x42>
 80079da:	2316      	movs	r3, #22
 80079dc:	6003      	str	r3, [r0, #0]
 80079de:	2001      	movs	r0, #1
 80079e0:	e7e7      	b.n	80079b2 <_raise_r+0x12>
 80079e2:	2400      	movs	r4, #0
 80079e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80079e8:	4628      	mov	r0, r5
 80079ea:	4798      	blx	r3
 80079ec:	2000      	movs	r0, #0
 80079ee:	e7e0      	b.n	80079b2 <_raise_r+0x12>

080079f0 <raise>:
 80079f0:	4b02      	ldr	r3, [pc, #8]	; (80079fc <raise+0xc>)
 80079f2:	4601      	mov	r1, r0
 80079f4:	6818      	ldr	r0, [r3, #0]
 80079f6:	f7ff bfd3 	b.w	80079a0 <_raise_r>
 80079fa:	bf00      	nop
 80079fc:	2000000c 	.word	0x2000000c

08007a00 <_kill_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4d07      	ldr	r5, [pc, #28]	; (8007a20 <_kill_r+0x20>)
 8007a04:	2300      	movs	r3, #0
 8007a06:	4604      	mov	r4, r0
 8007a08:	4608      	mov	r0, r1
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	602b      	str	r3, [r5, #0]
 8007a0e:	f7f9 fd4f 	bl	80014b0 <_kill>
 8007a12:	1c43      	adds	r3, r0, #1
 8007a14:	d102      	bne.n	8007a1c <_kill_r+0x1c>
 8007a16:	682b      	ldr	r3, [r5, #0]
 8007a18:	b103      	cbz	r3, 8007a1c <_kill_r+0x1c>
 8007a1a:	6023      	str	r3, [r4, #0]
 8007a1c:	bd38      	pop	{r3, r4, r5, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000430 	.word	0x20000430

08007a24 <_getpid_r>:
 8007a24:	f7f9 bd3c 	b.w	80014a0 <_getpid>

08007a28 <asin>:
 8007a28:	b508      	push	{r3, lr}
 8007a2a:	ed2d 8b04 	vpush	{d8-d9}
 8007a2e:	eeb0 8b40 	vmov.f64	d8, d0
 8007a32:	f000 f859 	bl	8007ae8 <__ieee754_asin>
 8007a36:	4b13      	ldr	r3, [pc, #76]	; (8007a84 <asin+0x5c>)
 8007a38:	eeb0 9b40 	vmov.f64	d9, d0
 8007a3c:	f993 3000 	ldrsb.w	r3, [r3]
 8007a40:	3301      	adds	r3, #1
 8007a42:	d01a      	beq.n	8007a7a <asin+0x52>
 8007a44:	eeb4 8b48 	vcmp.f64	d8, d8
 8007a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a4c:	d615      	bvs.n	8007a7a <asin+0x52>
 8007a4e:	eeb0 0b48 	vmov.f64	d0, d8
 8007a52:	f000 fb2f 	bl	80080b4 <fabs>
 8007a56:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007a5a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a62:	dd0a      	ble.n	8007a7a <asin+0x52>
 8007a64:	f7fd f91c 	bl	8004ca0 <__errno>
 8007a68:	ecbd 8b04 	vpop	{d8-d9}
 8007a6c:	2321      	movs	r3, #33	; 0x21
 8007a6e:	6003      	str	r3, [r0, #0]
 8007a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a74:	4804      	ldr	r0, [pc, #16]	; (8007a88 <asin+0x60>)
 8007a76:	f000 bb27 	b.w	80080c8 <nan>
 8007a7a:	eeb0 0b49 	vmov.f64	d0, d9
 8007a7e:	ecbd 8b04 	vpop	{d8-d9}
 8007a82:	bd08      	pop	{r3, pc}
 8007a84:	200001dc 	.word	0x200001dc
 8007a88:	08008450 	.word	0x08008450

08007a8c <atan2>:
 8007a8c:	f000 b944 	b.w	8007d18 <__ieee754_atan2>

08007a90 <sqrt>:
 8007a90:	b508      	push	{r3, lr}
 8007a92:	ed2d 8b04 	vpush	{d8-d9}
 8007a96:	eeb0 8b40 	vmov.f64	d8, d0
 8007a9a:	f000 fa0b 	bl	8007eb4 <__ieee754_sqrt>
 8007a9e:	4b10      	ldr	r3, [pc, #64]	; (8007ae0 <sqrt+0x50>)
 8007aa0:	f993 3000 	ldrsb.w	r3, [r3]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	d011      	beq.n	8007acc <sqrt+0x3c>
 8007aa8:	eeb4 8b48 	vcmp.f64	d8, d8
 8007aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab0:	d60c      	bvs.n	8007acc <sqrt+0x3c>
 8007ab2:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8007ad8 <sqrt+0x48>
 8007ab6:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8007aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007abe:	d505      	bpl.n	8007acc <sqrt+0x3c>
 8007ac0:	f7fd f8ee 	bl	8004ca0 <__errno>
 8007ac4:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8007ac8:	2321      	movs	r3, #33	; 0x21
 8007aca:	6003      	str	r3, [r0, #0]
 8007acc:	ecbd 8b04 	vpop	{d8-d9}
 8007ad0:	bd08      	pop	{r3, pc}
 8007ad2:	bf00      	nop
 8007ad4:	f3af 8000 	nop.w
	...
 8007ae0:	200001dc 	.word	0x200001dc
 8007ae4:	00000000 	.word	0x00000000

08007ae8 <__ieee754_asin>:
 8007ae8:	b530      	push	{r4, r5, lr}
 8007aea:	ee10 5a90 	vmov	r5, s1
 8007aee:	ed2d 8b06 	vpush	{d8-d10}
 8007af2:	4b85      	ldr	r3, [pc, #532]	; (8007d08 <__ieee754_asin+0x220>)
 8007af4:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007af8:	429c      	cmp	r4, r3
 8007afa:	b083      	sub	sp, #12
 8007afc:	dd1a      	ble.n	8007b34 <__ieee754_asin+0x4c>
 8007afe:	ee10 3a10 	vmov	r3, s0
 8007b02:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007b06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007b0a:	4323      	orrs	r3, r4
 8007b0c:	d10d      	bne.n	8007b2a <__ieee754_asin+0x42>
 8007b0e:	ed9f 7b60 	vldr	d7, [pc, #384]	; 8007c90 <__ieee754_asin+0x1a8>
 8007b12:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8007c98 <__ieee754_asin+0x1b0>
 8007b16:	ee20 7b07 	vmul.f64	d7, d0, d7
 8007b1a:	eea0 7b06 	vfma.f64	d7, d0, d6
 8007b1e:	eeb0 0b47 	vmov.f64	d0, d7
 8007b22:	b003      	add	sp, #12
 8007b24:	ecbd 8b06 	vpop	{d8-d10}
 8007b28:	bd30      	pop	{r4, r5, pc}
 8007b2a:	ee30 7b40 	vsub.f64	d7, d0, d0
 8007b2e:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8007b32:	e7f6      	b.n	8007b22 <__ieee754_asin+0x3a>
 8007b34:	4b75      	ldr	r3, [pc, #468]	; (8007d0c <__ieee754_asin+0x224>)
 8007b36:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8007b3a:	429c      	cmp	r4, r3
 8007b3c:	dc0b      	bgt.n	8007b56 <__ieee754_asin+0x6e>
 8007b3e:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 8007b42:	da56      	bge.n	8007bf2 <__ieee754_asin+0x10a>
 8007b44:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8007ca0 <__ieee754_asin+0x1b8>
 8007b48:	ee30 7b07 	vadd.f64	d7, d0, d7
 8007b4c:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8007b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b54:	dce5      	bgt.n	8007b22 <__ieee754_asin+0x3a>
 8007b56:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8007b5a:	f000 faab 	bl	80080b4 <fabs>
 8007b5e:	ed9f 7b52 	vldr	d7, [pc, #328]	; 8007ca8 <__ieee754_asin+0x1c0>
 8007b62:	ee39 0b40 	vsub.f64	d0, d9, d0
 8007b66:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007b6a:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8007cb0 <__ieee754_asin+0x1c8>
 8007b6e:	eeb0 0b48 	vmov.f64	d0, d8
 8007b72:	eea8 6b07 	vfma.f64	d6, d8, d7
 8007b76:	ed9f 7b50 	vldr	d7, [pc, #320]	; 8007cb8 <__ieee754_asin+0x1d0>
 8007b7a:	eea6 7b08 	vfma.f64	d7, d6, d8
 8007b7e:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8007cc0 <__ieee754_asin+0x1d8>
 8007b82:	ed9f ab51 	vldr	d10, [pc, #324]	; 8007cc8 <__ieee754_asin+0x1e0>
 8007b86:	eea7 6b08 	vfma.f64	d6, d7, d8
 8007b8a:	ed9f 7b51 	vldr	d7, [pc, #324]	; 8007cd0 <__ieee754_asin+0x1e8>
 8007b8e:	eea6 7b08 	vfma.f64	d7, d6, d8
 8007b92:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8007cd8 <__ieee754_asin+0x1f0>
 8007b96:	eea7 ab08 	vfma.f64	d10, d7, d8
 8007b9a:	ee2a ab08 	vmul.f64	d10, d10, d8
 8007b9e:	ed9f 7b50 	vldr	d7, [pc, #320]	; 8007ce0 <__ieee754_asin+0x1f8>
 8007ba2:	eea8 7b06 	vfma.f64	d7, d8, d6
 8007ba6:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8007ce8 <__ieee754_asin+0x200>
 8007baa:	eea7 6b08 	vfma.f64	d6, d7, d8
 8007bae:	ed9f 7b50 	vldr	d7, [pc, #320]	; 8007cf0 <__ieee754_asin+0x208>
 8007bb2:	eea6 7b08 	vfma.f64	d7, d6, d8
 8007bb6:	eea7 9b08 	vfma.f64	d9, d7, d8
 8007bba:	f000 f97b 	bl	8007eb4 <__ieee754_sqrt>
 8007bbe:	ee8a 4b09 	vdiv.f64	d4, d10, d9
 8007bc2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007bc6:	4b52      	ldr	r3, [pc, #328]	; (8007d10 <__ieee754_asin+0x228>)
 8007bc8:	429c      	cmp	r4, r3
 8007bca:	ed8d 0b00 	vstr	d0, [sp]
 8007bce:	dd3f      	ble.n	8007c50 <__ieee754_asin+0x168>
 8007bd0:	eeb0 7b40 	vmov.f64	d7, d0
 8007bd4:	eea0 7b04 	vfma.f64	d7, d0, d4
 8007bd8:	ed9f 0b47 	vldr	d0, [pc, #284]	; 8007cf8 <__ieee754_asin+0x210>
 8007bdc:	eea7 0b05 	vfma.f64	d0, d7, d5
 8007be0:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007c98 <__ieee754_asin+0x1b0>
 8007be4:	ee37 0b40 	vsub.f64	d0, d7, d0
 8007be8:	2d00      	cmp	r5, #0
 8007bea:	bfd8      	it	le
 8007bec:	eeb1 0b40 	vnegle.f64	d0, d0
 8007bf0:	e797      	b.n	8007b22 <__ieee754_asin+0x3a>
 8007bf2:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8007ca8 <__ieee754_asin+0x1c0>
 8007bf6:	ee20 7b00 	vmul.f64	d7, d0, d0
 8007bfa:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8007cb0 <__ieee754_asin+0x1c8>
 8007bfe:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007c02:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8007cb8 <__ieee754_asin+0x1d0>
 8007c06:	eea6 5b07 	vfma.f64	d5, d6, d7
 8007c0a:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8007cc0 <__ieee754_asin+0x1d8>
 8007c0e:	eea5 6b07 	vfma.f64	d6, d5, d7
 8007c12:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8007cd0 <__ieee754_asin+0x1e8>
 8007c16:	eea6 5b07 	vfma.f64	d5, d6, d7
 8007c1a:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8007cc8 <__ieee754_asin+0x1e0>
 8007c1e:	ed9f 4b2e 	vldr	d4, [pc, #184]	; 8007cd8 <__ieee754_asin+0x1f0>
 8007c22:	eea5 6b07 	vfma.f64	d6, d5, d7
 8007c26:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007c2a:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8007ce0 <__ieee754_asin+0x1f8>
 8007c2e:	eea7 5b04 	vfma.f64	d5, d7, d4
 8007c32:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8007ce8 <__ieee754_asin+0x200>
 8007c36:	eea5 4b07 	vfma.f64	d4, d5, d7
 8007c3a:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8007cf0 <__ieee754_asin+0x208>
 8007c3e:	eea4 5b07 	vfma.f64	d5, d4, d7
 8007c42:	eea5 9b07 	vfma.f64	d9, d5, d7
 8007c46:	ee86 7b09 	vdiv.f64	d7, d6, d9
 8007c4a:	eea0 0b07 	vfma.f64	d0, d0, d7
 8007c4e:	e768      	b.n	8007b22 <__ieee754_asin+0x3a>
 8007c50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c54:	ed9d 7b00 	vldr	d7, [sp]
 8007c58:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8007c90 <__ieee754_asin+0x1a8>
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	ec43 2b16 	vmov	d6, r2, r3
 8007c62:	eea6 8b46 	vfms.f64	d8, d6, d6
 8007c66:	ee37 3b06 	vadd.f64	d3, d7, d6
 8007c6a:	ee88 7b03 	vdiv.f64	d7, d8, d3
 8007c6e:	eea7 0b45 	vfms.f64	d0, d7, d5
 8007c72:	ed9d 7b00 	vldr	d7, [sp]
 8007c76:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007c7a:	ee97 0b04 	vfnms.f64	d0, d7, d4
 8007c7e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8007d00 <__ieee754_asin+0x218>
 8007c82:	eeb0 4b47 	vmov.f64	d4, d7
 8007c86:	eea6 4b45 	vfms.f64	d4, d6, d5
 8007c8a:	ee30 0b44 	vsub.f64	d0, d0, d4
 8007c8e:	e7a9      	b.n	8007be4 <__ieee754_asin+0xfc>
 8007c90:	33145c07 	.word	0x33145c07
 8007c94:	3c91a626 	.word	0x3c91a626
 8007c98:	54442d18 	.word	0x54442d18
 8007c9c:	3ff921fb 	.word	0x3ff921fb
 8007ca0:	8800759c 	.word	0x8800759c
 8007ca4:	7e37e43c 	.word	0x7e37e43c
 8007ca8:	0dfdf709 	.word	0x0dfdf709
 8007cac:	3f023de1 	.word	0x3f023de1
 8007cb0:	7501b288 	.word	0x7501b288
 8007cb4:	3f49efe0 	.word	0x3f49efe0
 8007cb8:	b5688f3b 	.word	0xb5688f3b
 8007cbc:	bfa48228 	.word	0xbfa48228
 8007cc0:	0e884455 	.word	0x0e884455
 8007cc4:	3fc9c155 	.word	0x3fc9c155
 8007cc8:	55555555 	.word	0x55555555
 8007ccc:	3fc55555 	.word	0x3fc55555
 8007cd0:	03eb6f7d 	.word	0x03eb6f7d
 8007cd4:	bfd4d612 	.word	0xbfd4d612
 8007cd8:	b12e9282 	.word	0xb12e9282
 8007cdc:	3fb3b8c5 	.word	0x3fb3b8c5
 8007ce0:	1b8d0159 	.word	0x1b8d0159
 8007ce4:	bfe6066c 	.word	0xbfe6066c
 8007ce8:	9c598ac8 	.word	0x9c598ac8
 8007cec:	40002ae5 	.word	0x40002ae5
 8007cf0:	1c8a2d4b 	.word	0x1c8a2d4b
 8007cf4:	c0033a27 	.word	0xc0033a27
 8007cf8:	33145c07 	.word	0x33145c07
 8007cfc:	bc91a626 	.word	0xbc91a626
 8007d00:	54442d18 	.word	0x54442d18
 8007d04:	3fe921fb 	.word	0x3fe921fb
 8007d08:	3fefffff 	.word	0x3fefffff
 8007d0c:	3fdfffff 	.word	0x3fdfffff
 8007d10:	3fef3332 	.word	0x3fef3332
 8007d14:	00000000 	.word	0x00000000

08007d18 <__ieee754_atan2>:
 8007d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d1a:	ee11 6a10 	vmov	r6, s2
 8007d1e:	ee11 0a90 	vmov	r0, s3
 8007d22:	4273      	negs	r3, r6
 8007d24:	4f60      	ldr	r7, [pc, #384]	; (8007ea8 <__ieee754_atan2+0x190>)
 8007d26:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8007d2a:	4333      	orrs	r3, r6
 8007d2c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007d30:	42bb      	cmp	r3, r7
 8007d32:	ed8d 0b00 	vstr	d0, [sp]
 8007d36:	d80b      	bhi.n	8007d50 <__ieee754_atan2+0x38>
 8007d38:	e9dd c500 	ldrd	ip, r5, [sp]
 8007d3c:	f1cc 0100 	rsb	r1, ip, #0
 8007d40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007d44:	ea41 010c 	orr.w	r1, r1, ip
 8007d48:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8007d4c:	42b9      	cmp	r1, r7
 8007d4e:	d906      	bls.n	8007d5e <__ieee754_atan2+0x46>
 8007d50:	ed9d 7b00 	vldr	d7, [sp]
 8007d54:	ee37 7b01 	vadd.f64	d7, d7, d1
 8007d58:	ed8d 7b00 	vstr	d7, [sp]
 8007d5c:	e054      	b.n	8007e08 <__ieee754_atan2+0xf0>
 8007d5e:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8007d62:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8007d66:	4331      	orrs	r1, r6
 8007d68:	d104      	bne.n	8007d74 <__ieee754_atan2+0x5c>
 8007d6a:	b003      	add	sp, #12
 8007d6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007d70:	f000 b8a6 	b.w	8007ec0 <atan>
 8007d74:	1784      	asrs	r4, r0, #30
 8007d76:	f004 0402 	and.w	r4, r4, #2
 8007d7a:	ea53 010c 	orrs.w	r1, r3, ip
 8007d7e:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8007d82:	d109      	bne.n	8007d98 <__ieee754_atan2+0x80>
 8007d84:	2c02      	cmp	r4, #2
 8007d86:	d069      	beq.n	8007e5c <__ieee754_atan2+0x144>
 8007d88:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8007e70 <__ieee754_atan2+0x158>
 8007d8c:	ed9d 6b00 	vldr	d6, [sp]
 8007d90:	2c03      	cmp	r4, #3
 8007d92:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8007d96:	e7df      	b.n	8007d58 <__ieee754_atan2+0x40>
 8007d98:	ea52 0106 	orrs.w	r1, r2, r6
 8007d9c:	d107      	bne.n	8007dae <__ieee754_atan2+0x96>
 8007d9e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8007e78 <__ieee754_atan2+0x160>
 8007da2:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8007e80 <__ieee754_atan2+0x168>
 8007da6:	2d00      	cmp	r5, #0
 8007da8:	fe26 7b07 	vselge.f64	d7, d6, d7
 8007dac:	e7d4      	b.n	8007d58 <__ieee754_atan2+0x40>
 8007dae:	42ba      	cmp	r2, r7
 8007db0:	d10f      	bne.n	8007dd2 <__ieee754_atan2+0xba>
 8007db2:	4293      	cmp	r3, r2
 8007db4:	f104 34ff 	add.w	r4, r4, #4294967295
 8007db8:	d107      	bne.n	8007dca <__ieee754_atan2+0xb2>
 8007dba:	2c02      	cmp	r4, #2
 8007dbc:	d851      	bhi.n	8007e62 <__ieee754_atan2+0x14a>
 8007dbe:	4b3b      	ldr	r3, [pc, #236]	; (8007eac <__ieee754_atan2+0x194>)
 8007dc0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007dc4:	ed94 7b00 	vldr	d7, [r4]
 8007dc8:	e7c6      	b.n	8007d58 <__ieee754_atan2+0x40>
 8007dca:	2c02      	cmp	r4, #2
 8007dcc:	d84c      	bhi.n	8007e68 <__ieee754_atan2+0x150>
 8007dce:	4b38      	ldr	r3, [pc, #224]	; (8007eb0 <__ieee754_atan2+0x198>)
 8007dd0:	e7f6      	b.n	8007dc0 <__ieee754_atan2+0xa8>
 8007dd2:	42bb      	cmp	r3, r7
 8007dd4:	d0e3      	beq.n	8007d9e <__ieee754_atan2+0x86>
 8007dd6:	1a9b      	subs	r3, r3, r2
 8007dd8:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007ddc:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007de0:	da16      	bge.n	8007e10 <__ieee754_atan2+0xf8>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	da01      	bge.n	8007dea <__ieee754_atan2+0xd2>
 8007de6:	323c      	adds	r2, #60	; 0x3c
 8007de8:	db17      	blt.n	8007e1a <__ieee754_atan2+0x102>
 8007dea:	ed9d 7b00 	vldr	d7, [sp]
 8007dee:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8007df2:	f000 f95f 	bl	80080b4 <fabs>
 8007df6:	f000 f863 	bl	8007ec0 <atan>
 8007dfa:	ed8d 0b00 	vstr	d0, [sp]
 8007dfe:	2c01      	cmp	r4, #1
 8007e00:	d00e      	beq.n	8007e20 <__ieee754_atan2+0x108>
 8007e02:	2c02      	cmp	r4, #2
 8007e04:	d014      	beq.n	8007e30 <__ieee754_atan2+0x118>
 8007e06:	b9f4      	cbnz	r4, 8007e46 <__ieee754_atan2+0x12e>
 8007e08:	ed9d 0b00 	vldr	d0, [sp]
 8007e0c:	b003      	add	sp, #12
 8007e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e10:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8007e78 <__ieee754_atan2+0x160>
 8007e14:	ed8d 7b00 	vstr	d7, [sp]
 8007e18:	e7f1      	b.n	8007dfe <__ieee754_atan2+0xe6>
 8007e1a:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8007e88 <__ieee754_atan2+0x170>
 8007e1e:	e7f9      	b.n	8007e14 <__ieee754_atan2+0xfc>
 8007e20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e24:	9901      	ldr	r1, [sp, #4]
 8007e26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e2a:	e9cd 2300 	strd	r2, r3, [sp]
 8007e2e:	e7eb      	b.n	8007e08 <__ieee754_atan2+0xf0>
 8007e30:	ed9d 6b00 	vldr	d6, [sp]
 8007e34:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8007e90 <__ieee754_atan2+0x178>
 8007e38:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007e3c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8007e98 <__ieee754_atan2+0x180>
 8007e40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007e44:	e788      	b.n	8007d58 <__ieee754_atan2+0x40>
 8007e46:	ed9d 6b00 	vldr	d6, [sp]
 8007e4a:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8007e90 <__ieee754_atan2+0x178>
 8007e4e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007e52:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8007e98 <__ieee754_atan2+0x180>
 8007e56:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007e5a:	e77d      	b.n	8007d58 <__ieee754_atan2+0x40>
 8007e5c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8007e98 <__ieee754_atan2+0x180>
 8007e60:	e77a      	b.n	8007d58 <__ieee754_atan2+0x40>
 8007e62:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8007ea0 <__ieee754_atan2+0x188>
 8007e66:	e777      	b.n	8007d58 <__ieee754_atan2+0x40>
 8007e68:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8007e88 <__ieee754_atan2+0x170>
 8007e6c:	e774      	b.n	8007d58 <__ieee754_atan2+0x40>
 8007e6e:	bf00      	nop
 8007e70:	54442d18 	.word	0x54442d18
 8007e74:	c00921fb 	.word	0xc00921fb
 8007e78:	54442d18 	.word	0x54442d18
 8007e7c:	3ff921fb 	.word	0x3ff921fb
 8007e80:	54442d18 	.word	0x54442d18
 8007e84:	bff921fb 	.word	0xbff921fb
	...
 8007e90:	33145c07 	.word	0x33145c07
 8007e94:	3ca1a626 	.word	0x3ca1a626
 8007e98:	54442d18 	.word	0x54442d18
 8007e9c:	400921fb 	.word	0x400921fb
 8007ea0:	54442d18 	.word	0x54442d18
 8007ea4:	3fe921fb 	.word	0x3fe921fb
 8007ea8:	7ff00000 	.word	0x7ff00000
 8007eac:	08008560 	.word	0x08008560
 8007eb0:	08008578 	.word	0x08008578

08007eb4 <__ieee754_sqrt>:
 8007eb4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8007eb8:	4770      	bx	lr
 8007eba:	0000      	movs	r0, r0
 8007ebc:	0000      	movs	r0, r0
	...

08007ec0 <atan>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	eeb0 7b40 	vmov.f64	d7, d0
 8007ec6:	ee17 5a90 	vmov	r5, s15
 8007eca:	4b73      	ldr	r3, [pc, #460]	; (8008098 <atan+0x1d8>)
 8007ecc:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007ed0:	429c      	cmp	r4, r3
 8007ed2:	dd13      	ble.n	8007efc <atan+0x3c>
 8007ed4:	4b71      	ldr	r3, [pc, #452]	; (800809c <atan+0x1dc>)
 8007ed6:	429c      	cmp	r4, r3
 8007ed8:	dc03      	bgt.n	8007ee2 <atan+0x22>
 8007eda:	d107      	bne.n	8007eec <atan+0x2c>
 8007edc:	ee10 3a10 	vmov	r3, s0
 8007ee0:	b123      	cbz	r3, 8007eec <atan+0x2c>
 8007ee2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007ee6:	eeb0 0b47 	vmov.f64	d0, d7
 8007eea:	bd38      	pop	{r3, r4, r5, pc}
 8007eec:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8008028 <atan+0x168>
 8007ef0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8008030 <atan+0x170>
 8007ef4:	2d00      	cmp	r5, #0
 8007ef6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8007efa:	e7f4      	b.n	8007ee6 <atan+0x26>
 8007efc:	4b68      	ldr	r3, [pc, #416]	; (80080a0 <atan+0x1e0>)
 8007efe:	429c      	cmp	r4, r3
 8007f00:	dc11      	bgt.n	8007f26 <atan+0x66>
 8007f02:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007f06:	429c      	cmp	r4, r3
 8007f08:	dc0a      	bgt.n	8007f20 <atan+0x60>
 8007f0a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8007f0e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8008038 <atan+0x178>
 8007f12:	ee30 6b06 	vadd.f64	d6, d0, d6
 8007f16:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f1e:	dce2      	bgt.n	8007ee6 <atan+0x26>
 8007f20:	f04f 33ff 	mov.w	r3, #4294967295
 8007f24:	e013      	b.n	8007f4e <atan+0x8e>
 8007f26:	f000 f8c5 	bl	80080b4 <fabs>
 8007f2a:	4b5e      	ldr	r3, [pc, #376]	; (80080a4 <atan+0x1e4>)
 8007f2c:	429c      	cmp	r4, r3
 8007f2e:	dc4f      	bgt.n	8007fd0 <atan+0x110>
 8007f30:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007f34:	429c      	cmp	r4, r3
 8007f36:	dc41      	bgt.n	8007fbc <atan+0xfc>
 8007f38:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007f3c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8007f40:	2300      	movs	r3, #0
 8007f42:	eea0 6b07 	vfma.f64	d6, d0, d7
 8007f46:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007f4a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8007f4e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8008040 <atan+0x180>
 8007f52:	ee27 4b07 	vmul.f64	d4, d7, d7
 8007f56:	ee24 5b04 	vmul.f64	d5, d4, d4
 8007f5a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8008048 <atan+0x188>
 8007f5e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8007f62:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8008050 <atan+0x190>
 8007f66:	eea3 6b05 	vfma.f64	d6, d3, d5
 8007f6a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8008058 <atan+0x198>
 8007f6e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8007f72:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8008060 <atan+0x1a0>
 8007f76:	eea3 6b05 	vfma.f64	d6, d3, d5
 8007f7a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8008068 <atan+0x1a8>
 8007f7e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8008070 <atan+0x1b0>
 8007f82:	eea6 3b05 	vfma.f64	d3, d6, d5
 8007f86:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8008078 <atan+0x1b8>
 8007f8a:	eea5 2b06 	vfma.f64	d2, d5, d6
 8007f8e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8008080 <atan+0x1c0>
 8007f92:	eea2 6b05 	vfma.f64	d6, d2, d5
 8007f96:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8008088 <atan+0x1c8>
 8007f9a:	eea6 2b05 	vfma.f64	d2, d6, d5
 8007f9e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8008090 <atan+0x1d0>
 8007fa2:	1c5a      	adds	r2, r3, #1
 8007fa4:	eea2 6b05 	vfma.f64	d6, d2, d5
 8007fa8:	ee26 6b05 	vmul.f64	d6, d6, d5
 8007fac:	eea3 6b04 	vfma.f64	d6, d3, d4
 8007fb0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007fb4:	d121      	bne.n	8007ffa <atan+0x13a>
 8007fb6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007fba:	e794      	b.n	8007ee6 <atan+0x26>
 8007fbc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	ee30 6b47 	vsub.f64	d6, d0, d7
 8007fc6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007fca:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8007fce:	e7be      	b.n	8007f4e <atan+0x8e>
 8007fd0:	4b35      	ldr	r3, [pc, #212]	; (80080a8 <atan+0x1e8>)
 8007fd2:	429c      	cmp	r4, r3
 8007fd4:	da0b      	bge.n	8007fee <atan+0x12e>
 8007fd6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007fda:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007fde:	ee30 5b47 	vsub.f64	d5, d0, d7
 8007fe2:	eea0 6b07 	vfma.f64	d6, d0, d7
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007fec:	e7af      	b.n	8007f4e <atan+0x8e>
 8007fee:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8007ff8:	e7a9      	b.n	8007f4e <atan+0x8e>
 8007ffa:	4a2c      	ldr	r2, [pc, #176]	; (80080ac <atan+0x1ec>)
 8007ffc:	492c      	ldr	r1, [pc, #176]	; (80080b0 <atan+0x1f0>)
 8007ffe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008002:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8008006:	ed93 5b00 	vldr	d5, [r3]
 800800a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800800e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008012:	ed92 6b00 	vldr	d6, [r2]
 8008016:	2d00      	cmp	r5, #0
 8008018:	ee36 7b47 	vsub.f64	d7, d6, d7
 800801c:	bfb8      	it	lt
 800801e:	eeb1 7b47 	vneglt.f64	d7, d7
 8008022:	e760      	b.n	8007ee6 <atan+0x26>
 8008024:	f3af 8000 	nop.w
 8008028:	54442d18 	.word	0x54442d18
 800802c:	3ff921fb 	.word	0x3ff921fb
 8008030:	54442d18 	.word	0x54442d18
 8008034:	bff921fb 	.word	0xbff921fb
 8008038:	8800759c 	.word	0x8800759c
 800803c:	7e37e43c 	.word	0x7e37e43c
 8008040:	e322da11 	.word	0xe322da11
 8008044:	3f90ad3a 	.word	0x3f90ad3a
 8008048:	24760deb 	.word	0x24760deb
 800804c:	3fa97b4b 	.word	0x3fa97b4b
 8008050:	a0d03d51 	.word	0xa0d03d51
 8008054:	3fb10d66 	.word	0x3fb10d66
 8008058:	c54c206e 	.word	0xc54c206e
 800805c:	3fb745cd 	.word	0x3fb745cd
 8008060:	920083ff 	.word	0x920083ff
 8008064:	3fc24924 	.word	0x3fc24924
 8008068:	5555550d 	.word	0x5555550d
 800806c:	3fd55555 	.word	0x3fd55555
 8008070:	52defd9a 	.word	0x52defd9a
 8008074:	bfadde2d 	.word	0xbfadde2d
 8008078:	2c6a6c2f 	.word	0x2c6a6c2f
 800807c:	bfa2b444 	.word	0xbfa2b444
 8008080:	af749a6d 	.word	0xaf749a6d
 8008084:	bfb3b0f2 	.word	0xbfb3b0f2
 8008088:	fe231671 	.word	0xfe231671
 800808c:	bfbc71c6 	.word	0xbfbc71c6
 8008090:	9998ebc4 	.word	0x9998ebc4
 8008094:	bfc99999 	.word	0xbfc99999
 8008098:	440fffff 	.word	0x440fffff
 800809c:	7ff00000 	.word	0x7ff00000
 80080a0:	3fdbffff 	.word	0x3fdbffff
 80080a4:	3ff2ffff 	.word	0x3ff2ffff
 80080a8:	40038000 	.word	0x40038000
 80080ac:	08008590 	.word	0x08008590
 80080b0:	080085b0 	.word	0x080085b0

080080b4 <fabs>:
 80080b4:	ec51 0b10 	vmov	r0, r1, d0
 80080b8:	ee10 2a10 	vmov	r2, s0
 80080bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80080c0:	ec43 2b10 	vmov	d0, r2, r3
 80080c4:	4770      	bx	lr
	...

080080c8 <nan>:
 80080c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80080d0 <nan+0x8>
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	00000000 	.word	0x00000000
 80080d4:	7ff80000 	.word	0x7ff80000

080080d8 <_init>:
 80080d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080da:	bf00      	nop
 80080dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080de:	bc08      	pop	{r3}
 80080e0:	469e      	mov	lr, r3
 80080e2:	4770      	bx	lr

080080e4 <_fini>:
 80080e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e6:	bf00      	nop
 80080e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ea:	bc08      	pop	{r3}
 80080ec:	469e      	mov	lr, r3
 80080ee:	4770      	bx	lr
