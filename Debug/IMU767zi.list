
IMU767zi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000396c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf0  08003bf0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bf8  08003bf8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf8  08003bf8  00013bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bfc  08003bfc  00013bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  08003c70  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003c70  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4c7  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c43  00000000  00000000  0002c565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0002e1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002ebd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270da  00000000  00000000  0002f550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c506  00000000  00000000  0005662a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1c70  00000000  00000000  00062b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001547a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002db8  00000000  00000000  001547f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08003b54 	.word	0x08003b54

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08003b54 	.word	0x08003b54

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <I2C_Scan>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void I2C_Scan() {
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b096      	sub	sp, #88	; 0x58
 80005ec:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef res;
	char info [] = "Scanning I2C bus..\r\n";
 80005ee:	4b32      	ldr	r3, [pc, #200]	; (80006b8 <I2C_Scan+0xd0>)
 80005f0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80005f4:	461d      	mov	r5, r3
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005fe:	6020      	str	r0, [r4, #0]
 8000600:	3404      	adds	r4, #4
 8000602:	7021      	strb	r1, [r4, #0]
	HAL_UART_Transmit(&huart4, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8000604:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fe19 	bl	8000240 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	4828      	ldr	r0, [pc, #160]	; (80006bc <I2C_Scan+0xd4>)
 800061c:	f002 f9a8 	bl	8002970 <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 8000620:	2300      	movs	r3, #0
 8000622:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000626:	e037      	b.n	8000698 <I2C_Scan+0xb0>
		res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, HAL_MAX_DELAY);
 8000628:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	b299      	uxth	r1, r3
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	2201      	movs	r2, #1
 8000636:	4822      	ldr	r0, [pc, #136]	; (80006c0 <I2C_Scan+0xd8>)
 8000638:	f000 fe70 	bl	800131c <HAL_I2C_IsDeviceReady>
 800063c:	4603      	mov	r3, r0
 800063e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

		if (res == HAL_OK)
 8000642:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000646:	2b00      	cmp	r3, #0
 8000648:	d11a      	bne.n	8000680 <I2C_Scan+0x98>

		{
			char msg[64];
			    	snprintf(msg, sizeof(msg), "0x%02X", i);
 800064a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800064e:	4638      	mov	r0, r7
 8000650:	4a1c      	ldr	r2, [pc, #112]	; (80006c4 <I2C_Scan+0xdc>)
 8000652:	2140      	movs	r1, #64	; 0x40
 8000654:	f002 fe1c 	bl	8003290 <sniprintf>
			    	HAL_UART_Transmit(&huart4, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000658:	463b      	mov	r3, r7
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fdf0 	bl	8000240 <strlen>
 8000660:	4603      	mov	r3, r0
 8000662:	b29a      	uxth	r2, r3
 8000664:	4639      	mov	r1, r7
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	4814      	ldr	r0, [pc, #80]	; (80006bc <I2C_Scan+0xd4>)
 800066c:	f002 f980 	bl	8002970 <HAL_UART_Transmit>
			      	HAL_UART_Transmit(&huart4, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000670:	f04f 33ff 	mov.w	r3, #4294967295
 8000674:	2202      	movs	r2, #2
 8000676:	4914      	ldr	r1, [pc, #80]	; (80006c8 <I2C_Scan+0xe0>)
 8000678:	4810      	ldr	r0, [pc, #64]	; (80006bc <I2C_Scan+0xd4>)
 800067a:	f002 f979 	bl	8002970 <HAL_UART_Transmit>
 800067e:	e006      	b.n	800068e <I2C_Scan+0xa6>
//
//					}
//					printf("\r\n");
		}

		else HAL_UART_Transmit(&huart4, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	2201      	movs	r2, #1
 8000686:	4911      	ldr	r1, [pc, #68]	; (80006cc <I2C_Scan+0xe4>)
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <I2C_Scan+0xd4>)
 800068a:	f002 f971 	bl	8002970 <HAL_UART_Transmit>
	for (uint16_t i = 0; i < 128; i++) {
 800068e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000692:	3301      	adds	r3, #1
 8000694:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8000698:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800069c:	2b7f      	cmp	r3, #127	; 0x7f
 800069e:	d9c3      	bls.n	8000628 <I2C_Scan+0x40>

	}
	HAL_UART_Transmit(&huart4, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295
 80006a4:	2202      	movs	r2, #2
 80006a6:	4908      	ldr	r1, [pc, #32]	; (80006c8 <I2C_Scan+0xe0>)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <I2C_Scan+0xd4>)
 80006aa:	f002 f961 	bl	8002970 <HAL_UART_Transmit>
}
 80006ae:	bf00      	nop
 80006b0:	3758      	adds	r7, #88	; 0x58
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bdb0      	pop	{r4, r5, r7, pc}
 80006b6:	bf00      	nop
 80006b8:	08003b7c 	.word	0x08003b7c
 80006bc:	200000e4 	.word	0x200000e4
 80006c0:	20000098 	.word	0x20000098
 80006c4:	08003b6c 	.word	0x08003b6c
 80006c8:	08003b74 	.word	0x08003b74
 80006cc:	08003b78 	.word	0x08003b78

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09a      	sub	sp, #104	; 0x68
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f000 faa2 	bl	8000c1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f821 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f000 f921 	bl	8000924 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006e2:	f000 f8af 	bl	8000844 <MX_I2C1_Init>
  MX_UART4_Init();
 80006e6:	f000 f8ed 	bl	80008c4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


	sprintf((char*) pTxData, "UART IS WORKS\r\n");
 80006ea:	463b      	mov	r3, r7
 80006ec:	490a      	ldr	r1, [pc, #40]	; (8000718 <main+0x48>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fe02 	bl	80032f8 <siprintf>
	status = HAL_UART_Transmit(&huart4, pTxData, strlen((char*) pTxData), 200);
 80006f4:	463b      	mov	r3, r7
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fda2 	bl	8000240 <strlen>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	4639      	mov	r1, r7
 8000702:	23c8      	movs	r3, #200	; 0xc8
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <main+0x4c>)
 8000706:	f002 f933 	bl	8002970 <HAL_UART_Transmit>
 800070a:	4603      	mov	r3, r0
 800070c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	I2C_Scan();
 8000710:	f7ff ff6a 	bl	80005e8 <I2C_Scan>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000714:	e7fe      	b.n	8000714 <main+0x44>
 8000716:	bf00      	nop
 8000718:	08003b94 	.word	0x08003b94
 800071c:	200000e4 	.word	0x200000e4

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b0b8      	sub	sp, #224	; 0xe0
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800072a:	2234      	movs	r2, #52	; 0x34
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fda6 	bl	8003280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2290      	movs	r2, #144	; 0x90
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f002 fd97 	bl	8003280 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	4b3a      	ldr	r3, [pc, #232]	; (800083c <SystemClock_Config+0x11c>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	4a39      	ldr	r2, [pc, #228]	; (800083c <SystemClock_Config+0x11c>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	6413      	str	r3, [r2, #64]	; 0x40
 800075e:	4b37      	ldr	r3, [pc, #220]	; (800083c <SystemClock_Config+0x11c>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800076a:	4b35      	ldr	r3, [pc, #212]	; (8000840 <SystemClock_Config+0x120>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a34      	ldr	r2, [pc, #208]	; (8000840 <SystemClock_Config+0x120>)
 8000770:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	4b32      	ldr	r3, [pc, #200]	; (8000840 <SystemClock_Config+0x120>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000782:	2302      	movs	r3, #2
 8000784:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078e:	2310      	movs	r3, #16
 8000790:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000794:	2302      	movs	r3, #2
 8000796:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079a:	2300      	movs	r3, #0
 800079c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a0:	2308      	movs	r3, #8
 80007a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007a6:	23d8      	movs	r3, #216	; 0xd8
 80007a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 ffdd 	bl	800177c <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007c8:	f000 f8dc 	bl	8000984 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007cc:	f000 ff86 	bl	80016dc <HAL_PWREx_EnableOverDrive>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007d6:	f000 f8d5 	bl	8000984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2302      	movs	r3, #2
 80007e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000800:	2107      	movs	r1, #7
 8000802:	4618      	mov	r0, r3
 8000804:	f001 fa68 	bl	8001cd8 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800080e:	f000 f8b9 	bl	8000984 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1;
 8000812:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000816:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000818:	2300      	movs	r3, #0
 800081a:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800081c:	2300      	movs	r3, #0
 800081e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	4618      	mov	r0, r3
 8000826:	f001 fc2d 	bl	8002084 <HAL_RCCEx_PeriphCLKConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000830:	f000 f8a8 	bl	8000984 <Error_Handler>
  }
}
 8000834:	bf00      	nop
 8000836:	37e0      	adds	r7, #224	; 0xe0
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000

08000844 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_I2C1_Init+0x74>)
 800084a:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <MX_I2C1_Init+0x78>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_I2C1_Init+0x74>)
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <MX_I2C1_Init+0x7c>)
 8000852:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_I2C1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_I2C1_Init+0x74>)
 800085c:	2201      	movs	r2, #1
 800085e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_I2C1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_I2C1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_I2C1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_I2C1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800087e:	480e      	ldr	r0, [pc, #56]	; (80008b8 <MX_I2C1_Init+0x74>)
 8000880:	f000 fcbc 	bl	80011fc <HAL_I2C_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800088a:	f000 f87b 	bl	8000984 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4809      	ldr	r0, [pc, #36]	; (80008b8 <MX_I2C1_Init+0x74>)
 8000892:	f000 fe8b 	bl	80015ac <HAL_I2CEx_ConfigAnalogFilter>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800089c:	f000 f872 	bl	8000984 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a0:	2100      	movs	r1, #0
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_I2C1_Init+0x74>)
 80008a4:	f000 fecd 	bl	8001642 <HAL_I2CEx_ConfigDigitalFilter>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ae:	f000 f869 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000098 	.word	0x20000098
 80008bc:	40005400 	.word	0x40005400
 80008c0:	20404768 	.word	0x20404768

080008c4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_UART4_Init+0x58>)
 80008ca:	4a15      	ldr	r2, [pc, #84]	; (8000920 <MX_UART4_Init+0x5c>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_UART4_Init+0x58>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_UART4_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_UART4_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_UART4_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_UART4_Init+0x58>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_UART4_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_UART4_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_UART4_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_UART4_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_UART4_Init+0x58>)
 8000908:	f001 ffe4 	bl	80028d4 <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000912:	f000 f837 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000e4 	.word	0x200000e4
 8000920:	40004c00 	.word	0x40004c00

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_GPIO_Init+0x5c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a14      	ldr	r2, [pc, #80]	; (8000980 <MX_GPIO_Init+0x5c>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_GPIO_Init+0x5c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_GPIO_Init+0x5c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <MX_GPIO_Init+0x5c>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_GPIO_Init+0x5c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_GPIO_Init+0x5c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <MX_GPIO_Init+0x5c>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_GPIO_Init+0x5c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

}
 8000972:	bf00      	nop
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <HAL_MspInit+0x44>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <HAL_MspInit+0x44>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <HAL_MspInit+0x44>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_MspInit+0x44>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_MspInit+0x44>)
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_MspInit+0x44>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <HAL_I2C_MspInit+0x7c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d128      	bne.n	8000a4c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <HAL_I2C_MspInit+0x80>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a16      	ldr	r2, [pc, #88]	; (8000a58 <HAL_I2C_MspInit+0x80>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <HAL_I2C_MspInit+0x80>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a18:	2312      	movs	r3, #18
 8000a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a24:	2304      	movs	r3, #4
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480b      	ldr	r0, [pc, #44]	; (8000a5c <HAL_I2C_MspInit+0x84>)
 8000a30:	f000 fa38 	bl	8000ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_I2C_MspInit+0x80>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_I2C_MspInit+0x80>)
 8000a3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_I2C_MspInit+0x80>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	; 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40005400 	.word	0x40005400
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020400 	.word	0x40020400

08000a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a17      	ldr	r2, [pc, #92]	; (8000adc <HAL_UART_MspInit+0x7c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d127      	bne.n	8000ad2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <HAL_UART_MspInit+0x80>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <HAL_UART_MspInit+0x80>)
 8000a88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <HAL_UART_MspInit+0x80>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_UART_MspInit+0x80>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <HAL_UART_MspInit+0x80>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_UART_MspInit+0x80>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <HAL_UART_MspInit+0x84>)
 8000ace:	f000 f9e9 	bl	8000ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	; 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40004c00 	.word	0x40004c00
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b34:	f000 f8b0 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b44:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <_sbrk+0x5c>)
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <_sbrk+0x60>)
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <_sbrk+0x64>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <_sbrk+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d207      	bcs.n	8000b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b6c:	f002 fb5e 	bl	800322c <__errno>
 8000b70:	4603      	mov	r3, r0
 8000b72:	220c      	movs	r2, #12
 8000b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	e009      	b.n	8000b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <_sbrk+0x64>)
 8000b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20080000 	.word	0x20080000
 8000b9c:	00000400 	.word	0x00000400
 8000ba0:	2000008c 	.word	0x2000008c
 8000ba4:	20000180 	.word	0x20000180

08000ba8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <SystemInit+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <SystemInit+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bd2:	490e      	ldr	r1, [pc, #56]	; (8000c0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be8:	4c0b      	ldr	r4, [pc, #44]	; (8000c18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf6:	f7ff ffd7 	bl	8000ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f002 fb1d 	bl	8003238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fd67 	bl	80006d0 <main>
  bx  lr    
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c04:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c10:	08003c00 	.word	0x08003c00
  ldr r2, =_sbss
 8000c14:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c18:	2000017c 	.word	0x2000017c

08000c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC_IRQHandler>

08000c1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c22:	2003      	movs	r0, #3
 8000c24:	f000 f90a 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 f805 	bl	8000c38 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c2e:	f7ff feaf 	bl	8000990 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f917 	bl	8000e8a <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f8ed 	bl	8000e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000168 	.word	0x20000168

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000168 	.word	0x20000168

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <__NVIC_SetPriorityGrouping+0x40>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d02:	4313      	orrs	r3, r2
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <__NVIC_SetPriorityGrouping+0x40>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00
 8000d1c:	05fa0000 	.word	0x05fa0000

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	; (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	; (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	; 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e08:	d301      	bcc.n	8000e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00f      	b.n	8000e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <SysTick_Config+0x40>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e16:	210f      	movs	r1, #15
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f7ff ff8e 	bl	8000d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SysTick_Config+0x40>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SysTick_Config+0x40>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff47 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e64:	f7ff ff5c 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f7ff ff8e 	bl	8000d90 <NVIC_EncodePriority>
 8000e74:	4602      	mov	r2, r0
 8000e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff5d 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffb0 	bl	8000df8 <SysTick_Config>
 8000e98:	4603      	mov	r3, r0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
 8000ec2:	e175      	b.n	80011b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	f040 8164 	bne.w	80011aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d00b      	beq.n	8000f02 <HAL_GPIO_Init+0x5e>
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d007      	beq.n	8000f02 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef6:	2b11      	cmp	r3, #17
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b12      	cmp	r3, #18
 8000f00:	d130      	bne.n	8000f64 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	68da      	ldr	r2, [r3, #12]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	091b      	lsrs	r3, r3, #4
 8000f4e:	f003 0201 	and.w	r2, r3, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x100>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b12      	cmp	r3, #18
 8000fa2:	d123      	bne.n	8000fec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	08da      	lsrs	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	220f      	movs	r2, #15
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	691a      	ldr	r2, [r3, #16]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	69b9      	ldr	r1, [r7, #24]
 8000fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0203 	and.w	r2, r3, #3
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 80be 	beq.w	80011aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	4b66      	ldr	r3, [pc, #408]	; (80011c8 <HAL_GPIO_Init+0x324>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a65      	ldr	r2, [pc, #404]	; (80011c8 <HAL_GPIO_Init+0x324>)
 8001034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b63      	ldr	r3, [pc, #396]	; (80011c8 <HAL_GPIO_Init+0x324>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001046:	4a61      	ldr	r2, [pc, #388]	; (80011cc <HAL_GPIO_Init+0x328>)
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	089b      	lsrs	r3, r3, #2
 800104c:	3302      	adds	r3, #2
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	220f      	movs	r2, #15
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a58      	ldr	r2, [pc, #352]	; (80011d0 <HAL_GPIO_Init+0x32c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d037      	beq.n	80010e2 <HAL_GPIO_Init+0x23e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a57      	ldr	r2, [pc, #348]	; (80011d4 <HAL_GPIO_Init+0x330>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d031      	beq.n	80010de <HAL_GPIO_Init+0x23a>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a56      	ldr	r2, [pc, #344]	; (80011d8 <HAL_GPIO_Init+0x334>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d02b      	beq.n	80010da <HAL_GPIO_Init+0x236>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a55      	ldr	r2, [pc, #340]	; (80011dc <HAL_GPIO_Init+0x338>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d025      	beq.n	80010d6 <HAL_GPIO_Init+0x232>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a54      	ldr	r2, [pc, #336]	; (80011e0 <HAL_GPIO_Init+0x33c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d01f      	beq.n	80010d2 <HAL_GPIO_Init+0x22e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a53      	ldr	r2, [pc, #332]	; (80011e4 <HAL_GPIO_Init+0x340>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d019      	beq.n	80010ce <HAL_GPIO_Init+0x22a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a52      	ldr	r2, [pc, #328]	; (80011e8 <HAL_GPIO_Init+0x344>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0x226>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a51      	ldr	r2, [pc, #324]	; (80011ec <HAL_GPIO_Init+0x348>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d00d      	beq.n	80010c6 <HAL_GPIO_Init+0x222>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a50      	ldr	r2, [pc, #320]	; (80011f0 <HAL_GPIO_Init+0x34c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d007      	beq.n	80010c2 <HAL_GPIO_Init+0x21e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4f      	ldr	r2, [pc, #316]	; (80011f4 <HAL_GPIO_Init+0x350>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <HAL_GPIO_Init+0x21a>
 80010ba:	2309      	movs	r3, #9
 80010bc:	e012      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010be:	230a      	movs	r3, #10
 80010c0:	e010      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010c2:	2308      	movs	r3, #8
 80010c4:	e00e      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010c6:	2307      	movs	r3, #7
 80010c8:	e00c      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010ca:	2306      	movs	r3, #6
 80010cc:	e00a      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010ce:	2305      	movs	r3, #5
 80010d0:	e008      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010d2:	2304      	movs	r3, #4
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010d6:	2303      	movs	r3, #3
 80010d8:	e004      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010da:	2302      	movs	r3, #2
 80010dc:	e002      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010e2:	2300      	movs	r3, #0
 80010e4:	69fa      	ldr	r2, [r7, #28]
 80010e6:	f002 0203 	and.w	r2, r2, #3
 80010ea:	0092      	lsls	r2, r2, #2
 80010ec:	4093      	lsls	r3, r2
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010f4:	4935      	ldr	r1, [pc, #212]	; (80011cc <HAL_GPIO_Init+0x328>)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	3302      	adds	r3, #2
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001102:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <HAL_GPIO_Init+0x354>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001126:	4a34      	ldr	r2, [pc, #208]	; (80011f8 <HAL_GPIO_Init+0x354>)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800112c:	4b32      	ldr	r3, [pc, #200]	; (80011f8 <HAL_GPIO_Init+0x354>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001150:	4a29      	ldr	r2, [pc, #164]	; (80011f8 <HAL_GPIO_Init+0x354>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001156:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <HAL_GPIO_Init+0x354>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117a:	4a1f      	ldr	r2, [pc, #124]	; (80011f8 <HAL_GPIO_Init+0x354>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <HAL_GPIO_Init+0x354>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a4:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <HAL_GPIO_Init+0x354>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3301      	adds	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	2b0f      	cmp	r3, #15
 80011b4:	f67f ae86 	bls.w	8000ec4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3724      	adds	r7, #36	; 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40013800 	.word	0x40013800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40020c00 	.word	0x40020c00
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40021400 	.word	0x40021400
 80011e8:	40021800 	.word	0x40021800
 80011ec:	40021c00 	.word	0x40021c00
 80011f0:	40022000 	.word	0x40022000
 80011f4:	40022400 	.word	0x40022400
 80011f8:	40013c00 	.word	0x40013c00

080011fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e07f      	b.n	800130e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d106      	bne.n	8001228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fbd8 	bl	80009d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2224      	movs	r2, #36	; 0x24
 800122c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0201 	bic.w	r2, r2, #1
 800123e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800124c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800125c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d107      	bne.n	8001276 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	e006      	b.n	8001284 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001282:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d104      	bne.n	8001296 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001294:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6859      	ldr	r1, [r3, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_I2C_Init+0x11c>)
 80012a2:	430b      	orrs	r3, r1
 80012a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691a      	ldr	r2, [r3, #16]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	ea42 0103 	orr.w	r1, r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	021a      	lsls	r2, r3, #8
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69d9      	ldr	r1, [r3, #28]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a1a      	ldr	r2, [r3, #32]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0201 	orr.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2220      	movs	r2, #32
 80012fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	02008000 	.word	0x02008000

0800131c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af02      	add	r7, sp, #8
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	460b      	mov	r3, r1
 800132a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b20      	cmp	r3, #32
 800133a:	f040 80ef 	bne.w	800151c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800134c:	d101      	bne.n	8001352 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800134e:	2302      	movs	r3, #2
 8001350:	e0e5      	b.n	800151e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001358:	2b01      	cmp	r3, #1
 800135a:	d101      	bne.n	8001360 <HAL_I2C_IsDeviceReady+0x44>
 800135c:	2302      	movs	r3, #2
 800135e:	e0de      	b.n	800151e <HAL_I2C_IsDeviceReady+0x202>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2224      	movs	r2, #36	; 0x24
 800136c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2200      	movs	r2, #0
 8001374:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d105      	bne.n	800138a <HAL_I2C_IsDeviceReady+0x6e>
 800137e:	897b      	ldrh	r3, [r7, #10]
 8001380:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001384:	4b68      	ldr	r3, [pc, #416]	; (8001528 <HAL_I2C_IsDeviceReady+0x20c>)
 8001386:	4313      	orrs	r3, r2
 8001388:	e004      	b.n	8001394 <HAL_I2C_IsDeviceReady+0x78>
 800138a:	897b      	ldrh	r3, [r7, #10]
 800138c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001390:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800139a:	f7ff fc91 	bl	8000cc0 <HAL_GetTick>
 800139e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f003 0320 	and.w	r3, r3, #32
 80013aa:	2b20      	cmp	r3, #32
 80013ac:	bf0c      	ite	eq
 80013ae:	2301      	moveq	r3, #1
 80013b0:	2300      	movne	r3, #0
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	2b10      	cmp	r3, #16
 80013c2:	bf0c      	ite	eq
 80013c4:	2301      	moveq	r3, #1
 80013c6:	2300      	movne	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80013cc:	e034      	b.n	8001438 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d4:	d01a      	beq.n	800140c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80013d6:	f7ff fc73 	bl	8000cc0 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d302      	bcc.n	80013ec <HAL_I2C_IsDeviceReady+0xd0>
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10f      	bne.n	800140c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2220      	movs	r2, #32
 80013f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f8:	f043 0220 	orr.w	r2, r3, #32
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e088      	b.n	800151e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f003 0320 	and.w	r3, r3, #32
 8001416:	2b20      	cmp	r3, #32
 8001418:	bf0c      	ite	eq
 800141a:	2301      	moveq	r3, #1
 800141c:	2300      	movne	r3, #0
 800141e:	b2db      	uxtb	r3, r3
 8001420:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0310 	and.w	r3, r3, #16
 800142c:	2b10      	cmp	r3, #16
 800142e:	bf0c      	ite	eq
 8001430:	2301      	moveq	r3, #1
 8001432:	2300      	movne	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001438:	7ffb      	ldrb	r3, [r7, #31]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <HAL_I2C_IsDeviceReady+0x128>
 800143e:	7fbb      	ldrb	r3, [r7, #30]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0c4      	beq.n	80013ce <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b10      	cmp	r3, #16
 8001450:	d01a      	beq.n	8001488 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	2120      	movs	r1, #32
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f000 f865 	bl	800152c <I2C_WaitOnFlagUntilTimeout>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e058      	b.n	800151e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2220      	movs	r2, #32
 8001472:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2220      	movs	r2, #32
 8001478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	e04a      	b.n	800151e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2200      	movs	r2, #0
 8001490:	2120      	movs	r1, #32
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f000 f84a 	bl	800152c <I2C_WaitOnFlagUntilTimeout>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e03d      	b.n	800151e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2210      	movs	r2, #16
 80014a8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2220      	movs	r2, #32
 80014b0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d118      	bne.n	80014ec <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014c8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2200      	movs	r2, #0
 80014d2:	2120      	movs	r1, #32
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f000 f829 	bl	800152c <I2C_WaitOnFlagUntilTimeout>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e01c      	b.n	800151e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2220      	movs	r2, #32
 80014ea:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	3301      	adds	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	f63f af3d 	bhi.w	8001376 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2220      	movs	r2, #32
 8001500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001508:	f043 0220 	orr.w	r2, r3, #32
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800151c:	2302      	movs	r3, #2
  }
}
 800151e:	4618      	mov	r0, r3
 8001520:	3720      	adds	r7, #32
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	02002000 	.word	0x02002000

0800152c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	4613      	mov	r3, r2
 800153a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800153c:	e022      	b.n	8001584 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001544:	d01e      	beq.n	8001584 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001546:	f7ff fbbb 	bl	8000cc0 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d302      	bcc.n	800155c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d113      	bne.n	8001584 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	f043 0220 	orr.w	r2, r3, #32
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2220      	movs	r2, #32
 800156c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e00f      	b.n	80015a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	699a      	ldr	r2, [r3, #24]
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	4013      	ands	r3, r2
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	429a      	cmp	r2, r3
 8001592:	bf0c      	ite	eq
 8001594:	2301      	moveq	r3, #1
 8001596:	2300      	movne	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d0cd      	beq.n	800153e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b20      	cmp	r3, #32
 80015c0:	d138      	bne.n	8001634 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e032      	b.n	8001636 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2224      	movs	r2, #36	; 0x24
 80015dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0201 	bic.w	r2, r2, #1
 80015ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6819      	ldr	r1, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0201 	orr.w	r2, r2, #1
 800161e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2220      	movs	r2, #32
 8001624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	e000      	b.n	8001636 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001634:	2302      	movs	r3, #2
  }
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b20      	cmp	r3, #32
 8001656:	d139      	bne.n	80016cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001662:	2302      	movs	r3, #2
 8001664:	e033      	b.n	80016ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2224      	movs	r2, #36	; 0x24
 8001672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0201 	bic.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001694:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2220      	movs	r2, #32
 80016bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	e000      	b.n	80016ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80016cc:	2302      	movs	r3, #2
  }
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b23      	ldr	r3, [pc, #140]	; (8001774 <HAL_PWREx_EnableOverDrive+0x98>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	4a22      	ldr	r2, [pc, #136]	; (8001774 <HAL_PWREx_EnableOverDrive+0x98>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	6413      	str	r3, [r2, #64]	; 0x40
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_PWREx_EnableOverDrive+0x98>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80016fe:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a1d      	ldr	r2, [pc, #116]	; (8001778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800170a:	f7ff fad9 	bl	8000cc0 <HAL_GetTick>
 800170e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001710:	e009      	b.n	8001726 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001712:	f7ff fad5 	bl	8000cc0 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001720:	d901      	bls.n	8001726 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e022      	b.n	800176c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001732:	d1ee      	bne.n	8001712 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <HAL_PWREx_EnableOverDrive+0x9c>)
 800173a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001740:	f7ff fabe 	bl	8000cc0 <HAL_GetTick>
 8001744:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001746:	e009      	b.n	800175c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001748:	f7ff faba 	bl	8000cc0 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001756:	d901      	bls.n	800175c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e007      	b.n	800176c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_PWREx_EnableOverDrive+0x9c>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001768:	d1ee      	bne.n	8001748 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40023800 	.word	0x40023800
 8001778:	40007000 	.word	0x40007000

0800177c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e29b      	b.n	8001cca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 8087 	beq.w	80018ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a0:	4b96      	ldr	r3, [pc, #600]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d00c      	beq.n	80017c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ac:	4b93      	ldr	r3, [pc, #588]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d112      	bne.n	80017de <HAL_RCC_OscConfig+0x62>
 80017b8:	4b90      	ldr	r3, [pc, #576]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017c4:	d10b      	bne.n	80017de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c6:	4b8d      	ldr	r3, [pc, #564]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d06c      	beq.n	80018ac <HAL_RCC_OscConfig+0x130>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d168      	bne.n	80018ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e275      	b.n	8001cca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e6:	d106      	bne.n	80017f6 <HAL_RCC_OscConfig+0x7a>
 80017e8:	4b84      	ldr	r3, [pc, #528]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a83      	ldr	r2, [pc, #524]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 80017ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	e02e      	b.n	8001854 <HAL_RCC_OscConfig+0xd8>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10c      	bne.n	8001818 <HAL_RCC_OscConfig+0x9c>
 80017fe:	4b7f      	ldr	r3, [pc, #508]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a7e      	ldr	r2, [pc, #504]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 8001804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	4b7c      	ldr	r3, [pc, #496]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a7b      	ldr	r2, [pc, #492]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 8001810:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e01d      	b.n	8001854 <HAL_RCC_OscConfig+0xd8>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0xc0>
 8001822:	4b76      	ldr	r3, [pc, #472]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a75      	ldr	r2, [pc, #468]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 8001828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b73      	ldr	r3, [pc, #460]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a72      	ldr	r2, [pc, #456]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 8001834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e00b      	b.n	8001854 <HAL_RCC_OscConfig+0xd8>
 800183c:	4b6f      	ldr	r3, [pc, #444]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a6e      	ldr	r2, [pc, #440]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 8001842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b6c      	ldr	r3, [pc, #432]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a6b      	ldr	r2, [pc, #428]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 800184e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d013      	beq.n	8001884 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff fa30 	bl	8000cc0 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001864:	f7ff fa2c 	bl	8000cc0 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e229      	b.n	8001cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	4b61      	ldr	r3, [pc, #388]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0xe8>
 8001882:	e014      	b.n	80018ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff fa1c 	bl	8000cc0 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fa18 	bl	8000cc0 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e215      	b.n	8001cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189e:	4b57      	ldr	r3, [pc, #348]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x110>
 80018aa:	e000      	b.n	80018ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d069      	beq.n	800198e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ba:	4b50      	ldr	r3, [pc, #320]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c6:	4b4d      	ldr	r3, [pc, #308]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d11c      	bne.n	800190c <HAL_RCC_OscConfig+0x190>
 80018d2:	4b4a      	ldr	r3, [pc, #296]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d116      	bne.n	800190c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018de:	4b47      	ldr	r3, [pc, #284]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <HAL_RCC_OscConfig+0x17a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d001      	beq.n	80018f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e1e9      	b.n	8001cca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f6:	4b41      	ldr	r3, [pc, #260]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	493d      	ldr	r1, [pc, #244]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190a:	e040      	b.n	800198e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d023      	beq.n	800195c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001914:	4b39      	ldr	r3, [pc, #228]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a38      	ldr	r2, [pc, #224]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff f9ce 	bl	8000cc0 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001928:	f7ff f9ca 	bl	8000cc0 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e1c7      	b.n	8001cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193a:	4b30      	ldr	r3, [pc, #192]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4929      	ldr	r1, [pc, #164]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 8001956:	4313      	orrs	r3, r2
 8001958:	600b      	str	r3, [r1, #0]
 800195a:	e018      	b.n	800198e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195c:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a26      	ldr	r2, [pc, #152]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001968:	f7ff f9aa 	bl	8000cc0 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001970:	f7ff f9a6 	bl	8000cc0 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e1a3      	b.n	8001cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001982:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d038      	beq.n	8001a0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d019      	beq.n	80019d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 80019a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019a6:	4a15      	ldr	r2, [pc, #84]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ae:	f7ff f987 	bl	8000cc0 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b6:	f7ff f983 	bl	8000cc0 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e180      	b.n	8001cca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 80019ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x23a>
 80019d4:	e01a      	b.n	8001a0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 80019d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019da:	4a08      	ldr	r2, [pc, #32]	; (80019fc <HAL_RCC_OscConfig+0x280>)
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e2:	f7ff f96d 	bl	8000cc0 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e8:	e00a      	b.n	8001a00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ea:	f7ff f969 	bl	8000cc0 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d903      	bls.n	8001a00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e166      	b.n	8001cca <HAL_RCC_OscConfig+0x54e>
 80019fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a00:	4b92      	ldr	r3, [pc, #584]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1ee      	bne.n	80019ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80a4 	beq.w	8001b62 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a1a:	4b8c      	ldr	r3, [pc, #560]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10d      	bne.n	8001a42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	4b89      	ldr	r3, [pc, #548]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a88      	ldr	r2, [pc, #544]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b86      	ldr	r3, [pc, #536]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a42:	4b83      	ldr	r3, [pc, #524]	; (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d118      	bne.n	8001a80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a4e:	4b80      	ldr	r3, [pc, #512]	; (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a7f      	ldr	r2, [pc, #508]	; (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f931 	bl	8000cc0 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a62:	f7ff f92d 	bl	8000cc0 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b64      	cmp	r3, #100	; 0x64
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e12a      	b.n	8001cca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a74:	4b76      	ldr	r3, [pc, #472]	; (8001c50 <HAL_RCC_OscConfig+0x4d4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x31a>
 8001a88:	4b70      	ldr	r3, [pc, #448]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8c:	4a6f      	ldr	r2, [pc, #444]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6713      	str	r3, [r2, #112]	; 0x70
 8001a94:	e02d      	b.n	8001af2 <HAL_RCC_OscConfig+0x376>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x33c>
 8001a9e:	4b6b      	ldr	r3, [pc, #428]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa2:	4a6a      	ldr	r2, [pc, #424]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8001aaa:	4b68      	ldr	r3, [pc, #416]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aae:	4a67      	ldr	r2, [pc, #412]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001ab0:	f023 0304 	bic.w	r3, r3, #4
 8001ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab6:	e01c      	b.n	8001af2 <HAL_RCC_OscConfig+0x376>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b05      	cmp	r3, #5
 8001abe:	d10c      	bne.n	8001ada <HAL_RCC_OscConfig+0x35e>
 8001ac0:	4b62      	ldr	r3, [pc, #392]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac4:	4a61      	ldr	r2, [pc, #388]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001ac6:	f043 0304 	orr.w	r3, r3, #4
 8001aca:	6713      	str	r3, [r2, #112]	; 0x70
 8001acc:	4b5f      	ldr	r3, [pc, #380]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad0:	4a5e      	ldr	r2, [pc, #376]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad8:	e00b      	b.n	8001af2 <HAL_RCC_OscConfig+0x376>
 8001ada:	4b5c      	ldr	r3, [pc, #368]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ade:	4a5b      	ldr	r2, [pc, #364]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae6:	4b59      	ldr	r3, [pc, #356]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aea:	4a58      	ldr	r2, [pc, #352]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001aec:	f023 0304 	bic.w	r3, r3, #4
 8001af0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d015      	beq.n	8001b26 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afa:	f7ff f8e1 	bl	8000cc0 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b00:	e00a      	b.n	8001b18 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b02:	f7ff f8dd 	bl	8000cc0 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e0d8      	b.n	8001cca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b18:	4b4c      	ldr	r3, [pc, #304]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0ee      	beq.n	8001b02 <HAL_RCC_OscConfig+0x386>
 8001b24:	e014      	b.n	8001b50 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b26:	f7ff f8cb 	bl	8000cc0 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2c:	e00a      	b.n	8001b44 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2e:	f7ff f8c7 	bl	8000cc0 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e0c2      	b.n	8001cca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b44:	4b41      	ldr	r3, [pc, #260]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1ee      	bne.n	8001b2e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d105      	bne.n	8001b62 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a3c      	ldr	r2, [pc, #240]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 80ae 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b6c:	4b37      	ldr	r3, [pc, #220]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d06d      	beq.n	8001c54 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d14b      	bne.n	8001c18 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b80:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a31      	ldr	r2, [pc, #196]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f898 	bl	8000cc0 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b94:	f7ff f894 	bl	8000cc0 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e091      	b.n	8001cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba6:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69da      	ldr	r2, [r3, #28]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	019b      	lsls	r3, r3, #6
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	041b      	lsls	r3, r3, #16
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	071b      	lsls	r3, r3, #28
 8001bde:	491b      	ldr	r1, [pc, #108]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a18      	ldr	r2, [pc, #96]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f866 	bl	8000cc0 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7ff f862 	bl	8000cc0 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e05f      	b.n	8001cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x47c>
 8001c16:	e057      	b.n	8001cc8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001c1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7ff f84c 	bl	8000cc0 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7ff f848 	bl	8000cc0 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e045      	b.n	8001cca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3e:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_RCC_OscConfig+0x4d0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x4b0>
 8001c4a:	e03d      	b.n	8001cc8 <HAL_RCC_OscConfig+0x54c>
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c54:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <HAL_RCC_OscConfig+0x558>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d030      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d129      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d122      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c84:	4013      	ands	r3, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c8a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d119      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	085b      	lsrs	r3, r3, #1
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d10f      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800

08001cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0d0      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf0:	4b6a      	ldr	r3, [pc, #424]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d910      	bls.n	8001d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfe:	4b67      	ldr	r3, [pc, #412]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 020f 	bic.w	r2, r3, #15
 8001d06:	4965      	ldr	r1, [pc, #404]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0e:	4b63      	ldr	r3, [pc, #396]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0b8      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d020      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d38:	4b59      	ldr	r3, [pc, #356]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4a58      	ldr	r2, [pc, #352]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d50:	4b53      	ldr	r3, [pc, #332]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	4a52      	ldr	r2, [pc, #328]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5c:	4b50      	ldr	r3, [pc, #320]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	494d      	ldr	r1, [pc, #308]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d040      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d107      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d115      	bne.n	8001dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e07f      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9a:	4b41      	ldr	r3, [pc, #260]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d109      	bne.n	8001dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e073      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001daa:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e06b      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dba:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f023 0203 	bic.w	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4936      	ldr	r1, [pc, #216]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dcc:	f7fe ff78 	bl	8000cc0 <HAL_GetTick>
 8001dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd4:	f7fe ff74 	bl	8000cc0 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e053      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 020c 	and.w	r2, r3, #12
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d1eb      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d210      	bcs.n	8001e2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 020f 	bic.w	r2, r3, #15
 8001e12:	4922      	ldr	r1, [pc, #136]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e032      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e38:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4916      	ldr	r1, [pc, #88]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d009      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	490e      	ldr	r1, [pc, #56]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e6a:	f000 f821 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	490a      	ldr	r1, [pc, #40]	; (8001ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8001e7c:	5ccb      	ldrb	r3, [r1, r3]
 8001e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e82:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8001e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_RCC_ClockConfig+0x1d4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fed4 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023c00 	.word	0x40023c00
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	08003ba4 	.word	0x08003ba4
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	20000004 	.word	0x20000004

08001eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	6079      	str	r1, [r7, #4]
 8001eba:	2100      	movs	r1, #0
 8001ebc:	60f9      	str	r1, [r7, #12]
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ec6:	4952      	ldr	r1, [pc, #328]	; (8002010 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ec8:	6889      	ldr	r1, [r1, #8]
 8001eca:	f001 010c 	and.w	r1, r1, #12
 8001ece:	2908      	cmp	r1, #8
 8001ed0:	d00d      	beq.n	8001eee <HAL_RCC_GetSysClockFreq+0x3e>
 8001ed2:	2908      	cmp	r1, #8
 8001ed4:	f200 8094 	bhi.w	8002000 <HAL_RCC_GetSysClockFreq+0x150>
 8001ed8:	2900      	cmp	r1, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x32>
 8001edc:	2904      	cmp	r1, #4
 8001ede:	d003      	beq.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x38>
 8001ee0:	e08e      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ee2:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <HAL_RCC_GetSysClockFreq+0x164>)
 8001ee4:	60bb      	str	r3, [r7, #8]
      break;
 8001ee6:	e08e      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ee8:	4b4b      	ldr	r3, [pc, #300]	; (8002018 <HAL_RCC_GetSysClockFreq+0x168>)
 8001eea:	60bb      	str	r3, [r7, #8]
      break;
 8001eec:	e08b      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eee:	4948      	ldr	r1, [pc, #288]	; (8002010 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ef0:	6849      	ldr	r1, [r1, #4]
 8001ef2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001ef6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ef8:	4945      	ldr	r1, [pc, #276]	; (8002010 <HAL_RCC_GetSysClockFreq+0x160>)
 8001efa:	6849      	ldr	r1, [r1, #4]
 8001efc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001f00:	2900      	cmp	r1, #0
 8001f02:	d024      	beq.n	8001f4e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f04:	4942      	ldr	r1, [pc, #264]	; (8002010 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f06:	6849      	ldr	r1, [r1, #4]
 8001f08:	0989      	lsrs	r1, r1, #6
 8001f0a:	4608      	mov	r0, r1
 8001f0c:	f04f 0100 	mov.w	r1, #0
 8001f10:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001f14:	f04f 0500 	mov.w	r5, #0
 8001f18:	ea00 0204 	and.w	r2, r0, r4
 8001f1c:	ea01 0305 	and.w	r3, r1, r5
 8001f20:	493d      	ldr	r1, [pc, #244]	; (8002018 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f22:	fb01 f003 	mul.w	r0, r1, r3
 8001f26:	2100      	movs	r1, #0
 8001f28:	fb01 f102 	mul.w	r1, r1, r2
 8001f2c:	1844      	adds	r4, r0, r1
 8001f2e:	493a      	ldr	r1, [pc, #232]	; (8002018 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f30:	fba2 0101 	umull	r0, r1, r2, r1
 8001f34:	1863      	adds	r3, r4, r1
 8001f36:	4619      	mov	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	f7fe f9d6 	bl	80002f0 <__aeabi_uldivmod>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4613      	mov	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	e04a      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f4e:	4b30      	ldr	r3, [pc, #192]	; (8002010 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	099b      	lsrs	r3, r3, #6
 8001f54:	461a      	mov	r2, r3
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f5e:	f04f 0100 	mov.w	r1, #0
 8001f62:	ea02 0400 	and.w	r4, r2, r0
 8001f66:	ea03 0501 	and.w	r5, r3, r1
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	014b      	lsls	r3, r1, #5
 8001f78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f7c:	0142      	lsls	r2, r0, #5
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	1b00      	subs	r0, r0, r4
 8001f84:	eb61 0105 	sbc.w	r1, r1, r5
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	018b      	lsls	r3, r1, #6
 8001f92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f96:	0182      	lsls	r2, r0, #6
 8001f98:	1a12      	subs	r2, r2, r0
 8001f9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f9e:	f04f 0000 	mov.w	r0, #0
 8001fa2:	f04f 0100 	mov.w	r1, #0
 8001fa6:	00d9      	lsls	r1, r3, #3
 8001fa8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fac:	00d0      	lsls	r0, r2, #3
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	1912      	adds	r2, r2, r4
 8001fb4:	eb45 0303 	adc.w	r3, r5, r3
 8001fb8:	f04f 0000 	mov.w	r0, #0
 8001fbc:	f04f 0100 	mov.w	r1, #0
 8001fc0:	0299      	lsls	r1, r3, #10
 8001fc2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001fc6:	0290      	lsls	r0, r2, #10
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	f7fe f98a 	bl	80002f0 <__aeabi_uldivmod>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	0c1b      	lsrs	r3, r3, #16
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffc:	60bb      	str	r3, [r7, #8]
      break;
 8001ffe:	e002      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <HAL_RCC_GetSysClockFreq+0x164>)
 8002002:	60bb      	str	r3, [r7, #8]
      break;
 8002004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002006:	68bb      	ldr	r3, [r7, #8]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bdb0      	pop	{r4, r5, r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	00f42400 	.word	0x00f42400
 8002018:	017d7840 	.word	0x017d7840

0800201c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <HAL_RCC_GetHCLKFreq+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000000 	.word	0x20000000

08002034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002038:	f7ff fff0 	bl	800201c <HAL_RCC_GetHCLKFreq>
 800203c:	4602      	mov	r2, r0
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	0a9b      	lsrs	r3, r3, #10
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	4903      	ldr	r1, [pc, #12]	; (8002058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40023800 	.word	0x40023800
 8002058:	08003bb4 	.word	0x08003bb4

0800205c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002060:	f7ff ffdc 	bl	800201c <HAL_RCC_GetHCLKFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	0b5b      	lsrs	r3, r3, #13
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	4903      	ldr	r1, [pc, #12]	; (8002080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002078:	4618      	mov	r0, r3
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40023800 	.word	0x40023800
 8002080:	08003bb4 	.word	0x08003bb4

08002084 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d012      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020ac:	4b69      	ldr	r3, [pc, #420]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4a68      	ldr	r2, [pc, #416]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020b6:	6093      	str	r3, [r2, #8]
 80020b8:	4b66      	ldr	r3, [pc, #408]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c0:	4964      	ldr	r1, [pc, #400]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80020ce:	2301      	movs	r3, #1
 80020d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d017      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020de:	4b5d      	ldr	r3, [pc, #372]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ec:	4959      	ldr	r1, [pc, #356]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020fc:	d101      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80020fe:	2301      	movs	r3, #1
 8002100:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800210a:	2301      	movs	r3, #1
 800210c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d017      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800211a:	4b4e      	ldr	r3, [pc, #312]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002120:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	494a      	ldr	r1, [pc, #296]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002138:	d101      	bne.n	800213e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800213a:	2301      	movs	r3, #1
 800213c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002146:	2301      	movs	r3, #1
 8002148:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002156:	2301      	movs	r3, #1
 8002158:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 808b 	beq.w	800227e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002168:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	4a39      	ldr	r2, [pc, #228]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800216e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002172:	6413      	str	r3, [r2, #64]	; 0x40
 8002174:	4b37      	ldr	r3, [pc, #220]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002180:	4b35      	ldr	r3, [pc, #212]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a34      	ldr	r2, [pc, #208]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800218c:	f7fe fd98 	bl	8000cc0 <HAL_GetTick>
 8002190:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002194:	f7fe fd94 	bl	8000cc0 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e38f      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021a6:	4b2c      	ldr	r3, [pc, #176]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021b2:	4b28      	ldr	r3, [pc, #160]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d035      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d02e      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021d0:	4b20      	ldr	r3, [pc, #128]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021de:	4a1d      	ldr	r2, [pc, #116]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	4a1a      	ldr	r2, [pc, #104]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80021f2:	4a18      	ldr	r2, [pc, #96]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021f8:	4b16      	ldr	r3, [pc, #88]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d114      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7fe fd5c 	bl	8000cc0 <HAL_GetTick>
 8002208:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220a:	e00a      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220c:	f7fe fd58 	bl	8000cc0 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e351      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0ee      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002236:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800223a:	d111      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800224a:	400b      	ands	r3, r1
 800224c:	4901      	ldr	r1, [pc, #4]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800224e:	4313      	orrs	r3, r2
 8002250:	608b      	str	r3, [r1, #8]
 8002252:	e00b      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002254:	40023800 	.word	0x40023800
 8002258:	40007000 	.word	0x40007000
 800225c:	0ffffcff 	.word	0x0ffffcff
 8002260:	4bb3      	ldr	r3, [pc, #716]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4ab2      	ldr	r2, [pc, #712]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002266:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800226a:	6093      	str	r3, [r2, #8]
 800226c:	4bb0      	ldr	r3, [pc, #704]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800226e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002278:	49ad      	ldr	r1, [pc, #692]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800227a:	4313      	orrs	r3, r2
 800227c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b00      	cmp	r3, #0
 8002288:	d010      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800228a:	4ba9      	ldr	r3, [pc, #676]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800228c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002290:	4aa7      	ldr	r2, [pc, #668]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002296:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800229a:	4ba5      	ldr	r3, [pc, #660]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800229c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a4:	49a2      	ldr	r1, [pc, #648]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022b8:	4b9d      	ldr	r3, [pc, #628]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022c6:	499a      	ldr	r1, [pc, #616]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022da:	4b95      	ldr	r3, [pc, #596]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022e8:	4991      	ldr	r1, [pc, #580]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022fc:	4b8c      	ldr	r3, [pc, #560]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002302:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800230a:	4989      	ldr	r1, [pc, #548]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800231e:	4b84      	ldr	r3, [pc, #528]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232c:	4980      	ldr	r1, [pc, #512]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002340:	4b7b      	ldr	r3, [pc, #492]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	f023 0203 	bic.w	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	4978      	ldr	r1, [pc, #480]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002362:	4b73      	ldr	r3, [pc, #460]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002368:	f023 020c 	bic.w	r2, r3, #12
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002370:	496f      	ldr	r1, [pc, #444]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002384:	4b6a      	ldr	r3, [pc, #424]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002392:	4967      	ldr	r1, [pc, #412]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023a6:	4b62      	ldr	r3, [pc, #392]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b4:	495e      	ldr	r1, [pc, #376]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00a      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023c8:	4b59      	ldr	r3, [pc, #356]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d6:	4956      	ldr	r1, [pc, #344]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80023ea:	4b51      	ldr	r3, [pc, #324]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f8:	494d      	ldr	r1, [pc, #308]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800240c:	4b48      	ldr	r3, [pc, #288]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002412:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241a:	4945      	ldr	r1, [pc, #276]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800242e:	4b40      	ldr	r3, [pc, #256]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002434:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243c:	493c      	ldr	r1, [pc, #240]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00a      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002450:	4b37      	ldr	r3, [pc, #220]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002456:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800245e:	4934      	ldr	r1, [pc, #208]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d011      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002472:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002478:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002480:	492b      	ldr	r1, [pc, #172]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800248c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002490:	d101      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002492:	2301      	movs	r3, #1
 8002494:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80024a2:	2301      	movs	r3, #1
 80024a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024b2:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c0:	491b      	ldr	r1, [pc, #108]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00b      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024d4:	4b16      	ldr	r3, [pc, #88]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024e4:	4912      	ldr	r1, [pc, #72]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00b      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80024f8:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002508:	4909      	ldr	r1, [pc, #36]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00f      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800251e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002522:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252c:	e002      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800
 8002534:	4986      	ldr	r1, [pc, #536]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00b      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002548:	4b81      	ldr	r3, [pc, #516]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800254a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800254e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002558:	497d      	ldr	r1, [pc, #500]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d006      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 80d6 	beq.w	8002720 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002574:	4b76      	ldr	r3, [pc, #472]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a75      	ldr	r2, [pc, #468]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800257a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800257e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002580:	f7fe fb9e 	bl	8000cc0 <HAL_GetTick>
 8002584:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002588:	f7fe fb9a 	bl	8000cc0 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	; 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e195      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800259a:	4b6d      	ldr	r3, [pc, #436]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d021      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d11d      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025ba:	4b65      	ldr	r3, [pc, #404]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025c0:	0c1b      	lsrs	r3, r3, #16
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025c8:	4b61      	ldr	r3, [pc, #388]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ce:	0e1b      	lsrs	r3, r3, #24
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	019a      	lsls	r2, r3, #6
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	041b      	lsls	r3, r3, #16
 80025e0:	431a      	orrs	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	061b      	lsls	r3, r3, #24
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	071b      	lsls	r3, r3, #28
 80025ee:	4958      	ldr	r1, [pc, #352]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002614:	2b00      	cmp	r3, #0
 8002616:	d02e      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002620:	d129      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002622:	4b4b      	ldr	r3, [pc, #300]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002628:	0c1b      	lsrs	r3, r3, #16
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002630:	4b47      	ldr	r3, [pc, #284]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002636:	0f1b      	lsrs	r3, r3, #28
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	019a      	lsls	r2, r3, #6
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	041b      	lsls	r3, r3, #16
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	061b      	lsls	r3, r3, #24
 8002650:	431a      	orrs	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	071b      	lsls	r3, r3, #28
 8002656:	493e      	ldr	r1, [pc, #248]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800265e:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002664:	f023 021f 	bic.w	r2, r3, #31
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	3b01      	subs	r3, #1
 800266e:	4938      	ldr	r1, [pc, #224]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d01d      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002682:	4b33      	ldr	r3, [pc, #204]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002688:	0e1b      	lsrs	r3, r3, #24
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002690:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002696:	0f1b      	lsrs	r3, r3, #28
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	019a      	lsls	r2, r3, #6
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	041b      	lsls	r3, r3, #16
 80026aa:	431a      	orrs	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	061b      	lsls	r3, r3, #24
 80026b0:	431a      	orrs	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	071b      	lsls	r3, r3, #28
 80026b6:	4926      	ldr	r1, [pc, #152]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d011      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	019a      	lsls	r2, r3, #6
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	041b      	lsls	r3, r3, #16
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	071b      	lsls	r3, r3, #28
 80026e6:	491a      	ldr	r1, [pc, #104]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a17      	ldr	r2, [pc, #92]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026fa:	f7fe fae1 	bl	8000cc0 <HAL_GetTick>
 80026fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002702:	f7fe fadd 	bl	8000cc0 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b64      	cmp	r3, #100	; 0x64
 800270e:	d901      	bls.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e0d8      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002714:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	2b01      	cmp	r3, #1
 8002724:	f040 80ce 	bne.w	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a08      	ldr	r2, [pc, #32]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800272e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002734:	f7fe fac4 	bl	8000cc0 <HAL_GetTick>
 8002738:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800273a:	e00b      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800273c:	f7fe fac0 	bl	8000cc0 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d904      	bls.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e0bb      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002754:	4b5e      	ldr	r3, [pc, #376]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800275c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002760:	d0ec      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800277e:	2b00      	cmp	r3, #0
 8002780:	d02e      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	2b00      	cmp	r3, #0
 8002788:	d12a      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800278a:	4b51      	ldr	r3, [pc, #324]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002790:	0c1b      	lsrs	r3, r3, #16
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002798:	4b4d      	ldr	r3, [pc, #308]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	0f1b      	lsrs	r3, r3, #28
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	019a      	lsls	r2, r3, #6
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	041b      	lsls	r3, r3, #16
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	061b      	lsls	r3, r3, #24
 80027b8:	431a      	orrs	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	071b      	lsls	r3, r3, #28
 80027be:	4944      	ldr	r1, [pc, #272]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027c6:	4b42      	ldr	r3, [pc, #264]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	3b01      	subs	r3, #1
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	493d      	ldr	r1, [pc, #244]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d022      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027f4:	d11d      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027f6:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	0e1b      	lsrs	r3, r3, #24
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002804:	4b32      	ldr	r3, [pc, #200]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	0f1b      	lsrs	r3, r3, #28
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	019a      	lsls	r2, r3, #6
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	041b      	lsls	r3, r3, #16
 800281e:	431a      	orrs	r2, r3
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	061b      	lsls	r3, r3, #24
 8002824:	431a      	orrs	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	071b      	lsls	r3, r3, #28
 800282a:	4929      	ldr	r1, [pc, #164]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d028      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800283e:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002844:	0e1b      	lsrs	r3, r3, #24
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800284c:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002852:	0c1b      	lsrs	r3, r3, #16
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	019a      	lsls	r2, r3, #6
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	041b      	lsls	r3, r3, #16
 8002864:	431a      	orrs	r2, r3
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	071b      	lsls	r3, r3, #28
 8002872:	4917      	ldr	r1, [pc, #92]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800287c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002880:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	4911      	ldr	r1, [pc, #68]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002890:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0e      	ldr	r2, [pc, #56]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800289c:	f7fe fa10 	bl	8000cc0 <HAL_GetTick>
 80028a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028a4:	f7fe fa0c 	bl	8000cc0 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e007      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028c2:	d1ef      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3720      	adds	r7, #32
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800

080028d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e040      	b.n	8002968 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe f8b2 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2224      	movs	r2, #36	; 0x24
 8002900:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0201 	bic.w	r2, r2, #1
 8002910:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f8c0 	bl	8002a98 <UART_SetConfig>
 8002918:	4603      	mov	r3, r0
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e022      	b.n	8002968 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fb16 	bl	8002f5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800293e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800294e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 fb9d 	bl	80030a0 <UART_CheckIdleState>
 8002966:	4603      	mov	r3, r0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af02      	add	r7, sp, #8
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002984:	2b20      	cmp	r3, #32
 8002986:	f040 8081 	bne.w	8002a8c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_UART_Transmit+0x26>
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e079      	b.n	8002a8e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_UART_Transmit+0x38>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e072      	b.n	8002a8e <HAL_UART_Transmit+0x11e>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2221      	movs	r2, #33	; 0x21
 80029bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029be:	f7fe f97f 	bl	8000cc0 <HAL_GetTick>
 80029c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	88fa      	ldrh	r2, [r7, #6]
 80029c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	88fa      	ldrh	r2, [r7, #6]
 80029d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029dc:	d108      	bne.n	80029f0 <HAL_UART_Transmit+0x80>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d104      	bne.n	80029f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	e003      	b.n	80029f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002a00:	e02c      	b.n	8002a5c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2180      	movs	r1, #128	; 0x80
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 fb90 	bl	8003132 <UART_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e038      	b.n	8002a8e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10b      	bne.n	8002a3a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	3302      	adds	r3, #2
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	e007      	b.n	8002a4a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	781a      	ldrb	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	3301      	adds	r3, #1
 8002a48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1cc      	bne.n	8002a02 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2140      	movs	r1, #64	; 0x40
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 fb5d 	bl	8003132 <UART_WaitOnFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e005      	b.n	8002a8e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2220      	movs	r2, #32
 8002a86:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e000      	b.n	8002a8e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002a8c:	2302      	movs	r3, #2
  }
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3720      	adds	r7, #32
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4ba7      	ldr	r3, [pc, #668]	; (8002d60 <UART_SetConfig+0x2c8>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	6979      	ldr	r1, [r7, #20]
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a95      	ldr	r2, [pc, #596]	; (8002d64 <UART_SetConfig+0x2cc>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d120      	bne.n	8002b56 <UART_SetConfig+0xbe>
 8002b14:	4b94      	ldr	r3, [pc, #592]	; (8002d68 <UART_SetConfig+0x2d0>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d816      	bhi.n	8002b50 <UART_SetConfig+0xb8>
 8002b22:	a201      	add	r2, pc, #4	; (adr r2, 8002b28 <UART_SetConfig+0x90>)
 8002b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b28:	08002b39 	.word	0x08002b39
 8002b2c:	08002b45 	.word	0x08002b45
 8002b30:	08002b3f 	.word	0x08002b3f
 8002b34:	08002b4b 	.word	0x08002b4b
 8002b38:	2301      	movs	r3, #1
 8002b3a:	77fb      	strb	r3, [r7, #31]
 8002b3c:	e14f      	b.n	8002dde <UART_SetConfig+0x346>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	77fb      	strb	r3, [r7, #31]
 8002b42:	e14c      	b.n	8002dde <UART_SetConfig+0x346>
 8002b44:	2304      	movs	r3, #4
 8002b46:	77fb      	strb	r3, [r7, #31]
 8002b48:	e149      	b.n	8002dde <UART_SetConfig+0x346>
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	77fb      	strb	r3, [r7, #31]
 8002b4e:	e146      	b.n	8002dde <UART_SetConfig+0x346>
 8002b50:	2310      	movs	r3, #16
 8002b52:	77fb      	strb	r3, [r7, #31]
 8002b54:	e143      	b.n	8002dde <UART_SetConfig+0x346>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a84      	ldr	r2, [pc, #528]	; (8002d6c <UART_SetConfig+0x2d4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d132      	bne.n	8002bc6 <UART_SetConfig+0x12e>
 8002b60:	4b81      	ldr	r3, [pc, #516]	; (8002d68 <UART_SetConfig+0x2d0>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	d828      	bhi.n	8002bc0 <UART_SetConfig+0x128>
 8002b6e:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <UART_SetConfig+0xdc>)
 8002b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b74:	08002ba9 	.word	0x08002ba9
 8002b78:	08002bc1 	.word	0x08002bc1
 8002b7c:	08002bc1 	.word	0x08002bc1
 8002b80:	08002bc1 	.word	0x08002bc1
 8002b84:	08002bb5 	.word	0x08002bb5
 8002b88:	08002bc1 	.word	0x08002bc1
 8002b8c:	08002bc1 	.word	0x08002bc1
 8002b90:	08002bc1 	.word	0x08002bc1
 8002b94:	08002baf 	.word	0x08002baf
 8002b98:	08002bc1 	.word	0x08002bc1
 8002b9c:	08002bc1 	.word	0x08002bc1
 8002ba0:	08002bc1 	.word	0x08002bc1
 8002ba4:	08002bbb 	.word	0x08002bbb
 8002ba8:	2300      	movs	r3, #0
 8002baa:	77fb      	strb	r3, [r7, #31]
 8002bac:	e117      	b.n	8002dde <UART_SetConfig+0x346>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	77fb      	strb	r3, [r7, #31]
 8002bb2:	e114      	b.n	8002dde <UART_SetConfig+0x346>
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	77fb      	strb	r3, [r7, #31]
 8002bb8:	e111      	b.n	8002dde <UART_SetConfig+0x346>
 8002bba:	2308      	movs	r3, #8
 8002bbc:	77fb      	strb	r3, [r7, #31]
 8002bbe:	e10e      	b.n	8002dde <UART_SetConfig+0x346>
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	77fb      	strb	r3, [r7, #31]
 8002bc4:	e10b      	b.n	8002dde <UART_SetConfig+0x346>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a69      	ldr	r2, [pc, #420]	; (8002d70 <UART_SetConfig+0x2d8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d120      	bne.n	8002c12 <UART_SetConfig+0x17a>
 8002bd0:	4b65      	ldr	r3, [pc, #404]	; (8002d68 <UART_SetConfig+0x2d0>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002bda:	2b30      	cmp	r3, #48	; 0x30
 8002bdc:	d013      	beq.n	8002c06 <UART_SetConfig+0x16e>
 8002bde:	2b30      	cmp	r3, #48	; 0x30
 8002be0:	d814      	bhi.n	8002c0c <UART_SetConfig+0x174>
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d009      	beq.n	8002bfa <UART_SetConfig+0x162>
 8002be6:	2b20      	cmp	r3, #32
 8002be8:	d810      	bhi.n	8002c0c <UART_SetConfig+0x174>
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <UART_SetConfig+0x15c>
 8002bee:	2b10      	cmp	r3, #16
 8002bf0:	d006      	beq.n	8002c00 <UART_SetConfig+0x168>
 8002bf2:	e00b      	b.n	8002c0c <UART_SetConfig+0x174>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	77fb      	strb	r3, [r7, #31]
 8002bf8:	e0f1      	b.n	8002dde <UART_SetConfig+0x346>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	77fb      	strb	r3, [r7, #31]
 8002bfe:	e0ee      	b.n	8002dde <UART_SetConfig+0x346>
 8002c00:	2304      	movs	r3, #4
 8002c02:	77fb      	strb	r3, [r7, #31]
 8002c04:	e0eb      	b.n	8002dde <UART_SetConfig+0x346>
 8002c06:	2308      	movs	r3, #8
 8002c08:	77fb      	strb	r3, [r7, #31]
 8002c0a:	e0e8      	b.n	8002dde <UART_SetConfig+0x346>
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	77fb      	strb	r3, [r7, #31]
 8002c10:	e0e5      	b.n	8002dde <UART_SetConfig+0x346>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a57      	ldr	r2, [pc, #348]	; (8002d74 <UART_SetConfig+0x2dc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d120      	bne.n	8002c5e <UART_SetConfig+0x1c6>
 8002c1c:	4b52      	ldr	r3, [pc, #328]	; (8002d68 <UART_SetConfig+0x2d0>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c26:	2bc0      	cmp	r3, #192	; 0xc0
 8002c28:	d013      	beq.n	8002c52 <UART_SetConfig+0x1ba>
 8002c2a:	2bc0      	cmp	r3, #192	; 0xc0
 8002c2c:	d814      	bhi.n	8002c58 <UART_SetConfig+0x1c0>
 8002c2e:	2b80      	cmp	r3, #128	; 0x80
 8002c30:	d009      	beq.n	8002c46 <UART_SetConfig+0x1ae>
 8002c32:	2b80      	cmp	r3, #128	; 0x80
 8002c34:	d810      	bhi.n	8002c58 <UART_SetConfig+0x1c0>
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <UART_SetConfig+0x1a8>
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	d006      	beq.n	8002c4c <UART_SetConfig+0x1b4>
 8002c3e:	e00b      	b.n	8002c58 <UART_SetConfig+0x1c0>
 8002c40:	2300      	movs	r3, #0
 8002c42:	77fb      	strb	r3, [r7, #31]
 8002c44:	e0cb      	b.n	8002dde <UART_SetConfig+0x346>
 8002c46:	2302      	movs	r3, #2
 8002c48:	77fb      	strb	r3, [r7, #31]
 8002c4a:	e0c8      	b.n	8002dde <UART_SetConfig+0x346>
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	77fb      	strb	r3, [r7, #31]
 8002c50:	e0c5      	b.n	8002dde <UART_SetConfig+0x346>
 8002c52:	2308      	movs	r3, #8
 8002c54:	77fb      	strb	r3, [r7, #31]
 8002c56:	e0c2      	b.n	8002dde <UART_SetConfig+0x346>
 8002c58:	2310      	movs	r3, #16
 8002c5a:	77fb      	strb	r3, [r7, #31]
 8002c5c:	e0bf      	b.n	8002dde <UART_SetConfig+0x346>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a45      	ldr	r2, [pc, #276]	; (8002d78 <UART_SetConfig+0x2e0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d125      	bne.n	8002cb4 <UART_SetConfig+0x21c>
 8002c68:	4b3f      	ldr	r3, [pc, #252]	; (8002d68 <UART_SetConfig+0x2d0>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c76:	d017      	beq.n	8002ca8 <UART_SetConfig+0x210>
 8002c78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c7c:	d817      	bhi.n	8002cae <UART_SetConfig+0x216>
 8002c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c82:	d00b      	beq.n	8002c9c <UART_SetConfig+0x204>
 8002c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c88:	d811      	bhi.n	8002cae <UART_SetConfig+0x216>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <UART_SetConfig+0x1fe>
 8002c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c92:	d006      	beq.n	8002ca2 <UART_SetConfig+0x20a>
 8002c94:	e00b      	b.n	8002cae <UART_SetConfig+0x216>
 8002c96:	2300      	movs	r3, #0
 8002c98:	77fb      	strb	r3, [r7, #31]
 8002c9a:	e0a0      	b.n	8002dde <UART_SetConfig+0x346>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	77fb      	strb	r3, [r7, #31]
 8002ca0:	e09d      	b.n	8002dde <UART_SetConfig+0x346>
 8002ca2:	2304      	movs	r3, #4
 8002ca4:	77fb      	strb	r3, [r7, #31]
 8002ca6:	e09a      	b.n	8002dde <UART_SetConfig+0x346>
 8002ca8:	2308      	movs	r3, #8
 8002caa:	77fb      	strb	r3, [r7, #31]
 8002cac:	e097      	b.n	8002dde <UART_SetConfig+0x346>
 8002cae:	2310      	movs	r3, #16
 8002cb0:	77fb      	strb	r3, [r7, #31]
 8002cb2:	e094      	b.n	8002dde <UART_SetConfig+0x346>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a30      	ldr	r2, [pc, #192]	; (8002d7c <UART_SetConfig+0x2e4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d125      	bne.n	8002d0a <UART_SetConfig+0x272>
 8002cbe:	4b2a      	ldr	r3, [pc, #168]	; (8002d68 <UART_SetConfig+0x2d0>)
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002cc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ccc:	d017      	beq.n	8002cfe <UART_SetConfig+0x266>
 8002cce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cd2:	d817      	bhi.n	8002d04 <UART_SetConfig+0x26c>
 8002cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cd8:	d00b      	beq.n	8002cf2 <UART_SetConfig+0x25a>
 8002cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cde:	d811      	bhi.n	8002d04 <UART_SetConfig+0x26c>
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <UART_SetConfig+0x254>
 8002ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce8:	d006      	beq.n	8002cf8 <UART_SetConfig+0x260>
 8002cea:	e00b      	b.n	8002d04 <UART_SetConfig+0x26c>
 8002cec:	2301      	movs	r3, #1
 8002cee:	77fb      	strb	r3, [r7, #31]
 8002cf0:	e075      	b.n	8002dde <UART_SetConfig+0x346>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	77fb      	strb	r3, [r7, #31]
 8002cf6:	e072      	b.n	8002dde <UART_SetConfig+0x346>
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	77fb      	strb	r3, [r7, #31]
 8002cfc:	e06f      	b.n	8002dde <UART_SetConfig+0x346>
 8002cfe:	2308      	movs	r3, #8
 8002d00:	77fb      	strb	r3, [r7, #31]
 8002d02:	e06c      	b.n	8002dde <UART_SetConfig+0x346>
 8002d04:	2310      	movs	r3, #16
 8002d06:	77fb      	strb	r3, [r7, #31]
 8002d08:	e069      	b.n	8002dde <UART_SetConfig+0x346>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <UART_SetConfig+0x2e8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d137      	bne.n	8002d84 <UART_SetConfig+0x2ec>
 8002d14:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <UART_SetConfig+0x2d0>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002d1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d22:	d017      	beq.n	8002d54 <UART_SetConfig+0x2bc>
 8002d24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d28:	d817      	bhi.n	8002d5a <UART_SetConfig+0x2c2>
 8002d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2e:	d00b      	beq.n	8002d48 <UART_SetConfig+0x2b0>
 8002d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d34:	d811      	bhi.n	8002d5a <UART_SetConfig+0x2c2>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <UART_SetConfig+0x2aa>
 8002d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3e:	d006      	beq.n	8002d4e <UART_SetConfig+0x2b6>
 8002d40:	e00b      	b.n	8002d5a <UART_SetConfig+0x2c2>
 8002d42:	2300      	movs	r3, #0
 8002d44:	77fb      	strb	r3, [r7, #31]
 8002d46:	e04a      	b.n	8002dde <UART_SetConfig+0x346>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	77fb      	strb	r3, [r7, #31]
 8002d4c:	e047      	b.n	8002dde <UART_SetConfig+0x346>
 8002d4e:	2304      	movs	r3, #4
 8002d50:	77fb      	strb	r3, [r7, #31]
 8002d52:	e044      	b.n	8002dde <UART_SetConfig+0x346>
 8002d54:	2308      	movs	r3, #8
 8002d56:	77fb      	strb	r3, [r7, #31]
 8002d58:	e041      	b.n	8002dde <UART_SetConfig+0x346>
 8002d5a:	2310      	movs	r3, #16
 8002d5c:	77fb      	strb	r3, [r7, #31]
 8002d5e:	e03e      	b.n	8002dde <UART_SetConfig+0x346>
 8002d60:	efff69f3 	.word	0xefff69f3
 8002d64:	40011000 	.word	0x40011000
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40004400 	.word	0x40004400
 8002d70:	40004800 	.word	0x40004800
 8002d74:	40004c00 	.word	0x40004c00
 8002d78:	40005000 	.word	0x40005000
 8002d7c:	40011400 	.word	0x40011400
 8002d80:	40007800 	.word	0x40007800
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a71      	ldr	r2, [pc, #452]	; (8002f50 <UART_SetConfig+0x4b8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d125      	bne.n	8002dda <UART_SetConfig+0x342>
 8002d8e:	4b71      	ldr	r3, [pc, #452]	; (8002f54 <UART_SetConfig+0x4bc>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d9c:	d017      	beq.n	8002dce <UART_SetConfig+0x336>
 8002d9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002da2:	d817      	bhi.n	8002dd4 <UART_SetConfig+0x33c>
 8002da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da8:	d00b      	beq.n	8002dc2 <UART_SetConfig+0x32a>
 8002daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dae:	d811      	bhi.n	8002dd4 <UART_SetConfig+0x33c>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <UART_SetConfig+0x324>
 8002db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002db8:	d006      	beq.n	8002dc8 <UART_SetConfig+0x330>
 8002dba:	e00b      	b.n	8002dd4 <UART_SetConfig+0x33c>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	77fb      	strb	r3, [r7, #31]
 8002dc0:	e00d      	b.n	8002dde <UART_SetConfig+0x346>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	77fb      	strb	r3, [r7, #31]
 8002dc6:	e00a      	b.n	8002dde <UART_SetConfig+0x346>
 8002dc8:	2304      	movs	r3, #4
 8002dca:	77fb      	strb	r3, [r7, #31]
 8002dcc:	e007      	b.n	8002dde <UART_SetConfig+0x346>
 8002dce:	2308      	movs	r3, #8
 8002dd0:	77fb      	strb	r3, [r7, #31]
 8002dd2:	e004      	b.n	8002dde <UART_SetConfig+0x346>
 8002dd4:	2310      	movs	r3, #16
 8002dd6:	77fb      	strb	r3, [r7, #31]
 8002dd8:	e001      	b.n	8002dde <UART_SetConfig+0x346>
 8002dda:	2310      	movs	r3, #16
 8002ddc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de6:	d15b      	bne.n	8002ea0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8002de8:	7ffb      	ldrb	r3, [r7, #31]
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d827      	bhi.n	8002e3e <UART_SetConfig+0x3a6>
 8002dee:	a201      	add	r2, pc, #4	; (adr r2, 8002df4 <UART_SetConfig+0x35c>)
 8002df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df4:	08002e19 	.word	0x08002e19
 8002df8:	08002e21 	.word	0x08002e21
 8002dfc:	08002e29 	.word	0x08002e29
 8002e00:	08002e3f 	.word	0x08002e3f
 8002e04:	08002e2f 	.word	0x08002e2f
 8002e08:	08002e3f 	.word	0x08002e3f
 8002e0c:	08002e3f 	.word	0x08002e3f
 8002e10:	08002e3f 	.word	0x08002e3f
 8002e14:	08002e37 	.word	0x08002e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e18:	f7ff f90c 	bl	8002034 <HAL_RCC_GetPCLK1Freq>
 8002e1c:	61b8      	str	r0, [r7, #24]
        break;
 8002e1e:	e013      	b.n	8002e48 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e20:	f7ff f91c 	bl	800205c <HAL_RCC_GetPCLK2Freq>
 8002e24:	61b8      	str	r0, [r7, #24]
        break;
 8002e26:	e00f      	b.n	8002e48 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e28:	4b4b      	ldr	r3, [pc, #300]	; (8002f58 <UART_SetConfig+0x4c0>)
 8002e2a:	61bb      	str	r3, [r7, #24]
        break;
 8002e2c:	e00c      	b.n	8002e48 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e2e:	f7ff f83f 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 8002e32:	61b8      	str	r0, [r7, #24]
        break;
 8002e34:	e008      	b.n	8002e48 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e3a:	61bb      	str	r3, [r7, #24]
        break;
 8002e3c:	e004      	b.n	8002e48 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	77bb      	strb	r3, [r7, #30]
        break;
 8002e46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d074      	beq.n	8002f38 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	005a      	lsls	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	085b      	lsrs	r3, r3, #1
 8002e58:	441a      	add	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2b0f      	cmp	r3, #15
 8002e6a:	d916      	bls.n	8002e9a <UART_SetConfig+0x402>
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e72:	d212      	bcs.n	8002e9a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	f023 030f 	bic.w	r3, r3, #15
 8002e7c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	085b      	lsrs	r3, r3, #1
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	89fb      	ldrh	r3, [r7, #14]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	89fa      	ldrh	r2, [r7, #14]
 8002e96:	60da      	str	r2, [r3, #12]
 8002e98:	e04e      	b.n	8002f38 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	77bb      	strb	r3, [r7, #30]
 8002e9e:	e04b      	b.n	8002f38 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ea0:	7ffb      	ldrb	r3, [r7, #31]
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d827      	bhi.n	8002ef6 <UART_SetConfig+0x45e>
 8002ea6:	a201      	add	r2, pc, #4	; (adr r2, 8002eac <UART_SetConfig+0x414>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002ed1 	.word	0x08002ed1
 8002eb0:	08002ed9 	.word	0x08002ed9
 8002eb4:	08002ee1 	.word	0x08002ee1
 8002eb8:	08002ef7 	.word	0x08002ef7
 8002ebc:	08002ee7 	.word	0x08002ee7
 8002ec0:	08002ef7 	.word	0x08002ef7
 8002ec4:	08002ef7 	.word	0x08002ef7
 8002ec8:	08002ef7 	.word	0x08002ef7
 8002ecc:	08002eef 	.word	0x08002eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ed0:	f7ff f8b0 	bl	8002034 <HAL_RCC_GetPCLK1Freq>
 8002ed4:	61b8      	str	r0, [r7, #24]
        break;
 8002ed6:	e013      	b.n	8002f00 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ed8:	f7ff f8c0 	bl	800205c <HAL_RCC_GetPCLK2Freq>
 8002edc:	61b8      	str	r0, [r7, #24]
        break;
 8002ede:	e00f      	b.n	8002f00 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <UART_SetConfig+0x4c0>)
 8002ee2:	61bb      	str	r3, [r7, #24]
        break;
 8002ee4:	e00c      	b.n	8002f00 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ee6:	f7fe ffe3 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 8002eea:	61b8      	str	r0, [r7, #24]
        break;
 8002eec:	e008      	b.n	8002f00 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ef2:	61bb      	str	r3, [r7, #24]
        break;
 8002ef4:	e004      	b.n	8002f00 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	77bb      	strb	r3, [r7, #30]
        break;
 8002efe:	bf00      	nop
    }

    if (pclk != 0U)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d018      	beq.n	8002f38 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	085a      	lsrs	r2, r3, #1
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	441a      	add	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b0f      	cmp	r3, #15
 8002f20:	d908      	bls.n	8002f34 <UART_SetConfig+0x49c>
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f28:	d204      	bcs.n	8002f34 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	60da      	str	r2, [r3, #12]
 8002f32:	e001      	b.n	8002f38 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f44:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3720      	adds	r7, #32
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40007c00 	.word	0x40007c00
 8002f54:	40023800 	.word	0x40023800
 8002f58:	00f42400 	.word	0x00f42400

08002f5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01a      	beq.n	8003072 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800305a:	d10a      	bne.n	8003072 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
  }
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030b0:	f7fd fe06 	bl	8000cc0 <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d10e      	bne.n	80030e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f82d 	bl	8003132 <UART_WaitOnFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e023      	b.n	800312a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d10e      	bne.n	800310e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f817 	bl	8003132 <UART_WaitOnFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e00d      	b.n	800312a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	4613      	mov	r3, r2
 8003140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003142:	e05e      	b.n	8003202 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	d05a      	beq.n	8003202 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314c:	f7fd fdb8 	bl	8000cc0 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	429a      	cmp	r2, r3
 800315a:	d302      	bcc.n	8003162 <UART_WaitOnFlagUntilTimeout+0x30>
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d11b      	bne.n	800319a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003170:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2220      	movs	r2, #32
 8003186:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e043      	b.n	8003222 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d02c      	beq.n	8003202 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031b6:	d124      	bne.n	8003202 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031d0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e00f      	b.n	8003222 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69da      	ldr	r2, [r3, #28]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4013      	ands	r3, r2
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	429a      	cmp	r2, r3
 8003210:	bf0c      	ite	eq
 8003212:	2301      	moveq	r3, #1
 8003214:	2300      	movne	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	429a      	cmp	r2, r3
 800321e:	d091      	beq.n	8003144 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <__errno>:
 800322c:	4b01      	ldr	r3, [pc, #4]	; (8003234 <__errno+0x8>)
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	2000000c 	.word	0x2000000c

08003238 <__libc_init_array>:
 8003238:	b570      	push	{r4, r5, r6, lr}
 800323a:	4d0d      	ldr	r5, [pc, #52]	; (8003270 <__libc_init_array+0x38>)
 800323c:	4c0d      	ldr	r4, [pc, #52]	; (8003274 <__libc_init_array+0x3c>)
 800323e:	1b64      	subs	r4, r4, r5
 8003240:	10a4      	asrs	r4, r4, #2
 8003242:	2600      	movs	r6, #0
 8003244:	42a6      	cmp	r6, r4
 8003246:	d109      	bne.n	800325c <__libc_init_array+0x24>
 8003248:	4d0b      	ldr	r5, [pc, #44]	; (8003278 <__libc_init_array+0x40>)
 800324a:	4c0c      	ldr	r4, [pc, #48]	; (800327c <__libc_init_array+0x44>)
 800324c:	f000 fc82 	bl	8003b54 <_init>
 8003250:	1b64      	subs	r4, r4, r5
 8003252:	10a4      	asrs	r4, r4, #2
 8003254:	2600      	movs	r6, #0
 8003256:	42a6      	cmp	r6, r4
 8003258:	d105      	bne.n	8003266 <__libc_init_array+0x2e>
 800325a:	bd70      	pop	{r4, r5, r6, pc}
 800325c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003260:	4798      	blx	r3
 8003262:	3601      	adds	r6, #1
 8003264:	e7ee      	b.n	8003244 <__libc_init_array+0xc>
 8003266:	f855 3b04 	ldr.w	r3, [r5], #4
 800326a:	4798      	blx	r3
 800326c:	3601      	adds	r6, #1
 800326e:	e7f2      	b.n	8003256 <__libc_init_array+0x1e>
 8003270:	08003bf8 	.word	0x08003bf8
 8003274:	08003bf8 	.word	0x08003bf8
 8003278:	08003bf8 	.word	0x08003bf8
 800327c:	08003bfc 	.word	0x08003bfc

08003280 <memset>:
 8003280:	4402      	add	r2, r0
 8003282:	4603      	mov	r3, r0
 8003284:	4293      	cmp	r3, r2
 8003286:	d100      	bne.n	800328a <memset+0xa>
 8003288:	4770      	bx	lr
 800328a:	f803 1b01 	strb.w	r1, [r3], #1
 800328e:	e7f9      	b.n	8003284 <memset+0x4>

08003290 <sniprintf>:
 8003290:	b40c      	push	{r2, r3}
 8003292:	b530      	push	{r4, r5, lr}
 8003294:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <sniprintf+0x64>)
 8003296:	1e0c      	subs	r4, r1, #0
 8003298:	681d      	ldr	r5, [r3, #0]
 800329a:	b09d      	sub	sp, #116	; 0x74
 800329c:	da08      	bge.n	80032b0 <sniprintf+0x20>
 800329e:	238b      	movs	r3, #139	; 0x8b
 80032a0:	602b      	str	r3, [r5, #0]
 80032a2:	f04f 30ff 	mov.w	r0, #4294967295
 80032a6:	b01d      	add	sp, #116	; 0x74
 80032a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032ac:	b002      	add	sp, #8
 80032ae:	4770      	bx	lr
 80032b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80032b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80032b8:	bf14      	ite	ne
 80032ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80032be:	4623      	moveq	r3, r4
 80032c0:	9304      	str	r3, [sp, #16]
 80032c2:	9307      	str	r3, [sp, #28]
 80032c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032c8:	9002      	str	r0, [sp, #8]
 80032ca:	9006      	str	r0, [sp, #24]
 80032cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80032d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80032d2:	ab21      	add	r3, sp, #132	; 0x84
 80032d4:	a902      	add	r1, sp, #8
 80032d6:	4628      	mov	r0, r5
 80032d8:	9301      	str	r3, [sp, #4]
 80032da:	f000 f889 	bl	80033f0 <_svfiprintf_r>
 80032de:	1c43      	adds	r3, r0, #1
 80032e0:	bfbc      	itt	lt
 80032e2:	238b      	movlt	r3, #139	; 0x8b
 80032e4:	602b      	strlt	r3, [r5, #0]
 80032e6:	2c00      	cmp	r4, #0
 80032e8:	d0dd      	beq.n	80032a6 <sniprintf+0x16>
 80032ea:	9b02      	ldr	r3, [sp, #8]
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
 80032f0:	e7d9      	b.n	80032a6 <sniprintf+0x16>
 80032f2:	bf00      	nop
 80032f4:	2000000c 	.word	0x2000000c

080032f8 <siprintf>:
 80032f8:	b40e      	push	{r1, r2, r3}
 80032fa:	b500      	push	{lr}
 80032fc:	b09c      	sub	sp, #112	; 0x70
 80032fe:	ab1d      	add	r3, sp, #116	; 0x74
 8003300:	9002      	str	r0, [sp, #8]
 8003302:	9006      	str	r0, [sp, #24]
 8003304:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003308:	4809      	ldr	r0, [pc, #36]	; (8003330 <siprintf+0x38>)
 800330a:	9107      	str	r1, [sp, #28]
 800330c:	9104      	str	r1, [sp, #16]
 800330e:	4909      	ldr	r1, [pc, #36]	; (8003334 <siprintf+0x3c>)
 8003310:	f853 2b04 	ldr.w	r2, [r3], #4
 8003314:	9105      	str	r1, [sp, #20]
 8003316:	6800      	ldr	r0, [r0, #0]
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	a902      	add	r1, sp, #8
 800331c:	f000 f868 	bl	80033f0 <_svfiprintf_r>
 8003320:	9b02      	ldr	r3, [sp, #8]
 8003322:	2200      	movs	r2, #0
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	b01c      	add	sp, #112	; 0x70
 8003328:	f85d eb04 	ldr.w	lr, [sp], #4
 800332c:	b003      	add	sp, #12
 800332e:	4770      	bx	lr
 8003330:	2000000c 	.word	0x2000000c
 8003334:	ffff0208 	.word	0xffff0208

08003338 <__ssputs_r>:
 8003338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800333c:	688e      	ldr	r6, [r1, #8]
 800333e:	429e      	cmp	r6, r3
 8003340:	4682      	mov	sl, r0
 8003342:	460c      	mov	r4, r1
 8003344:	4690      	mov	r8, r2
 8003346:	461f      	mov	r7, r3
 8003348:	d838      	bhi.n	80033bc <__ssputs_r+0x84>
 800334a:	898a      	ldrh	r2, [r1, #12]
 800334c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003350:	d032      	beq.n	80033b8 <__ssputs_r+0x80>
 8003352:	6825      	ldr	r5, [r4, #0]
 8003354:	6909      	ldr	r1, [r1, #16]
 8003356:	eba5 0901 	sub.w	r9, r5, r1
 800335a:	6965      	ldr	r5, [r4, #20]
 800335c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003360:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003364:	3301      	adds	r3, #1
 8003366:	444b      	add	r3, r9
 8003368:	106d      	asrs	r5, r5, #1
 800336a:	429d      	cmp	r5, r3
 800336c:	bf38      	it	cc
 800336e:	461d      	movcc	r5, r3
 8003370:	0553      	lsls	r3, r2, #21
 8003372:	d531      	bpl.n	80033d8 <__ssputs_r+0xa0>
 8003374:	4629      	mov	r1, r5
 8003376:	f000 fb47 	bl	8003a08 <_malloc_r>
 800337a:	4606      	mov	r6, r0
 800337c:	b950      	cbnz	r0, 8003394 <__ssputs_r+0x5c>
 800337e:	230c      	movs	r3, #12
 8003380:	f8ca 3000 	str.w	r3, [sl]
 8003384:	89a3      	ldrh	r3, [r4, #12]
 8003386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800338a:	81a3      	strh	r3, [r4, #12]
 800338c:	f04f 30ff 	mov.w	r0, #4294967295
 8003390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003394:	6921      	ldr	r1, [r4, #16]
 8003396:	464a      	mov	r2, r9
 8003398:	f000 fabe 	bl	8003918 <memcpy>
 800339c:	89a3      	ldrh	r3, [r4, #12]
 800339e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a6:	81a3      	strh	r3, [r4, #12]
 80033a8:	6126      	str	r6, [r4, #16]
 80033aa:	6165      	str	r5, [r4, #20]
 80033ac:	444e      	add	r6, r9
 80033ae:	eba5 0509 	sub.w	r5, r5, r9
 80033b2:	6026      	str	r6, [r4, #0]
 80033b4:	60a5      	str	r5, [r4, #8]
 80033b6:	463e      	mov	r6, r7
 80033b8:	42be      	cmp	r6, r7
 80033ba:	d900      	bls.n	80033be <__ssputs_r+0x86>
 80033bc:	463e      	mov	r6, r7
 80033be:	4632      	mov	r2, r6
 80033c0:	6820      	ldr	r0, [r4, #0]
 80033c2:	4641      	mov	r1, r8
 80033c4:	f000 fab6 	bl	8003934 <memmove>
 80033c8:	68a3      	ldr	r3, [r4, #8]
 80033ca:	6822      	ldr	r2, [r4, #0]
 80033cc:	1b9b      	subs	r3, r3, r6
 80033ce:	4432      	add	r2, r6
 80033d0:	60a3      	str	r3, [r4, #8]
 80033d2:	6022      	str	r2, [r4, #0]
 80033d4:	2000      	movs	r0, #0
 80033d6:	e7db      	b.n	8003390 <__ssputs_r+0x58>
 80033d8:	462a      	mov	r2, r5
 80033da:	f000 fb6f 	bl	8003abc <_realloc_r>
 80033de:	4606      	mov	r6, r0
 80033e0:	2800      	cmp	r0, #0
 80033e2:	d1e1      	bne.n	80033a8 <__ssputs_r+0x70>
 80033e4:	6921      	ldr	r1, [r4, #16]
 80033e6:	4650      	mov	r0, sl
 80033e8:	f000 fabe 	bl	8003968 <_free_r>
 80033ec:	e7c7      	b.n	800337e <__ssputs_r+0x46>
	...

080033f0 <_svfiprintf_r>:
 80033f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f4:	4698      	mov	r8, r3
 80033f6:	898b      	ldrh	r3, [r1, #12]
 80033f8:	061b      	lsls	r3, r3, #24
 80033fa:	b09d      	sub	sp, #116	; 0x74
 80033fc:	4607      	mov	r7, r0
 80033fe:	460d      	mov	r5, r1
 8003400:	4614      	mov	r4, r2
 8003402:	d50e      	bpl.n	8003422 <_svfiprintf_r+0x32>
 8003404:	690b      	ldr	r3, [r1, #16]
 8003406:	b963      	cbnz	r3, 8003422 <_svfiprintf_r+0x32>
 8003408:	2140      	movs	r1, #64	; 0x40
 800340a:	f000 fafd 	bl	8003a08 <_malloc_r>
 800340e:	6028      	str	r0, [r5, #0]
 8003410:	6128      	str	r0, [r5, #16]
 8003412:	b920      	cbnz	r0, 800341e <_svfiprintf_r+0x2e>
 8003414:	230c      	movs	r3, #12
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	f04f 30ff 	mov.w	r0, #4294967295
 800341c:	e0d1      	b.n	80035c2 <_svfiprintf_r+0x1d2>
 800341e:	2340      	movs	r3, #64	; 0x40
 8003420:	616b      	str	r3, [r5, #20]
 8003422:	2300      	movs	r3, #0
 8003424:	9309      	str	r3, [sp, #36]	; 0x24
 8003426:	2320      	movs	r3, #32
 8003428:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800342c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003430:	2330      	movs	r3, #48	; 0x30
 8003432:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80035dc <_svfiprintf_r+0x1ec>
 8003436:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800343a:	f04f 0901 	mov.w	r9, #1
 800343e:	4623      	mov	r3, r4
 8003440:	469a      	mov	sl, r3
 8003442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003446:	b10a      	cbz	r2, 800344c <_svfiprintf_r+0x5c>
 8003448:	2a25      	cmp	r2, #37	; 0x25
 800344a:	d1f9      	bne.n	8003440 <_svfiprintf_r+0x50>
 800344c:	ebba 0b04 	subs.w	fp, sl, r4
 8003450:	d00b      	beq.n	800346a <_svfiprintf_r+0x7a>
 8003452:	465b      	mov	r3, fp
 8003454:	4622      	mov	r2, r4
 8003456:	4629      	mov	r1, r5
 8003458:	4638      	mov	r0, r7
 800345a:	f7ff ff6d 	bl	8003338 <__ssputs_r>
 800345e:	3001      	adds	r0, #1
 8003460:	f000 80aa 	beq.w	80035b8 <_svfiprintf_r+0x1c8>
 8003464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003466:	445a      	add	r2, fp
 8003468:	9209      	str	r2, [sp, #36]	; 0x24
 800346a:	f89a 3000 	ldrb.w	r3, [sl]
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 80a2 	beq.w	80035b8 <_svfiprintf_r+0x1c8>
 8003474:	2300      	movs	r3, #0
 8003476:	f04f 32ff 	mov.w	r2, #4294967295
 800347a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800347e:	f10a 0a01 	add.w	sl, sl, #1
 8003482:	9304      	str	r3, [sp, #16]
 8003484:	9307      	str	r3, [sp, #28]
 8003486:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800348a:	931a      	str	r3, [sp, #104]	; 0x68
 800348c:	4654      	mov	r4, sl
 800348e:	2205      	movs	r2, #5
 8003490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003494:	4851      	ldr	r0, [pc, #324]	; (80035dc <_svfiprintf_r+0x1ec>)
 8003496:	f7fc fedb 	bl	8000250 <memchr>
 800349a:	9a04      	ldr	r2, [sp, #16]
 800349c:	b9d8      	cbnz	r0, 80034d6 <_svfiprintf_r+0xe6>
 800349e:	06d0      	lsls	r0, r2, #27
 80034a0:	bf44      	itt	mi
 80034a2:	2320      	movmi	r3, #32
 80034a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034a8:	0711      	lsls	r1, r2, #28
 80034aa:	bf44      	itt	mi
 80034ac:	232b      	movmi	r3, #43	; 0x2b
 80034ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034b2:	f89a 3000 	ldrb.w	r3, [sl]
 80034b6:	2b2a      	cmp	r3, #42	; 0x2a
 80034b8:	d015      	beq.n	80034e6 <_svfiprintf_r+0xf6>
 80034ba:	9a07      	ldr	r2, [sp, #28]
 80034bc:	4654      	mov	r4, sl
 80034be:	2000      	movs	r0, #0
 80034c0:	f04f 0c0a 	mov.w	ip, #10
 80034c4:	4621      	mov	r1, r4
 80034c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034ca:	3b30      	subs	r3, #48	; 0x30
 80034cc:	2b09      	cmp	r3, #9
 80034ce:	d94e      	bls.n	800356e <_svfiprintf_r+0x17e>
 80034d0:	b1b0      	cbz	r0, 8003500 <_svfiprintf_r+0x110>
 80034d2:	9207      	str	r2, [sp, #28]
 80034d4:	e014      	b.n	8003500 <_svfiprintf_r+0x110>
 80034d6:	eba0 0308 	sub.w	r3, r0, r8
 80034da:	fa09 f303 	lsl.w	r3, r9, r3
 80034de:	4313      	orrs	r3, r2
 80034e0:	9304      	str	r3, [sp, #16]
 80034e2:	46a2      	mov	sl, r4
 80034e4:	e7d2      	b.n	800348c <_svfiprintf_r+0x9c>
 80034e6:	9b03      	ldr	r3, [sp, #12]
 80034e8:	1d19      	adds	r1, r3, #4
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	9103      	str	r1, [sp, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bfbb      	ittet	lt
 80034f2:	425b      	neglt	r3, r3
 80034f4:	f042 0202 	orrlt.w	r2, r2, #2
 80034f8:	9307      	strge	r3, [sp, #28]
 80034fa:	9307      	strlt	r3, [sp, #28]
 80034fc:	bfb8      	it	lt
 80034fe:	9204      	strlt	r2, [sp, #16]
 8003500:	7823      	ldrb	r3, [r4, #0]
 8003502:	2b2e      	cmp	r3, #46	; 0x2e
 8003504:	d10c      	bne.n	8003520 <_svfiprintf_r+0x130>
 8003506:	7863      	ldrb	r3, [r4, #1]
 8003508:	2b2a      	cmp	r3, #42	; 0x2a
 800350a:	d135      	bne.n	8003578 <_svfiprintf_r+0x188>
 800350c:	9b03      	ldr	r3, [sp, #12]
 800350e:	1d1a      	adds	r2, r3, #4
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	9203      	str	r2, [sp, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	bfb8      	it	lt
 8003518:	f04f 33ff 	movlt.w	r3, #4294967295
 800351c:	3402      	adds	r4, #2
 800351e:	9305      	str	r3, [sp, #20]
 8003520:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80035ec <_svfiprintf_r+0x1fc>
 8003524:	7821      	ldrb	r1, [r4, #0]
 8003526:	2203      	movs	r2, #3
 8003528:	4650      	mov	r0, sl
 800352a:	f7fc fe91 	bl	8000250 <memchr>
 800352e:	b140      	cbz	r0, 8003542 <_svfiprintf_r+0x152>
 8003530:	2340      	movs	r3, #64	; 0x40
 8003532:	eba0 000a 	sub.w	r0, r0, sl
 8003536:	fa03 f000 	lsl.w	r0, r3, r0
 800353a:	9b04      	ldr	r3, [sp, #16]
 800353c:	4303      	orrs	r3, r0
 800353e:	3401      	adds	r4, #1
 8003540:	9304      	str	r3, [sp, #16]
 8003542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003546:	4826      	ldr	r0, [pc, #152]	; (80035e0 <_svfiprintf_r+0x1f0>)
 8003548:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800354c:	2206      	movs	r2, #6
 800354e:	f7fc fe7f 	bl	8000250 <memchr>
 8003552:	2800      	cmp	r0, #0
 8003554:	d038      	beq.n	80035c8 <_svfiprintf_r+0x1d8>
 8003556:	4b23      	ldr	r3, [pc, #140]	; (80035e4 <_svfiprintf_r+0x1f4>)
 8003558:	bb1b      	cbnz	r3, 80035a2 <_svfiprintf_r+0x1b2>
 800355a:	9b03      	ldr	r3, [sp, #12]
 800355c:	3307      	adds	r3, #7
 800355e:	f023 0307 	bic.w	r3, r3, #7
 8003562:	3308      	adds	r3, #8
 8003564:	9303      	str	r3, [sp, #12]
 8003566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003568:	4433      	add	r3, r6
 800356a:	9309      	str	r3, [sp, #36]	; 0x24
 800356c:	e767      	b.n	800343e <_svfiprintf_r+0x4e>
 800356e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003572:	460c      	mov	r4, r1
 8003574:	2001      	movs	r0, #1
 8003576:	e7a5      	b.n	80034c4 <_svfiprintf_r+0xd4>
 8003578:	2300      	movs	r3, #0
 800357a:	3401      	adds	r4, #1
 800357c:	9305      	str	r3, [sp, #20]
 800357e:	4619      	mov	r1, r3
 8003580:	f04f 0c0a 	mov.w	ip, #10
 8003584:	4620      	mov	r0, r4
 8003586:	f810 2b01 	ldrb.w	r2, [r0], #1
 800358a:	3a30      	subs	r2, #48	; 0x30
 800358c:	2a09      	cmp	r2, #9
 800358e:	d903      	bls.n	8003598 <_svfiprintf_r+0x1a8>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0c5      	beq.n	8003520 <_svfiprintf_r+0x130>
 8003594:	9105      	str	r1, [sp, #20]
 8003596:	e7c3      	b.n	8003520 <_svfiprintf_r+0x130>
 8003598:	fb0c 2101 	mla	r1, ip, r1, r2
 800359c:	4604      	mov	r4, r0
 800359e:	2301      	movs	r3, #1
 80035a0:	e7f0      	b.n	8003584 <_svfiprintf_r+0x194>
 80035a2:	ab03      	add	r3, sp, #12
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	462a      	mov	r2, r5
 80035a8:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <_svfiprintf_r+0x1f8>)
 80035aa:	a904      	add	r1, sp, #16
 80035ac:	4638      	mov	r0, r7
 80035ae:	f3af 8000 	nop.w
 80035b2:	1c42      	adds	r2, r0, #1
 80035b4:	4606      	mov	r6, r0
 80035b6:	d1d6      	bne.n	8003566 <_svfiprintf_r+0x176>
 80035b8:	89ab      	ldrh	r3, [r5, #12]
 80035ba:	065b      	lsls	r3, r3, #25
 80035bc:	f53f af2c 	bmi.w	8003418 <_svfiprintf_r+0x28>
 80035c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035c2:	b01d      	add	sp, #116	; 0x74
 80035c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035c8:	ab03      	add	r3, sp, #12
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	462a      	mov	r2, r5
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <_svfiprintf_r+0x1f8>)
 80035d0:	a904      	add	r1, sp, #16
 80035d2:	4638      	mov	r0, r7
 80035d4:	f000 f87a 	bl	80036cc <_printf_i>
 80035d8:	e7eb      	b.n	80035b2 <_svfiprintf_r+0x1c2>
 80035da:	bf00      	nop
 80035dc:	08003bbc 	.word	0x08003bbc
 80035e0:	08003bc6 	.word	0x08003bc6
 80035e4:	00000000 	.word	0x00000000
 80035e8:	08003339 	.word	0x08003339
 80035ec:	08003bc2 	.word	0x08003bc2

080035f0 <_printf_common>:
 80035f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035f4:	4616      	mov	r6, r2
 80035f6:	4699      	mov	r9, r3
 80035f8:	688a      	ldr	r2, [r1, #8]
 80035fa:	690b      	ldr	r3, [r1, #16]
 80035fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003600:	4293      	cmp	r3, r2
 8003602:	bfb8      	it	lt
 8003604:	4613      	movlt	r3, r2
 8003606:	6033      	str	r3, [r6, #0]
 8003608:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800360c:	4607      	mov	r7, r0
 800360e:	460c      	mov	r4, r1
 8003610:	b10a      	cbz	r2, 8003616 <_printf_common+0x26>
 8003612:	3301      	adds	r3, #1
 8003614:	6033      	str	r3, [r6, #0]
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	0699      	lsls	r1, r3, #26
 800361a:	bf42      	ittt	mi
 800361c:	6833      	ldrmi	r3, [r6, #0]
 800361e:	3302      	addmi	r3, #2
 8003620:	6033      	strmi	r3, [r6, #0]
 8003622:	6825      	ldr	r5, [r4, #0]
 8003624:	f015 0506 	ands.w	r5, r5, #6
 8003628:	d106      	bne.n	8003638 <_printf_common+0x48>
 800362a:	f104 0a19 	add.w	sl, r4, #25
 800362e:	68e3      	ldr	r3, [r4, #12]
 8003630:	6832      	ldr	r2, [r6, #0]
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	42ab      	cmp	r3, r5
 8003636:	dc26      	bgt.n	8003686 <_printf_common+0x96>
 8003638:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800363c:	1e13      	subs	r3, r2, #0
 800363e:	6822      	ldr	r2, [r4, #0]
 8003640:	bf18      	it	ne
 8003642:	2301      	movne	r3, #1
 8003644:	0692      	lsls	r2, r2, #26
 8003646:	d42b      	bmi.n	80036a0 <_printf_common+0xb0>
 8003648:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800364c:	4649      	mov	r1, r9
 800364e:	4638      	mov	r0, r7
 8003650:	47c0      	blx	r8
 8003652:	3001      	adds	r0, #1
 8003654:	d01e      	beq.n	8003694 <_printf_common+0xa4>
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	68e5      	ldr	r5, [r4, #12]
 800365a:	6832      	ldr	r2, [r6, #0]
 800365c:	f003 0306 	and.w	r3, r3, #6
 8003660:	2b04      	cmp	r3, #4
 8003662:	bf08      	it	eq
 8003664:	1aad      	subeq	r5, r5, r2
 8003666:	68a3      	ldr	r3, [r4, #8]
 8003668:	6922      	ldr	r2, [r4, #16]
 800366a:	bf0c      	ite	eq
 800366c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003670:	2500      	movne	r5, #0
 8003672:	4293      	cmp	r3, r2
 8003674:	bfc4      	itt	gt
 8003676:	1a9b      	subgt	r3, r3, r2
 8003678:	18ed      	addgt	r5, r5, r3
 800367a:	2600      	movs	r6, #0
 800367c:	341a      	adds	r4, #26
 800367e:	42b5      	cmp	r5, r6
 8003680:	d11a      	bne.n	80036b8 <_printf_common+0xc8>
 8003682:	2000      	movs	r0, #0
 8003684:	e008      	b.n	8003698 <_printf_common+0xa8>
 8003686:	2301      	movs	r3, #1
 8003688:	4652      	mov	r2, sl
 800368a:	4649      	mov	r1, r9
 800368c:	4638      	mov	r0, r7
 800368e:	47c0      	blx	r8
 8003690:	3001      	adds	r0, #1
 8003692:	d103      	bne.n	800369c <_printf_common+0xac>
 8003694:	f04f 30ff 	mov.w	r0, #4294967295
 8003698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800369c:	3501      	adds	r5, #1
 800369e:	e7c6      	b.n	800362e <_printf_common+0x3e>
 80036a0:	18e1      	adds	r1, r4, r3
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	2030      	movs	r0, #48	; 0x30
 80036a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036aa:	4422      	add	r2, r4
 80036ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036b4:	3302      	adds	r3, #2
 80036b6:	e7c7      	b.n	8003648 <_printf_common+0x58>
 80036b8:	2301      	movs	r3, #1
 80036ba:	4622      	mov	r2, r4
 80036bc:	4649      	mov	r1, r9
 80036be:	4638      	mov	r0, r7
 80036c0:	47c0      	blx	r8
 80036c2:	3001      	adds	r0, #1
 80036c4:	d0e6      	beq.n	8003694 <_printf_common+0xa4>
 80036c6:	3601      	adds	r6, #1
 80036c8:	e7d9      	b.n	800367e <_printf_common+0x8e>
	...

080036cc <_printf_i>:
 80036cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036d0:	460c      	mov	r4, r1
 80036d2:	4691      	mov	r9, r2
 80036d4:	7e27      	ldrb	r7, [r4, #24]
 80036d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036d8:	2f78      	cmp	r7, #120	; 0x78
 80036da:	4680      	mov	r8, r0
 80036dc:	469a      	mov	sl, r3
 80036de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036e2:	d807      	bhi.n	80036f4 <_printf_i+0x28>
 80036e4:	2f62      	cmp	r7, #98	; 0x62
 80036e6:	d80a      	bhi.n	80036fe <_printf_i+0x32>
 80036e8:	2f00      	cmp	r7, #0
 80036ea:	f000 80d8 	beq.w	800389e <_printf_i+0x1d2>
 80036ee:	2f58      	cmp	r7, #88	; 0x58
 80036f0:	f000 80a3 	beq.w	800383a <_printf_i+0x16e>
 80036f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036fc:	e03a      	b.n	8003774 <_printf_i+0xa8>
 80036fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003702:	2b15      	cmp	r3, #21
 8003704:	d8f6      	bhi.n	80036f4 <_printf_i+0x28>
 8003706:	a001      	add	r0, pc, #4	; (adr r0, 800370c <_printf_i+0x40>)
 8003708:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800370c:	08003765 	.word	0x08003765
 8003710:	08003779 	.word	0x08003779
 8003714:	080036f5 	.word	0x080036f5
 8003718:	080036f5 	.word	0x080036f5
 800371c:	080036f5 	.word	0x080036f5
 8003720:	080036f5 	.word	0x080036f5
 8003724:	08003779 	.word	0x08003779
 8003728:	080036f5 	.word	0x080036f5
 800372c:	080036f5 	.word	0x080036f5
 8003730:	080036f5 	.word	0x080036f5
 8003734:	080036f5 	.word	0x080036f5
 8003738:	08003885 	.word	0x08003885
 800373c:	080037a9 	.word	0x080037a9
 8003740:	08003867 	.word	0x08003867
 8003744:	080036f5 	.word	0x080036f5
 8003748:	080036f5 	.word	0x080036f5
 800374c:	080038a7 	.word	0x080038a7
 8003750:	080036f5 	.word	0x080036f5
 8003754:	080037a9 	.word	0x080037a9
 8003758:	080036f5 	.word	0x080036f5
 800375c:	080036f5 	.word	0x080036f5
 8003760:	0800386f 	.word	0x0800386f
 8003764:	680b      	ldr	r3, [r1, #0]
 8003766:	1d1a      	adds	r2, r3, #4
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	600a      	str	r2, [r1, #0]
 800376c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003770:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003774:	2301      	movs	r3, #1
 8003776:	e0a3      	b.n	80038c0 <_printf_i+0x1f4>
 8003778:	6825      	ldr	r5, [r4, #0]
 800377a:	6808      	ldr	r0, [r1, #0]
 800377c:	062e      	lsls	r6, r5, #24
 800377e:	f100 0304 	add.w	r3, r0, #4
 8003782:	d50a      	bpl.n	800379a <_printf_i+0xce>
 8003784:	6805      	ldr	r5, [r0, #0]
 8003786:	600b      	str	r3, [r1, #0]
 8003788:	2d00      	cmp	r5, #0
 800378a:	da03      	bge.n	8003794 <_printf_i+0xc8>
 800378c:	232d      	movs	r3, #45	; 0x2d
 800378e:	426d      	negs	r5, r5
 8003790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003794:	485e      	ldr	r0, [pc, #376]	; (8003910 <_printf_i+0x244>)
 8003796:	230a      	movs	r3, #10
 8003798:	e019      	b.n	80037ce <_printf_i+0x102>
 800379a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800379e:	6805      	ldr	r5, [r0, #0]
 80037a0:	600b      	str	r3, [r1, #0]
 80037a2:	bf18      	it	ne
 80037a4:	b22d      	sxthne	r5, r5
 80037a6:	e7ef      	b.n	8003788 <_printf_i+0xbc>
 80037a8:	680b      	ldr	r3, [r1, #0]
 80037aa:	6825      	ldr	r5, [r4, #0]
 80037ac:	1d18      	adds	r0, r3, #4
 80037ae:	6008      	str	r0, [r1, #0]
 80037b0:	0628      	lsls	r0, r5, #24
 80037b2:	d501      	bpl.n	80037b8 <_printf_i+0xec>
 80037b4:	681d      	ldr	r5, [r3, #0]
 80037b6:	e002      	b.n	80037be <_printf_i+0xf2>
 80037b8:	0669      	lsls	r1, r5, #25
 80037ba:	d5fb      	bpl.n	80037b4 <_printf_i+0xe8>
 80037bc:	881d      	ldrh	r5, [r3, #0]
 80037be:	4854      	ldr	r0, [pc, #336]	; (8003910 <_printf_i+0x244>)
 80037c0:	2f6f      	cmp	r7, #111	; 0x6f
 80037c2:	bf0c      	ite	eq
 80037c4:	2308      	moveq	r3, #8
 80037c6:	230a      	movne	r3, #10
 80037c8:	2100      	movs	r1, #0
 80037ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037ce:	6866      	ldr	r6, [r4, #4]
 80037d0:	60a6      	str	r6, [r4, #8]
 80037d2:	2e00      	cmp	r6, #0
 80037d4:	bfa2      	ittt	ge
 80037d6:	6821      	ldrge	r1, [r4, #0]
 80037d8:	f021 0104 	bicge.w	r1, r1, #4
 80037dc:	6021      	strge	r1, [r4, #0]
 80037de:	b90d      	cbnz	r5, 80037e4 <_printf_i+0x118>
 80037e0:	2e00      	cmp	r6, #0
 80037e2:	d04d      	beq.n	8003880 <_printf_i+0x1b4>
 80037e4:	4616      	mov	r6, r2
 80037e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80037ea:	fb03 5711 	mls	r7, r3, r1, r5
 80037ee:	5dc7      	ldrb	r7, [r0, r7]
 80037f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037f4:	462f      	mov	r7, r5
 80037f6:	42bb      	cmp	r3, r7
 80037f8:	460d      	mov	r5, r1
 80037fa:	d9f4      	bls.n	80037e6 <_printf_i+0x11a>
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d10b      	bne.n	8003818 <_printf_i+0x14c>
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	07df      	lsls	r7, r3, #31
 8003804:	d508      	bpl.n	8003818 <_printf_i+0x14c>
 8003806:	6923      	ldr	r3, [r4, #16]
 8003808:	6861      	ldr	r1, [r4, #4]
 800380a:	4299      	cmp	r1, r3
 800380c:	bfde      	ittt	le
 800380e:	2330      	movle	r3, #48	; 0x30
 8003810:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003814:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003818:	1b92      	subs	r2, r2, r6
 800381a:	6122      	str	r2, [r4, #16]
 800381c:	f8cd a000 	str.w	sl, [sp]
 8003820:	464b      	mov	r3, r9
 8003822:	aa03      	add	r2, sp, #12
 8003824:	4621      	mov	r1, r4
 8003826:	4640      	mov	r0, r8
 8003828:	f7ff fee2 	bl	80035f0 <_printf_common>
 800382c:	3001      	adds	r0, #1
 800382e:	d14c      	bne.n	80038ca <_printf_i+0x1fe>
 8003830:	f04f 30ff 	mov.w	r0, #4294967295
 8003834:	b004      	add	sp, #16
 8003836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800383a:	4835      	ldr	r0, [pc, #212]	; (8003910 <_printf_i+0x244>)
 800383c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	680e      	ldr	r6, [r1, #0]
 8003844:	061f      	lsls	r7, r3, #24
 8003846:	f856 5b04 	ldr.w	r5, [r6], #4
 800384a:	600e      	str	r6, [r1, #0]
 800384c:	d514      	bpl.n	8003878 <_printf_i+0x1ac>
 800384e:	07d9      	lsls	r1, r3, #31
 8003850:	bf44      	itt	mi
 8003852:	f043 0320 	orrmi.w	r3, r3, #32
 8003856:	6023      	strmi	r3, [r4, #0]
 8003858:	b91d      	cbnz	r5, 8003862 <_printf_i+0x196>
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	f023 0320 	bic.w	r3, r3, #32
 8003860:	6023      	str	r3, [r4, #0]
 8003862:	2310      	movs	r3, #16
 8003864:	e7b0      	b.n	80037c8 <_printf_i+0xfc>
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	f043 0320 	orr.w	r3, r3, #32
 800386c:	6023      	str	r3, [r4, #0]
 800386e:	2378      	movs	r3, #120	; 0x78
 8003870:	4828      	ldr	r0, [pc, #160]	; (8003914 <_printf_i+0x248>)
 8003872:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003876:	e7e3      	b.n	8003840 <_printf_i+0x174>
 8003878:	065e      	lsls	r6, r3, #25
 800387a:	bf48      	it	mi
 800387c:	b2ad      	uxthmi	r5, r5
 800387e:	e7e6      	b.n	800384e <_printf_i+0x182>
 8003880:	4616      	mov	r6, r2
 8003882:	e7bb      	b.n	80037fc <_printf_i+0x130>
 8003884:	680b      	ldr	r3, [r1, #0]
 8003886:	6826      	ldr	r6, [r4, #0]
 8003888:	6960      	ldr	r0, [r4, #20]
 800388a:	1d1d      	adds	r5, r3, #4
 800388c:	600d      	str	r5, [r1, #0]
 800388e:	0635      	lsls	r5, r6, #24
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	d501      	bpl.n	8003898 <_printf_i+0x1cc>
 8003894:	6018      	str	r0, [r3, #0]
 8003896:	e002      	b.n	800389e <_printf_i+0x1d2>
 8003898:	0671      	lsls	r1, r6, #25
 800389a:	d5fb      	bpl.n	8003894 <_printf_i+0x1c8>
 800389c:	8018      	strh	r0, [r3, #0]
 800389e:	2300      	movs	r3, #0
 80038a0:	6123      	str	r3, [r4, #16]
 80038a2:	4616      	mov	r6, r2
 80038a4:	e7ba      	b.n	800381c <_printf_i+0x150>
 80038a6:	680b      	ldr	r3, [r1, #0]
 80038a8:	1d1a      	adds	r2, r3, #4
 80038aa:	600a      	str	r2, [r1, #0]
 80038ac:	681e      	ldr	r6, [r3, #0]
 80038ae:	6862      	ldr	r2, [r4, #4]
 80038b0:	2100      	movs	r1, #0
 80038b2:	4630      	mov	r0, r6
 80038b4:	f7fc fccc 	bl	8000250 <memchr>
 80038b8:	b108      	cbz	r0, 80038be <_printf_i+0x1f2>
 80038ba:	1b80      	subs	r0, r0, r6
 80038bc:	6060      	str	r0, [r4, #4]
 80038be:	6863      	ldr	r3, [r4, #4]
 80038c0:	6123      	str	r3, [r4, #16]
 80038c2:	2300      	movs	r3, #0
 80038c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038c8:	e7a8      	b.n	800381c <_printf_i+0x150>
 80038ca:	6923      	ldr	r3, [r4, #16]
 80038cc:	4632      	mov	r2, r6
 80038ce:	4649      	mov	r1, r9
 80038d0:	4640      	mov	r0, r8
 80038d2:	47d0      	blx	sl
 80038d4:	3001      	adds	r0, #1
 80038d6:	d0ab      	beq.n	8003830 <_printf_i+0x164>
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	079b      	lsls	r3, r3, #30
 80038dc:	d413      	bmi.n	8003906 <_printf_i+0x23a>
 80038de:	68e0      	ldr	r0, [r4, #12]
 80038e0:	9b03      	ldr	r3, [sp, #12]
 80038e2:	4298      	cmp	r0, r3
 80038e4:	bfb8      	it	lt
 80038e6:	4618      	movlt	r0, r3
 80038e8:	e7a4      	b.n	8003834 <_printf_i+0x168>
 80038ea:	2301      	movs	r3, #1
 80038ec:	4632      	mov	r2, r6
 80038ee:	4649      	mov	r1, r9
 80038f0:	4640      	mov	r0, r8
 80038f2:	47d0      	blx	sl
 80038f4:	3001      	adds	r0, #1
 80038f6:	d09b      	beq.n	8003830 <_printf_i+0x164>
 80038f8:	3501      	adds	r5, #1
 80038fa:	68e3      	ldr	r3, [r4, #12]
 80038fc:	9903      	ldr	r1, [sp, #12]
 80038fe:	1a5b      	subs	r3, r3, r1
 8003900:	42ab      	cmp	r3, r5
 8003902:	dcf2      	bgt.n	80038ea <_printf_i+0x21e>
 8003904:	e7eb      	b.n	80038de <_printf_i+0x212>
 8003906:	2500      	movs	r5, #0
 8003908:	f104 0619 	add.w	r6, r4, #25
 800390c:	e7f5      	b.n	80038fa <_printf_i+0x22e>
 800390e:	bf00      	nop
 8003910:	08003bcd 	.word	0x08003bcd
 8003914:	08003bde 	.word	0x08003bde

08003918 <memcpy>:
 8003918:	440a      	add	r2, r1
 800391a:	4291      	cmp	r1, r2
 800391c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003920:	d100      	bne.n	8003924 <memcpy+0xc>
 8003922:	4770      	bx	lr
 8003924:	b510      	push	{r4, lr}
 8003926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800392a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800392e:	4291      	cmp	r1, r2
 8003930:	d1f9      	bne.n	8003926 <memcpy+0xe>
 8003932:	bd10      	pop	{r4, pc}

08003934 <memmove>:
 8003934:	4288      	cmp	r0, r1
 8003936:	b510      	push	{r4, lr}
 8003938:	eb01 0402 	add.w	r4, r1, r2
 800393c:	d902      	bls.n	8003944 <memmove+0x10>
 800393e:	4284      	cmp	r4, r0
 8003940:	4623      	mov	r3, r4
 8003942:	d807      	bhi.n	8003954 <memmove+0x20>
 8003944:	1e43      	subs	r3, r0, #1
 8003946:	42a1      	cmp	r1, r4
 8003948:	d008      	beq.n	800395c <memmove+0x28>
 800394a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800394e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003952:	e7f8      	b.n	8003946 <memmove+0x12>
 8003954:	4402      	add	r2, r0
 8003956:	4601      	mov	r1, r0
 8003958:	428a      	cmp	r2, r1
 800395a:	d100      	bne.n	800395e <memmove+0x2a>
 800395c:	bd10      	pop	{r4, pc}
 800395e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003966:	e7f7      	b.n	8003958 <memmove+0x24>

08003968 <_free_r>:
 8003968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800396a:	2900      	cmp	r1, #0
 800396c:	d048      	beq.n	8003a00 <_free_r+0x98>
 800396e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003972:	9001      	str	r0, [sp, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	f1a1 0404 	sub.w	r4, r1, #4
 800397a:	bfb8      	it	lt
 800397c:	18e4      	addlt	r4, r4, r3
 800397e:	f000 f8d3 	bl	8003b28 <__malloc_lock>
 8003982:	4a20      	ldr	r2, [pc, #128]	; (8003a04 <_free_r+0x9c>)
 8003984:	9801      	ldr	r0, [sp, #4]
 8003986:	6813      	ldr	r3, [r2, #0]
 8003988:	4615      	mov	r5, r2
 800398a:	b933      	cbnz	r3, 800399a <_free_r+0x32>
 800398c:	6063      	str	r3, [r4, #4]
 800398e:	6014      	str	r4, [r2, #0]
 8003990:	b003      	add	sp, #12
 8003992:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003996:	f000 b8cd 	b.w	8003b34 <__malloc_unlock>
 800399a:	42a3      	cmp	r3, r4
 800399c:	d90b      	bls.n	80039b6 <_free_r+0x4e>
 800399e:	6821      	ldr	r1, [r4, #0]
 80039a0:	1862      	adds	r2, r4, r1
 80039a2:	4293      	cmp	r3, r2
 80039a4:	bf04      	itt	eq
 80039a6:	681a      	ldreq	r2, [r3, #0]
 80039a8:	685b      	ldreq	r3, [r3, #4]
 80039aa:	6063      	str	r3, [r4, #4]
 80039ac:	bf04      	itt	eq
 80039ae:	1852      	addeq	r2, r2, r1
 80039b0:	6022      	streq	r2, [r4, #0]
 80039b2:	602c      	str	r4, [r5, #0]
 80039b4:	e7ec      	b.n	8003990 <_free_r+0x28>
 80039b6:	461a      	mov	r2, r3
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	b10b      	cbz	r3, 80039c0 <_free_r+0x58>
 80039bc:	42a3      	cmp	r3, r4
 80039be:	d9fa      	bls.n	80039b6 <_free_r+0x4e>
 80039c0:	6811      	ldr	r1, [r2, #0]
 80039c2:	1855      	adds	r5, r2, r1
 80039c4:	42a5      	cmp	r5, r4
 80039c6:	d10b      	bne.n	80039e0 <_free_r+0x78>
 80039c8:	6824      	ldr	r4, [r4, #0]
 80039ca:	4421      	add	r1, r4
 80039cc:	1854      	adds	r4, r2, r1
 80039ce:	42a3      	cmp	r3, r4
 80039d0:	6011      	str	r1, [r2, #0]
 80039d2:	d1dd      	bne.n	8003990 <_free_r+0x28>
 80039d4:	681c      	ldr	r4, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	6053      	str	r3, [r2, #4]
 80039da:	4421      	add	r1, r4
 80039dc:	6011      	str	r1, [r2, #0]
 80039de:	e7d7      	b.n	8003990 <_free_r+0x28>
 80039e0:	d902      	bls.n	80039e8 <_free_r+0x80>
 80039e2:	230c      	movs	r3, #12
 80039e4:	6003      	str	r3, [r0, #0]
 80039e6:	e7d3      	b.n	8003990 <_free_r+0x28>
 80039e8:	6825      	ldr	r5, [r4, #0]
 80039ea:	1961      	adds	r1, r4, r5
 80039ec:	428b      	cmp	r3, r1
 80039ee:	bf04      	itt	eq
 80039f0:	6819      	ldreq	r1, [r3, #0]
 80039f2:	685b      	ldreq	r3, [r3, #4]
 80039f4:	6063      	str	r3, [r4, #4]
 80039f6:	bf04      	itt	eq
 80039f8:	1949      	addeq	r1, r1, r5
 80039fa:	6021      	streq	r1, [r4, #0]
 80039fc:	6054      	str	r4, [r2, #4]
 80039fe:	e7c7      	b.n	8003990 <_free_r+0x28>
 8003a00:	b003      	add	sp, #12
 8003a02:	bd30      	pop	{r4, r5, pc}
 8003a04:	20000090 	.word	0x20000090

08003a08 <_malloc_r>:
 8003a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0a:	1ccd      	adds	r5, r1, #3
 8003a0c:	f025 0503 	bic.w	r5, r5, #3
 8003a10:	3508      	adds	r5, #8
 8003a12:	2d0c      	cmp	r5, #12
 8003a14:	bf38      	it	cc
 8003a16:	250c      	movcc	r5, #12
 8003a18:	2d00      	cmp	r5, #0
 8003a1a:	4606      	mov	r6, r0
 8003a1c:	db01      	blt.n	8003a22 <_malloc_r+0x1a>
 8003a1e:	42a9      	cmp	r1, r5
 8003a20:	d903      	bls.n	8003a2a <_malloc_r+0x22>
 8003a22:	230c      	movs	r3, #12
 8003a24:	6033      	str	r3, [r6, #0]
 8003a26:	2000      	movs	r0, #0
 8003a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a2a:	f000 f87d 	bl	8003b28 <__malloc_lock>
 8003a2e:	4921      	ldr	r1, [pc, #132]	; (8003ab4 <_malloc_r+0xac>)
 8003a30:	680a      	ldr	r2, [r1, #0]
 8003a32:	4614      	mov	r4, r2
 8003a34:	b99c      	cbnz	r4, 8003a5e <_malloc_r+0x56>
 8003a36:	4f20      	ldr	r7, [pc, #128]	; (8003ab8 <_malloc_r+0xb0>)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	b923      	cbnz	r3, 8003a46 <_malloc_r+0x3e>
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	4630      	mov	r0, r6
 8003a40:	f000 f862 	bl	8003b08 <_sbrk_r>
 8003a44:	6038      	str	r0, [r7, #0]
 8003a46:	4629      	mov	r1, r5
 8003a48:	4630      	mov	r0, r6
 8003a4a:	f000 f85d 	bl	8003b08 <_sbrk_r>
 8003a4e:	1c43      	adds	r3, r0, #1
 8003a50:	d123      	bne.n	8003a9a <_malloc_r+0x92>
 8003a52:	230c      	movs	r3, #12
 8003a54:	6033      	str	r3, [r6, #0]
 8003a56:	4630      	mov	r0, r6
 8003a58:	f000 f86c 	bl	8003b34 <__malloc_unlock>
 8003a5c:	e7e3      	b.n	8003a26 <_malloc_r+0x1e>
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	1b5b      	subs	r3, r3, r5
 8003a62:	d417      	bmi.n	8003a94 <_malloc_r+0x8c>
 8003a64:	2b0b      	cmp	r3, #11
 8003a66:	d903      	bls.n	8003a70 <_malloc_r+0x68>
 8003a68:	6023      	str	r3, [r4, #0]
 8003a6a:	441c      	add	r4, r3
 8003a6c:	6025      	str	r5, [r4, #0]
 8003a6e:	e004      	b.n	8003a7a <_malloc_r+0x72>
 8003a70:	6863      	ldr	r3, [r4, #4]
 8003a72:	42a2      	cmp	r2, r4
 8003a74:	bf0c      	ite	eq
 8003a76:	600b      	streq	r3, [r1, #0]
 8003a78:	6053      	strne	r3, [r2, #4]
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	f000 f85a 	bl	8003b34 <__malloc_unlock>
 8003a80:	f104 000b 	add.w	r0, r4, #11
 8003a84:	1d23      	adds	r3, r4, #4
 8003a86:	f020 0007 	bic.w	r0, r0, #7
 8003a8a:	1ac2      	subs	r2, r0, r3
 8003a8c:	d0cc      	beq.n	8003a28 <_malloc_r+0x20>
 8003a8e:	1a1b      	subs	r3, r3, r0
 8003a90:	50a3      	str	r3, [r4, r2]
 8003a92:	e7c9      	b.n	8003a28 <_malloc_r+0x20>
 8003a94:	4622      	mov	r2, r4
 8003a96:	6864      	ldr	r4, [r4, #4]
 8003a98:	e7cc      	b.n	8003a34 <_malloc_r+0x2c>
 8003a9a:	1cc4      	adds	r4, r0, #3
 8003a9c:	f024 0403 	bic.w	r4, r4, #3
 8003aa0:	42a0      	cmp	r0, r4
 8003aa2:	d0e3      	beq.n	8003a6c <_malloc_r+0x64>
 8003aa4:	1a21      	subs	r1, r4, r0
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	f000 f82e 	bl	8003b08 <_sbrk_r>
 8003aac:	3001      	adds	r0, #1
 8003aae:	d1dd      	bne.n	8003a6c <_malloc_r+0x64>
 8003ab0:	e7cf      	b.n	8003a52 <_malloc_r+0x4a>
 8003ab2:	bf00      	nop
 8003ab4:	20000090 	.word	0x20000090
 8003ab8:	20000094 	.word	0x20000094

08003abc <_realloc_r>:
 8003abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003abe:	4607      	mov	r7, r0
 8003ac0:	4614      	mov	r4, r2
 8003ac2:	460e      	mov	r6, r1
 8003ac4:	b921      	cbnz	r1, 8003ad0 <_realloc_r+0x14>
 8003ac6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003aca:	4611      	mov	r1, r2
 8003acc:	f7ff bf9c 	b.w	8003a08 <_malloc_r>
 8003ad0:	b922      	cbnz	r2, 8003adc <_realloc_r+0x20>
 8003ad2:	f7ff ff49 	bl	8003968 <_free_r>
 8003ad6:	4625      	mov	r5, r4
 8003ad8:	4628      	mov	r0, r5
 8003ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003adc:	f000 f830 	bl	8003b40 <_malloc_usable_size_r>
 8003ae0:	42a0      	cmp	r0, r4
 8003ae2:	d20f      	bcs.n	8003b04 <_realloc_r+0x48>
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	4638      	mov	r0, r7
 8003ae8:	f7ff ff8e 	bl	8003a08 <_malloc_r>
 8003aec:	4605      	mov	r5, r0
 8003aee:	2800      	cmp	r0, #0
 8003af0:	d0f2      	beq.n	8003ad8 <_realloc_r+0x1c>
 8003af2:	4631      	mov	r1, r6
 8003af4:	4622      	mov	r2, r4
 8003af6:	f7ff ff0f 	bl	8003918 <memcpy>
 8003afa:	4631      	mov	r1, r6
 8003afc:	4638      	mov	r0, r7
 8003afe:	f7ff ff33 	bl	8003968 <_free_r>
 8003b02:	e7e9      	b.n	8003ad8 <_realloc_r+0x1c>
 8003b04:	4635      	mov	r5, r6
 8003b06:	e7e7      	b.n	8003ad8 <_realloc_r+0x1c>

08003b08 <_sbrk_r>:
 8003b08:	b538      	push	{r3, r4, r5, lr}
 8003b0a:	4d06      	ldr	r5, [pc, #24]	; (8003b24 <_sbrk_r+0x1c>)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	4604      	mov	r4, r0
 8003b10:	4608      	mov	r0, r1
 8003b12:	602b      	str	r3, [r5, #0]
 8003b14:	f7fd f812 	bl	8000b3c <_sbrk>
 8003b18:	1c43      	adds	r3, r0, #1
 8003b1a:	d102      	bne.n	8003b22 <_sbrk_r+0x1a>
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	b103      	cbz	r3, 8003b22 <_sbrk_r+0x1a>
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	bd38      	pop	{r3, r4, r5, pc}
 8003b24:	2000016c 	.word	0x2000016c

08003b28 <__malloc_lock>:
 8003b28:	4801      	ldr	r0, [pc, #4]	; (8003b30 <__malloc_lock+0x8>)
 8003b2a:	f000 b811 	b.w	8003b50 <__retarget_lock_acquire_recursive>
 8003b2e:	bf00      	nop
 8003b30:	20000174 	.word	0x20000174

08003b34 <__malloc_unlock>:
 8003b34:	4801      	ldr	r0, [pc, #4]	; (8003b3c <__malloc_unlock+0x8>)
 8003b36:	f000 b80c 	b.w	8003b52 <__retarget_lock_release_recursive>
 8003b3a:	bf00      	nop
 8003b3c:	20000174 	.word	0x20000174

08003b40 <_malloc_usable_size_r>:
 8003b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b44:	1f18      	subs	r0, r3, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bfbc      	itt	lt
 8003b4a:	580b      	ldrlt	r3, [r1, r0]
 8003b4c:	18c0      	addlt	r0, r0, r3
 8003b4e:	4770      	bx	lr

08003b50 <__retarget_lock_acquire_recursive>:
 8003b50:	4770      	bx	lr

08003b52 <__retarget_lock_release_recursive>:
 8003b52:	4770      	bx	lr

08003b54 <_init>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	bf00      	nop
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr

08003b60 <_fini>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	bf00      	nop
 8003b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b66:	bc08      	pop	{r3}
 8003b68:	469e      	mov	lr, r3
 8003b6a:	4770      	bx	lr
